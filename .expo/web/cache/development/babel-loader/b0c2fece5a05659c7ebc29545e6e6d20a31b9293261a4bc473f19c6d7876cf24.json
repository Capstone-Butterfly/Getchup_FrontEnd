{"ast":null,"code":"import { getHeaderTitle, HeaderBackContext, HeaderHeightContext, HeaderShownContext } from '@react-navigation/elements';\nimport { useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ModalPresentationContext from '../../utils/ModalPresentationContext';\nimport useKeyboardManager from '../../utils/useKeyboardManager';\nimport Card from './Card';\nconst EPSILON = 0.1;\nfunction CardContainer(_ref) {\n  let {\n    interpolationIndex,\n    index,\n    active,\n    closing,\n    gesture,\n    focused,\n    modal,\n    getPreviousScene,\n    getFocusedRoute,\n    headerDarkContent,\n    hasAbsoluteFloatHeader,\n    headerHeight,\n    onHeaderHeightChange,\n    isParentHeaderShown,\n    isNextScreenTransparent,\n    detachCurrentScreen,\n    layout,\n    onCloseRoute,\n    onOpenRoute,\n    onGestureCancel,\n    onGestureEnd,\n    onGestureStart,\n    onTransitionEnd,\n    onTransitionStart,\n    renderHeader,\n    renderScene,\n    safeAreaInsetBottom,\n    safeAreaInsetLeft,\n    safeAreaInsetRight,\n    safeAreaInsetTop,\n    scene\n  } = _ref;\n  const parentHeaderHeight = React.useContext(HeaderHeightContext);\n  const {\n    onPageChangeStart,\n    onPageChangeCancel,\n    onPageChangeConfirm\n  } = useKeyboardManager(React.useCallback(() => {\n    const {\n      options,\n      navigation\n    } = scene.descriptor;\n    return navigation.isFocused() && options.keyboardHandlingEnabled !== false;\n  }, [scene.descriptor]));\n  const handleOpen = () => {\n    const {\n      route\n    } = scene.descriptor;\n    onTransitionEnd({\n      route\n    }, false);\n    onOpenRoute({\n      route\n    });\n  };\n  const handleClose = () => {\n    const {\n      route\n    } = scene.descriptor;\n    onTransitionEnd({\n      route\n    }, true);\n    onCloseRoute({\n      route\n    });\n  };\n  const handleGestureBegin = () => {\n    const {\n      route\n    } = scene.descriptor;\n    onPageChangeStart();\n    onGestureStart({\n      route\n    });\n  };\n  const handleGestureCanceled = () => {\n    const {\n      route\n    } = scene.descriptor;\n    onPageChangeCancel();\n    onGestureCancel({\n      route\n    });\n  };\n  const handleGestureEnd = () => {\n    const {\n      route\n    } = scene.descriptor;\n    onGestureEnd({\n      route\n    });\n  };\n  const handleTransition = _ref2 => {\n    let {\n      closing,\n      gesture\n    } = _ref2;\n    const {\n      route\n    } = scene.descriptor;\n    if (!gesture) {\n      onPageChangeConfirm === null || onPageChangeConfirm === void 0 ? void 0 : onPageChangeConfirm(true);\n    } else if (active && closing) {\n      onPageChangeConfirm === null || onPageChangeConfirm === void 0 ? void 0 : onPageChangeConfirm(false);\n    } else {\n      onPageChangeCancel === null || onPageChangeCancel === void 0 ? void 0 : onPageChangeCancel();\n    }\n    onTransitionStart === null || onTransitionStart === void 0 ? void 0 : onTransitionStart({\n      route\n    }, closing);\n  };\n  const insets = {\n    top: safeAreaInsetTop,\n    right: safeAreaInsetRight,\n    bottom: safeAreaInsetBottom,\n    left: safeAreaInsetLeft\n  };\n  const {\n    colors\n  } = useTheme();\n  const [pointerEvents, setPointerEvents] = React.useState('box-none');\n  React.useEffect(() => {\n    var _scene$progress$next, _scene$progress$next$;\n    const listener = (_scene$progress$next = scene.progress.next) === null || _scene$progress$next === void 0 ? void 0 : (_scene$progress$next$ = _scene$progress$next.addListener) === null || _scene$progress$next$ === void 0 ? void 0 : _scene$progress$next$.call(_scene$progress$next, _ref3 => {\n      let {\n        value\n      } = _ref3;\n      setPointerEvents(value <= EPSILON ? 'box-none' : 'none');\n    });\n    return () => {\n      if (listener) {\n        var _scene$progress$next2, _scene$progress$next3;\n        (_scene$progress$next2 = scene.progress.next) === null || _scene$progress$next2 === void 0 ? void 0 : (_scene$progress$next3 = _scene$progress$next2.removeListener) === null || _scene$progress$next3 === void 0 ? void 0 : _scene$progress$next3.call(_scene$progress$next2, listener);\n      }\n    };\n  }, [pointerEvents, scene.progress.next]);\n  const {\n    presentation,\n    animationEnabled,\n    cardOverlay,\n    cardOverlayEnabled,\n    cardShadowEnabled,\n    cardStyle,\n    cardStyleInterpolator,\n    gestureDirection,\n    gestureEnabled,\n    gestureResponseDistance,\n    gestureVelocityImpact,\n    headerMode,\n    headerShown,\n    transitionSpec\n  } = scene.descriptor.options;\n  const previousScene = getPreviousScene({\n    route: scene.descriptor.route\n  });\n  let backTitle;\n  if (previousScene) {\n    const {\n      options,\n      route\n    } = previousScene.descriptor;\n    backTitle = getHeaderTitle(options, route.name);\n  }\n  const headerBack = React.useMemo(() => backTitle !== undefined ? {\n    title: backTitle\n  } : undefined, [backTitle]);\n  return React.createElement(Card, {\n    interpolationIndex: interpolationIndex,\n    gestureDirection: gestureDirection,\n    layout: layout,\n    insets: insets,\n    gesture: gesture,\n    current: scene.progress.current,\n    next: scene.progress.next,\n    closing: closing,\n    onOpen: handleOpen,\n    onClose: handleClose,\n    overlay: cardOverlay,\n    overlayEnabled: cardOverlayEnabled,\n    shadowEnabled: cardShadowEnabled,\n    onTransition: handleTransition,\n    onGestureBegin: handleGestureBegin,\n    onGestureCanceled: handleGestureCanceled,\n    onGestureEnd: handleGestureEnd,\n    gestureEnabled: index === 0 ? false : gestureEnabled,\n    gestureResponseDistance: gestureResponseDistance,\n    gestureVelocityImpact: gestureVelocityImpact,\n    transitionSpec: transitionSpec,\n    styleInterpolator: cardStyleInterpolator,\n    accessibilityElementsHidden: !focused,\n    importantForAccessibility: focused ? 'auto' : 'no-hide-descendants',\n    pointerEvents: active ? 'box-none' : pointerEvents,\n    pageOverflowEnabled: headerMode !== 'float' && presentation !== 'modal',\n    headerDarkContent: headerDarkContent,\n    containerStyle: hasAbsoluteFloatHeader && headerMode !== 'screen' ? {\n      marginTop: headerHeight\n    } : null,\n    contentStyle: [{\n      backgroundColor: presentation === 'transparentModal' ? 'transparent' : colors.background\n    }, cardStyle],\n    style: [{\n      overflow: active ? undefined : 'hidden',\n      display: animationEnabled === false && isNextScreenTransparent === false && detachCurrentScreen !== false && !focused ? 'none' : 'flex'\n    }, StyleSheet.absoluteFill]\n  }, React.createElement(View, {\n    style: styles.container\n  }, React.createElement(ModalPresentationContext.Provider, {\n    value: modal\n  }, React.createElement(View, {\n    style: styles.scene\n  }, React.createElement(HeaderBackContext.Provider, {\n    value: headerBack\n  }, React.createElement(HeaderShownContext.Provider, {\n    value: isParentHeaderShown || headerShown !== false\n  }, React.createElement(HeaderHeightContext.Provider, {\n    value: headerShown ? headerHeight : parentHeaderHeight ?? 0\n  }, renderScene({\n    route: scene.descriptor.route\n  }))))), headerMode !== 'float' ? renderHeader({\n    mode: 'screen',\n    layout,\n    scenes: [previousScene, scene],\n    getPreviousScene,\n    getFocusedRoute,\n    onContentHeightChange: onHeaderHeightChange\n  }) : null)));\n}\nexport default React.memo(CardContainer);\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column-reverse'\n  },\n  scene: {\n    flex: 1\n  }\n});","map":{"version":3,"names":["getHeaderTitle","HeaderBackContext","HeaderHeightContext","HeaderShownContext","useTheme","React","StyleSheet","View","ModalPresentationContext","useKeyboardManager","Card","EPSILON","CardContainer","_ref","interpolationIndex","index","active","closing","gesture","focused","modal","getPreviousScene","getFocusedRoute","headerDarkContent","hasAbsoluteFloatHeader","headerHeight","onHeaderHeightChange","isParentHeaderShown","isNextScreenTransparent","detachCurrentScreen","layout","onCloseRoute","onOpenRoute","onGestureCancel","onGestureEnd","onGestureStart","onTransitionEnd","onTransitionStart","renderHeader","renderScene","safeAreaInsetBottom","safeAreaInsetLeft","safeAreaInsetRight","safeAreaInsetTop","scene","parentHeaderHeight","useContext","onPageChangeStart","onPageChangeCancel","onPageChangeConfirm","useCallback","options","navigation","descriptor","isFocused","keyboardHandlingEnabled","handleOpen","route","handleClose","handleGestureBegin","handleGestureCanceled","handleGestureEnd","handleTransition","_ref2","insets","top","right","bottom","left","colors","pointerEvents","setPointerEvents","useState","useEffect","_scene$progress$next","_scene$progress$next$","listener","progress","next","addListener","call","_ref3","value","_scene$progress$next2","_scene$progress$next3","removeListener","presentation","animationEnabled","cardOverlay","cardOverlayEnabled","cardShadowEnabled","cardStyle","cardStyleInterpolator","gestureDirection","gestureEnabled","gestureResponseDistance","gestureVelocityImpact","headerMode","headerShown","transitionSpec","previousScene","backTitle","name","headerBack","useMemo","undefined","title","createElement","current","onOpen","onClose","overlay","overlayEnabled","shadowEnabled","onTransition","onGestureBegin","onGestureCanceled","styleInterpolator","accessibilityElementsHidden","importantForAccessibility","pageOverflowEnabled","containerStyle","marginTop","contentStyle","backgroundColor","background","style","overflow","display","absoluteFill","styles","container","Provider","mode","scenes","onContentHeightChange","memo","create","flex","flexDirection"],"sources":["/Users/farhang/Desktop/June 17 /Front/Getchup_FrontEnd/node_modules/@react-navigation/stack/src/views/Stack/CardContainer.tsx"],"sourcesContent":["import {\n  getHeaderTitle,\n  HeaderBackContext,\n  HeaderHeightContext,\n  HeaderShownContext,\n} from '@react-navigation/elements';\nimport { Route, useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport { Animated, StyleSheet, View } from 'react-native';\n\nimport type { Layout, Scene } from '../../types';\nimport ModalPresentationContext from '../../utils/ModalPresentationContext';\nimport useKeyboardManager from '../../utils/useKeyboardManager';\nimport type { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport Card from './Card';\n\ntype Props = {\n  interpolationIndex: number;\n  index: number;\n  active: boolean;\n  focused: boolean;\n  closing: boolean;\n  modal: boolean;\n  layout: Layout;\n  gesture: Animated.Value;\n  scene: Scene;\n  headerDarkContent: boolean | undefined;\n  safeAreaInsetTop: number;\n  safeAreaInsetRight: number;\n  safeAreaInsetBottom: number;\n  safeAreaInsetLeft: number;\n  getPreviousScene: (props: { route: Route<string> }) => Scene | undefined;\n  getFocusedRoute: () => Route<string>;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  onTransitionStart: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd: (props: { route: Route<string> }, closing: boolean) => void;\n  onGestureStart: (props: { route: Route<string> }) => void;\n  onGestureEnd: (props: { route: Route<string> }) => void;\n  onGestureCancel: (props: { route: Route<string> }) => void;\n  hasAbsoluteFloatHeader: boolean;\n  headerHeight: number;\n  onHeaderHeightChange: (props: {\n    route: Route<string>;\n    height: number;\n  }) => void;\n  isParentHeaderShown: boolean;\n  isNextScreenTransparent: boolean;\n  detachCurrentScreen: boolean;\n};\n\nconst EPSILON = 0.1;\n\nfunction CardContainer({\n  interpolationIndex,\n  index,\n  active,\n  closing,\n  gesture,\n  focused,\n  modal,\n  getPreviousScene,\n  getFocusedRoute,\n  headerDarkContent,\n  hasAbsoluteFloatHeader,\n  headerHeight,\n  onHeaderHeightChange,\n  isParentHeaderShown,\n  isNextScreenTransparent,\n  detachCurrentScreen,\n  layout,\n  onCloseRoute,\n  onOpenRoute,\n  onGestureCancel,\n  onGestureEnd,\n  onGestureStart,\n  onTransitionEnd,\n  onTransitionStart,\n  renderHeader,\n  renderScene,\n  safeAreaInsetBottom,\n  safeAreaInsetLeft,\n  safeAreaInsetRight,\n  safeAreaInsetTop,\n  scene,\n}: Props) {\n  const parentHeaderHeight = React.useContext(HeaderHeightContext);\n\n  const { onPageChangeStart, onPageChangeCancel, onPageChangeConfirm } =\n    useKeyboardManager(\n      React.useCallback(() => {\n        const { options, navigation } = scene.descriptor;\n\n        return (\n          navigation.isFocused() && options.keyboardHandlingEnabled !== false\n        );\n      }, [scene.descriptor])\n    );\n\n  const handleOpen = () => {\n    const { route } = scene.descriptor;\n\n    onTransitionEnd({ route }, false);\n    onOpenRoute({ route });\n  };\n\n  const handleClose = () => {\n    const { route } = scene.descriptor;\n\n    onTransitionEnd({ route }, true);\n    onCloseRoute({ route });\n  };\n\n  const handleGestureBegin = () => {\n    const { route } = scene.descriptor;\n\n    onPageChangeStart();\n    onGestureStart({ route });\n  };\n\n  const handleGestureCanceled = () => {\n    const { route } = scene.descriptor;\n\n    onPageChangeCancel();\n    onGestureCancel({ route });\n  };\n\n  const handleGestureEnd = () => {\n    const { route } = scene.descriptor;\n\n    onGestureEnd({ route });\n  };\n\n  const handleTransition = ({\n    closing,\n    gesture,\n  }: {\n    closing: boolean;\n    gesture: boolean;\n  }) => {\n    const { route } = scene.descriptor;\n\n    if (!gesture) {\n      onPageChangeConfirm?.(true);\n    } else if (active && closing) {\n      onPageChangeConfirm?.(false);\n    } else {\n      onPageChangeCancel?.();\n    }\n\n    onTransitionStart?.({ route }, closing);\n  };\n\n  const insets = {\n    top: safeAreaInsetTop,\n    right: safeAreaInsetRight,\n    bottom: safeAreaInsetBottom,\n    left: safeAreaInsetLeft,\n  };\n\n  const { colors } = useTheme();\n\n  const [pointerEvents, setPointerEvents] = React.useState<'box-none' | 'none'>(\n    'box-none'\n  );\n\n  React.useEffect(() => {\n    const listener = scene.progress.next?.addListener?.(\n      ({ value }: { value: number }) => {\n        setPointerEvents(value <= EPSILON ? 'box-none' : 'none');\n      }\n    );\n\n    return () => {\n      if (listener) {\n        scene.progress.next?.removeListener?.(listener);\n      }\n    };\n  }, [pointerEvents, scene.progress.next]);\n\n  const {\n    presentation,\n    animationEnabled,\n    cardOverlay,\n    cardOverlayEnabled,\n    cardShadowEnabled,\n    cardStyle,\n    cardStyleInterpolator,\n    gestureDirection,\n    gestureEnabled,\n    gestureResponseDistance,\n    gestureVelocityImpact,\n    headerMode,\n    headerShown,\n    transitionSpec,\n  } = scene.descriptor.options;\n\n  const previousScene = getPreviousScene({ route: scene.descriptor.route });\n\n  let backTitle: string | undefined;\n\n  if (previousScene) {\n    const { options, route } = previousScene.descriptor;\n\n    backTitle = getHeaderTitle(options, route.name);\n  }\n\n  const headerBack = React.useMemo(\n    () => (backTitle !== undefined ? { title: backTitle } : undefined),\n    [backTitle]\n  );\n\n  return (\n    <Card\n      interpolationIndex={interpolationIndex}\n      gestureDirection={gestureDirection}\n      layout={layout}\n      insets={insets}\n      gesture={gesture}\n      current={scene.progress.current}\n      next={scene.progress.next}\n      closing={closing}\n      onOpen={handleOpen}\n      onClose={handleClose}\n      overlay={cardOverlay}\n      overlayEnabled={cardOverlayEnabled}\n      shadowEnabled={cardShadowEnabled}\n      onTransition={handleTransition}\n      onGestureBegin={handleGestureBegin}\n      onGestureCanceled={handleGestureCanceled}\n      onGestureEnd={handleGestureEnd}\n      gestureEnabled={index === 0 ? false : gestureEnabled}\n      gestureResponseDistance={gestureResponseDistance}\n      gestureVelocityImpact={gestureVelocityImpact}\n      transitionSpec={transitionSpec}\n      styleInterpolator={cardStyleInterpolator}\n      accessibilityElementsHidden={!focused}\n      importantForAccessibility={focused ? 'auto' : 'no-hide-descendants'}\n      pointerEvents={active ? 'box-none' : pointerEvents}\n      pageOverflowEnabled={headerMode !== 'float' && presentation !== 'modal'}\n      headerDarkContent={headerDarkContent}\n      containerStyle={\n        hasAbsoluteFloatHeader && headerMode !== 'screen'\n          ? { marginTop: headerHeight }\n          : null\n      }\n      contentStyle={[\n        {\n          backgroundColor:\n            presentation === 'transparentModal'\n              ? 'transparent'\n              : colors.background,\n        },\n        cardStyle,\n      ]}\n      style={[\n        {\n          // This is necessary to avoid unfocused larger pages increasing scroll area\n          // The issue can be seen on the web when a smaller screen is pushed over a larger one\n          overflow: active ? undefined : 'hidden',\n          display:\n            // Hide unfocused screens when animation isn't enabled\n            // This is also necessary for a11y on web\n            animationEnabled === false &&\n            isNextScreenTransparent === false &&\n            detachCurrentScreen !== false &&\n            !focused\n              ? 'none'\n              : 'flex',\n        },\n        StyleSheet.absoluteFill,\n      ]}\n    >\n      <View style={styles.container}>\n        <ModalPresentationContext.Provider value={modal}>\n          <View style={styles.scene}>\n            <HeaderBackContext.Provider value={headerBack}>\n              <HeaderShownContext.Provider\n                value={isParentHeaderShown || headerShown !== false}\n              >\n                <HeaderHeightContext.Provider\n                  value={headerShown ? headerHeight : parentHeaderHeight ?? 0}\n                >\n                  {renderScene({ route: scene.descriptor.route })}\n                </HeaderHeightContext.Provider>\n              </HeaderShownContext.Provider>\n            </HeaderBackContext.Provider>\n          </View>\n          {headerMode !== 'float'\n            ? renderHeader({\n                mode: 'screen',\n                layout,\n                scenes: [previousScene, scene],\n                getPreviousScene,\n                getFocusedRoute,\n                onContentHeightChange: onHeaderHeightChange,\n              })\n            : null}\n        </ModalPresentationContext.Provider>\n      </View>\n    </Card>\n  );\n}\n\nexport default React.memo(CardContainer);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column-reverse',\n  },\n  scene: {\n    flex: 1,\n  },\n});\n"],"mappings":"AAAA,SACEA,cAAc,EACdC,iBAAiB,EACjBC,mBAAmB,EACnBC,kBAAkB,QACb,4BAA4B;AACnC,SAAgBC,QAAQ,QAAQ,0BAA0B;AAC1D,OAAO,KAAKC,KAAK,MAAM,OAAO;AAAA,OAAAC,UAAA;AAAA,OAAAC,IAAA;AAI9B,OAAOC,wBAAwB,MAAM,sCAAsC;AAC3E,OAAOC,kBAAkB,MAAM,gCAAgC;AAE/D,OAAOC,IAAI,MAAM,QAAQ;AA0CzB,MAAMC,OAAO,GAAG,GAAG;AAEnB,SAASC,aAAaA,CAAAC,IAAA,EAgCZ;EAAA,IAhCa;IACrBC,kBAAkB;IAClBC,KAAK;IACLC,MAAM;IACNC,OAAO;IACPC,OAAO;IACPC,OAAO;IACPC,KAAK;IACLC,gBAAgB;IAChBC,eAAe;IACfC,iBAAiB;IACjBC,sBAAsB;IACtBC,YAAY;IACZC,oBAAoB;IACpBC,mBAAmB;IACnBC,uBAAuB;IACvBC,mBAAmB;IACnBC,MAAM;IACNC,YAAY;IACZC,WAAW;IACXC,eAAe;IACfC,YAAY;IACZC,cAAc;IACdC,eAAe;IACfC,iBAAiB;IACjBC,YAAY;IACZC,WAAW;IACXC,mBAAmB;IACnBC,iBAAiB;IACjBC,kBAAkB;IAClBC,gBAAgB;IAChBC;EACK,CAAC,GAAA/B,IAAA;EACN,MAAMgC,kBAAkB,GAAGxC,KAAK,CAACyC,UAAU,CAAC5C,mBAAmB,CAAC;EAEhE,MAAM;IAAE6C,iBAAiB;IAAEC,kBAAkB;IAAEC;EAAoB,CAAC,GAClExC,kBAAkB,CAChBJ,KAAK,CAAC6C,WAAW,CAAC,MAAM;IACtB,MAAM;MAAEC,OAAO;MAAEC;IAAW,CAAC,GAAGR,KAAK,CAACS,UAAU;IAEhD,OACED,UAAU,CAACE,SAAS,EAAE,IAAIH,OAAO,CAACI,uBAAuB,KAAK,KAAK;EAEvE,CAAC,EAAE,CAACX,KAAK,CAACS,UAAU,CAAC,CAAC,CACvB;EAEH,MAAMG,UAAU,GAAGA,CAAA,KAAM;IACvB,MAAM;MAAEC;IAAM,CAAC,GAAGb,KAAK,CAACS,UAAU;IAElCjB,eAAe,CAAC;MAAEqB;IAAM,CAAC,EAAE,KAAK,CAAC;IACjCzB,WAAW,CAAC;MAAEyB;IAAM,CAAC,CAAC;EACxB,CAAC;EAED,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACxB,MAAM;MAAED;IAAM,CAAC,GAAGb,KAAK,CAACS,UAAU;IAElCjB,eAAe,CAAC;MAAEqB;IAAM,CAAC,EAAE,IAAI,CAAC;IAChC1B,YAAY,CAAC;MAAE0B;IAAM,CAAC,CAAC;EACzB,CAAC;EAED,MAAME,kBAAkB,GAAGA,CAAA,KAAM;IAC/B,MAAM;MAAEF;IAAM,CAAC,GAAGb,KAAK,CAACS,UAAU;IAElCN,iBAAiB,EAAE;IACnBZ,cAAc,CAAC;MAAEsB;IAAM,CAAC,CAAC;EAC3B,CAAC;EAED,MAAMG,qBAAqB,GAAGA,CAAA,KAAM;IAClC,MAAM;MAAEH;IAAM,CAAC,GAAGb,KAAK,CAACS,UAAU;IAElCL,kBAAkB,EAAE;IACpBf,eAAe,CAAC;MAAEwB;IAAM,CAAC,CAAC;EAC5B,CAAC;EAED,MAAMI,gBAAgB,GAAGA,CAAA,KAAM;IAC7B,MAAM;MAAEJ;IAAM,CAAC,GAAGb,KAAK,CAACS,UAAU;IAElCnB,YAAY,CAAC;MAAEuB;IAAM,CAAC,CAAC;EACzB,CAAC;EAED,MAAMK,gBAAgB,GAAGC,KAAA,IAMnB;IAAA,IANoB;MACxB9C,OAAO;MACPC;IAIF,CAAC,GAAA6C,KAAA;IACC,MAAM;MAAEN;IAAM,CAAC,GAAGb,KAAK,CAACS,UAAU;IAElC,IAAI,CAACnC,OAAO,EAAE;MACZ+B,mBAAmB,aAAnBA,mBAAmB,uBAAnBA,mBAAmB,CAAG,IAAI,CAAC;IAC7B,CAAC,MAAM,IAAIjC,MAAM,IAAIC,OAAO,EAAE;MAC5BgC,mBAAmB,aAAnBA,mBAAmB,uBAAnBA,mBAAmB,CAAG,KAAK,CAAC;IAC9B,CAAC,MAAM;MACLD,kBAAkB,aAAlBA,kBAAkB,uBAAlBA,kBAAkB,EAAI;IACxB;IAEAX,iBAAiB,aAAjBA,iBAAiB,uBAAjBA,iBAAiB,CAAG;MAAEoB;IAAM,CAAC,EAAExC,OAAO,CAAC;EACzC,CAAC;EAED,MAAM+C,MAAM,GAAG;IACbC,GAAG,EAAEtB,gBAAgB;IACrBuB,KAAK,EAAExB,kBAAkB;IACzByB,MAAM,EAAE3B,mBAAmB;IAC3B4B,IAAI,EAAE3B;EACR,CAAC;EAED,MAAM;IAAE4B;EAAO,CAAC,GAAGjE,QAAQ,EAAE;EAE7B,MAAM,CAACkE,aAAa,EAAEC,gBAAgB,CAAC,GAAGlE,KAAK,CAACmE,QAAQ,CACtD,UAAU,CACX;EAEDnE,KAAK,CAACoE,SAAS,CAAC,MAAM;IAAA,IAAAC,oBAAA,EAAAC,qBAAA;IACpB,MAAMC,QAAQ,IAAAF,oBAAA,GAAG9B,KAAK,CAACiC,QAAQ,CAACC,IAAI,cAAAJ,oBAAA,wBAAAC,qBAAA,GAAnBD,oBAAA,CAAqBK,WAAW,cAAAJ,qBAAA,uBAAhCA,qBAAA,CAAAK,IAAA,CAAAN,oBAAA,EACfO,KAAA,IAAkC;MAAA,IAAjC;QAAEC;MAAyB,CAAC,GAAAD,KAAA;MAC3BV,gBAAgB,CAACW,KAAK,IAAIvE,OAAO,GAAG,UAAU,GAAG,MAAM,CAAC;IAC1D,CAAC,CACF;IAED,OAAO,MAAM;MACX,IAAIiE,QAAQ,EAAE;QAAA,IAAAO,qBAAA,EAAAC,qBAAA;QACZ,CAAAD,qBAAA,GAAAvC,KAAK,CAACiC,QAAQ,CAACC,IAAI,cAAAK,qBAAA,wBAAAC,qBAAA,GAAnBD,qBAAA,CAAqBE,cAAc,cAAAD,qBAAA,uBAAnCA,qBAAA,CAAAJ,IAAA,CAAAG,qBAAA,EAAsCP,QAAQ,CAAC;MACjD;IACF,CAAC;EACH,CAAC,EAAE,CAACN,aAAa,EAAE1B,KAAK,CAACiC,QAAQ,CAACC,IAAI,CAAC,CAAC;EAExC,MAAM;IACJQ,YAAY;IACZC,gBAAgB;IAChBC,WAAW;IACXC,kBAAkB;IAClBC,iBAAiB;IACjBC,SAAS;IACTC,qBAAqB;IACrBC,gBAAgB;IAChBC,cAAc;IACdC,uBAAuB;IACvBC,qBAAqB;IACrBC,UAAU;IACVC,WAAW;IACXC;EACF,CAAC,GAAGvD,KAAK,CAACS,UAAU,CAACF,OAAO;EAE5B,MAAMiD,aAAa,GAAG/E,gBAAgB,CAAC;IAAEoC,KAAK,EAAEb,KAAK,CAACS,UAAU,CAACI;EAAM,CAAC,CAAC;EAEzE,IAAI4C,SAA6B;EAEjC,IAAID,aAAa,EAAE;IACjB,MAAM;MAAEjD,OAAO;MAAEM;IAAM,CAAC,GAAG2C,aAAa,CAAC/C,UAAU;IAEnDgD,SAAS,GAAGrG,cAAc,CAACmD,OAAO,EAAEM,KAAK,CAAC6C,IAAI,CAAC;EACjD;EAEA,MAAMC,UAAU,GAAGlG,KAAK,CAACmG,OAAO,CAC9B,MAAOH,SAAS,KAAKI,SAAS,GAAG;IAAEC,KAAK,EAAEL;EAAU,CAAC,GAAGI,SAAU,EAClE,CAACJ,SAAS,CAAC,CACZ;EAED,OACEhG,KAAA,CAAAsG,aAAA,CAACjG,IAAI;IACHI,kBAAkB,EAAEA,kBAAmB;IACvC+E,gBAAgB,EAAEA,gBAAiB;IACnC/D,MAAM,EAAEA,MAAO;IACfkC,MAAM,EAAEA,MAAO;IACf9C,OAAO,EAAEA,OAAQ;IACjB0F,OAAO,EAAEhE,KAAK,CAACiC,QAAQ,CAAC+B,OAAQ;IAChC9B,IAAI,EAAElC,KAAK,CAACiC,QAAQ,CAACC,IAAK;IAC1B7D,OAAO,EAAEA,OAAQ;IACjB4F,MAAM,EAAErD,UAAW;IACnBsD,OAAO,EAAEpD,WAAY;IACrBqD,OAAO,EAAEvB,WAAY;IACrBwB,cAAc,EAAEvB,kBAAmB;IACnCwB,aAAa,EAAEvB,iBAAkB;IACjCwB,YAAY,EAAEpD,gBAAiB;IAC/BqD,cAAc,EAAExD,kBAAmB;IACnCyD,iBAAiB,EAAExD,qBAAsB;IACzC1B,YAAY,EAAE2B,gBAAiB;IAC/BiC,cAAc,EAAE/E,KAAK,KAAK,CAAC,GAAG,KAAK,GAAG+E,cAAe;IACrDC,uBAAuB,EAAEA,uBAAwB;IACjDC,qBAAqB,EAAEA,qBAAsB;IAC7CG,cAAc,EAAEA,cAAe;IAC/BkB,iBAAiB,EAAEzB,qBAAsB;IACzC0B,2BAA2B,EAAE,CAACnG,OAAQ;IACtCoG,yBAAyB,EAAEpG,OAAO,GAAG,MAAM,GAAG,qBAAsB;IACpEmD,aAAa,EAAEtD,MAAM,GAAG,UAAU,GAAGsD,aAAc;IACnDkD,mBAAmB,EAAEvB,UAAU,KAAK,OAAO,IAAIX,YAAY,KAAK,OAAQ;IACxE/D,iBAAiB,EAAEA,iBAAkB;IACrCkG,cAAc,EACZjG,sBAAsB,IAAIyE,UAAU,KAAK,QAAQ,GAC7C;MAAEyB,SAAS,EAAEjG;IAAa,CAAC,GAC3B,IACL;IACDkG,YAAY,EAAE,CACZ;MACEC,eAAe,EACbtC,YAAY,KAAK,kBAAkB,GAC/B,aAAa,GACbjB,MAAM,CAACwD;IACf,CAAC,EACDlC,SAAS,CACT;IACFmC,KAAK,EAAE,CACL;MAGEC,QAAQ,EAAE/G,MAAM,GAAGyF,SAAS,GAAG,QAAQ;MACvCuB,OAAO,EAGLzC,gBAAgB,KAAK,KAAK,IAC1B3D,uBAAuB,KAAK,KAAK,IACjCC,mBAAmB,KAAK,KAAK,IAC7B,CAACV,OAAO,GACJ,MAAM,GACN;IACR,CAAC,EACDb,UAAU,CAAC2H,YAAY;EACvB,GAEF5H,KAAA,CAAAsG,aAAA,CAACpG,IAAI;IAACuH,KAAK,EAAEI,MAAM,CAACC;EAAU,GAC5B9H,KAAA,CAAAsG,aAAA,CAACnG,wBAAwB,CAAC4H,QAAQ;IAAClD,KAAK,EAAE9D;EAAM,GAC9Cf,KAAA,CAAAsG,aAAA,CAACpG,IAAI;IAACuH,KAAK,EAAEI,MAAM,CAACtF;EAAM,GACxBvC,KAAA,CAAAsG,aAAA,CAAC1G,iBAAiB,CAACmI,QAAQ;IAAClD,KAAK,EAAEqB;EAAW,GAC5ClG,KAAA,CAAAsG,aAAA,CAACxG,kBAAkB,CAACiI,QAAQ;IAC1BlD,KAAK,EAAEvD,mBAAmB,IAAIuE,WAAW,KAAK;EAAM,GAEpD7F,KAAA,CAAAsG,aAAA,CAACzG,mBAAmB,CAACkI,QAAQ;IAC3BlD,KAAK,EAAEgB,WAAW,GAAGzE,YAAY,GAAGoB,kBAAkB,IAAI;EAAE,GAE3DN,WAAW,CAAC;IAAEkB,KAAK,EAAEb,KAAK,CAACS,UAAU,CAACI;EAAM,CAAC,CAAC,CAClB,CACH,CACH,CACxB,EACNwC,UAAU,KAAK,OAAO,GACnB3D,YAAY,CAAC;IACX+F,IAAI,EAAE,QAAQ;IACdvG,MAAM;IACNwG,MAAM,EAAE,CAAClC,aAAa,EAAExD,KAAK,CAAC;IAC9BvB,gBAAgB;IAChBC,eAAe;IACfiH,qBAAqB,EAAE7G;EACzB,CAAC,CAAC,GACF,IAAI,CAC0B,CAC/B,CACF;AAEX;AAEA,eAAerB,KAAK,CAACmI,IAAI,CAAC5H,aAAa,CAAC;AAExC,MAAMsH,MAAM,GAAG5H,UAAU,CAACmI,MAAM,CAAC;EAC/BN,SAAS,EAAE;IACTO,IAAI,EAAE,CAAC;IACPC,aAAa,EAAE;EACjB,CAAC;EACD/F,KAAK,EAAE;IACL8F,IAAI,EAAE;EACR;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}