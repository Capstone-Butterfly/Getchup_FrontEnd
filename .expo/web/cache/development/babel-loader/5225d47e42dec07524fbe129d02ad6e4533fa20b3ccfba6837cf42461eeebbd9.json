{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { useState as $8rdZD$useState, useRef as $8rdZD$useRef } from \"react\";\nfunction $b45bbbaf0c3785df$export$29efd034f1d79f81(props) {\n  let {\n    getItems: getItems,\n    isDisabled: isDisabled,\n    collection: collection,\n    selectionManager: selectionManager,\n    onDragStart: onDragStart,\n    onDragMove: onDragMove,\n    onDragEnd: onDragEnd,\n    preview: preview,\n    getAllowedDropOperations: getAllowedDropOperations\n  } = props;\n  let [, setDragging] = (0, $8rdZD$useState)(false);\n  let draggingKeys = (0, $8rdZD$useRef)(new Set());\n  let draggedKey = (0, $8rdZD$useRef)(null);\n  let getKeys = key => {\n    let keys = new Set(selectionManager.isSelected(key) ? new Set([...selectionManager.selectedKeys].filter(key => !!collection.getItem(key))) : []);\n    keys.add(key);\n    return keys;\n  };\n  return {\n    collection: collection,\n    selectionManager: selectionManager,\n    get draggedKey() {\n      return draggedKey.current;\n    },\n    get draggingKeys() {\n      return draggingKeys.current;\n    },\n    isDragging(key) {\n      return draggingKeys.current.has(key);\n    },\n    getKeysForDrag: getKeys,\n    getItems(key) {\n      return getItems(getKeys(key));\n    },\n    isDisabled: isDisabled,\n    preview: preview,\n    getAllowedDropOperations: getAllowedDropOperations,\n    startDrag(key, event) {\n      let keys = getKeys(key);\n      draggingKeys.current = keys;\n      draggedKey.current = key;\n      selectionManager.setFocused(false);\n      setDragging(true);\n      if (typeof onDragStart === 'function') onDragStart(_objectSpread(_objectSpread({}, event), {}, {\n        keys: keys\n      }));\n    },\n    moveDrag(event) {\n      if (typeof onDragMove === 'function') onDragMove(_objectSpread(_objectSpread({}, event), {}, {\n        keys: draggingKeys.current\n      }));\n    },\n    endDrag(event) {\n      let {\n        isInternal: isInternal\n      } = event;\n      if (typeof onDragEnd === 'function') onDragEnd(_objectSpread(_objectSpread({}, event), {}, {\n        keys: draggingKeys.current,\n        isInternal: isInternal\n      }));\n      draggingKeys.current = new Set();\n      draggedKey.current = null;\n      setDragging(false);\n    }\n  };\n}\nexport { $b45bbbaf0c3785df$export$29efd034f1d79f81 as useDraggableCollectionState };","map":{"version":3,"names":["$b45bbbaf0c3785df$export$29efd034f1d79f81","props","getItems","isDisabled","collection","selectionManager","onDragStart","onDragMove","onDragEnd","preview","getAllowedDropOperations","setDragging","$8rdZD$useState","draggingKeys","$8rdZD$useRef","Set","draggedKey","getKeys","key","keys","isSelected","selectedKeys","filter","getItem","add","current","isDragging","has","getKeysForDrag","startDrag","event","setFocused","_objectSpread","moveDrag","endDrag","isInternal"],"sources":["/Users/farhang/Desktop/June 17 /Front/Getchup_FrontEnd/node_modules/@react-stately/dnd/dist/packages/@react-stately/dnd/src/useDraggableCollectionState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, DraggableCollectionEndEvent, DraggableCollectionProps, DragItem, DragMoveEvent, DragPreviewRenderer, DragStartEvent, DropOperation, Key, Node} from '@react-types/shared';\nimport {MultipleSelectionManager} from '@react-stately/selection';\nimport {RefObject, useRef, useState} from 'react';\n\nexport interface DraggableCollectionStateOptions extends DraggableCollectionProps {\n  /** A collection of items. */\n  collection: Collection<Node<unknown>>,\n  /** An interface for reading and updating multiple selection state. */\n  selectionManager: MultipleSelectionManager,\n  /** Whether the drag events should be disabled. */\n  isDisabled?: boolean\n}\n\nexport interface DraggableCollectionState {\n  /** A collection of items. */\n  collection: Collection<Node<unknown>>,\n  /** An interface for reading and updating multiple selection state. */\n  selectionManager: MultipleSelectionManager,\n  /** The key of the item that initiated a drag. */\n  draggedKey: Key | null,\n  /** The keys of the items that are currently being dragged. */\n  draggingKeys: Set<Key>,\n  /** Whether drag events are disabled. */\n  isDisabled?: boolean,\n  /** Returns whether the given key is currently being dragged. */\n  isDragging(key: Key): boolean,\n  /** Returns the keys of the items that will be dragged with the given key (e.g. selected items). */\n  getKeysForDrag(key: Key): Set<Key>,\n  /** Returns the items to drag for the given key. */\n  getItems(key: Key): DragItem[],\n  /** The ref of the element that will be rendered as the drag preview while dragging. */\n  preview?: RefObject<DragPreviewRenderer>,\n  /** Function that returns the drop operations that are allowed for the dragged items. If not provided, all drop operations are allowed. */\n  getAllowedDropOperations?: () => DropOperation[],\n  /** Begins a drag for the given key. This triggers the onDragStart event. */\n  startDrag(key: Key, event: DragStartEvent): void,\n  /** Triggers an onDragMove event. */\n  moveDrag(event: DragMoveEvent): void,\n  /** Ends the current drag, and emits an onDragEnd event. */\n  endDrag(event: DraggableCollectionEndEvent): void\n}\n\n/**\n * Manages state for a draggable collection.\n */\nexport function useDraggableCollectionState(props: DraggableCollectionStateOptions): DraggableCollectionState {\n  let {\n    getItems,\n    isDisabled,\n    collection,\n    selectionManager,\n    onDragStart,\n    onDragMove,\n    onDragEnd,\n    preview,\n    getAllowedDropOperations\n  } = props;\n  let [, setDragging] = useState(false);\n  let draggingKeys = useRef(new Set<Key>());\n  let draggedKey = useRef(null);\n  let getKeys = (key: Key) => {\n    // The clicked item is always added to the drag. If it is selected, then all of the\n    // other selected items are also dragged. If it is not selected, the only the clicked\n    // item is dragged. This matches native macOS behavior.\n    let keys = new Set(\n      selectionManager.isSelected(key)\n        ? new Set([...selectionManager.selectedKeys].filter(key => !!collection.getItem(key)))\n        : []\n    );\n\n    keys.add(key);\n    return keys;\n  };\n\n  return {\n    collection,\n    selectionManager,\n    get draggedKey() {\n      return draggedKey.current;\n    },\n    get draggingKeys() {\n      return draggingKeys.current;\n    },\n    isDragging(key) {\n      return draggingKeys.current.has(key);\n    },\n    getKeysForDrag: getKeys,\n    getItems(key) {\n      return getItems(getKeys(key));\n    },\n    isDisabled,\n    preview,\n    getAllowedDropOperations,\n    startDrag(key, event) {\n      let keys = getKeys(key);\n      draggingKeys.current = keys;\n      draggedKey.current = key;\n      selectionManager.setFocused(false);\n      setDragging(true);\n      if (typeof onDragStart === 'function') {\n        onDragStart({\n          ...event,\n          keys\n        });\n      }\n    },\n    moveDrag(event) {\n      if (typeof onDragMove === 'function') {\n        onDragMove({\n          ...event,\n          keys: draggingKeys.current\n        });\n      }\n    },\n    endDrag(event) {\n      let {\n        isInternal\n      } = event;\n\n      if (typeof onDragEnd === 'function') {\n        onDragEnd({\n          ...event,\n          keys: draggingKeys.current,\n          isInternal\n        });\n      }\n\n      draggingKeys.current = new Set();\n      draggedKey.current = null;\n      setDragging(false);\n    }\n  };\n}\n"],"mappings":";;;;AAyDO,SAASA,0CAA4BC,KAAsC;EAChF,IAAI;IAAAC,QAAA,EACFA,QAAQ;IAAAC,UAAA,EACRA,UAAU;IAAAC,UAAA,EACVA,UAAU;IAAAC,gBAAA,EACVA,gBAAgB;IAAAC,WAAA,EAChBA,WAAW;IAAAC,UAAA,EACXA,UAAU;IAAAC,SAAA,EACVA,SAAS;IAAAC,OAAA,EACTA,OAAO;IAAAC,wBAAA,EACPA;EAAwB,CACzB,GAAGT,KAAA;EACJ,IAAI,GAAGU,WAAA,CAAY,GAAG,IAAAC,eAAO,EAAE;EAC/B,IAAIC,YAAA,GAAe,IAAAC,aAAK,EAAE,IAAIC,GAAA;EAC9B,IAAIC,UAAA,GAAa,IAAAF,aAAK,EAAE;EACxB,IAAIG,OAAA,GAAWC,GAAA;IAIb,IAAIC,IAAA,GAAO,IAAIJ,GAAA,CACbV,gBAAA,CAAiBe,UAAU,CAACF,GAAA,IACxB,IAAIH,GAAA,CAAI,C,GAAIV,gBAAA,CAAiBgB,YAAY,CAAC,CAACC,MAAM,CAACJ,GAAA,IAAO,CAAC,CAACd,UAAA,CAAWmB,OAAO,CAACL,GAAA,MAC9E,EAAE;IAGRC,IAAA,CAAKK,GAAG,CAACN,GAAA;IACT,OAAOC,IAAA;EACT;EAEA,OAAO;gBACLf,UAAA;sBACAC,gBAAA;IACA,IAAIW,WAAA,EAAa;MACf,OAAOA,UAAA,CAAWS,OAAO;IAC3B;IACA,IAAIZ,aAAA,EAAe;MACjB,OAAOA,YAAA,CAAaY,OAAO;IAC7B;IACAC,WAAWR,GAAG;MACZ,OAAOL,YAAA,CAAaY,OAAO,CAACE,GAAG,CAACT,GAAA;IAClC;IACAU,cAAA,EAAgBX,OAAA;IAChBf,SAASgB,GAAG;MACV,OAAOhB,QAAA,CAASe,OAAA,CAAQC,GAAA;IAC1B;gBACAf,UAAA;aACAM,OAAA;8BACAC,wBAAA;IACAmB,UAAUX,GAAG,EAAEY,KAAK;MAClB,IAAIX,IAAA,GAAOF,OAAA,CAAQC,GAAA;MACnBL,YAAA,CAAaY,OAAO,GAAGN,IAAA;MACvBH,UAAA,CAAWS,OAAO,GAAGP,GAAA;MACrBb,gBAAA,CAAiB0B,UAAU,CAAC;MAC5BpB,WAAA,CAAY;MACZ,IAAI,OAAOL,WAAA,KAAgB,YACzBA,WAAA,CAAA0B,aAAA,CAAAA,aAAA,KACKF,KAAK;cACRX;MAAA,EACF;IAEJ;IACAc,SAASH,KAAK;MACZ,IAAI,OAAOvB,UAAA,KAAe,YACxBA,UAAA,CAAAyB,aAAA,CAAAA,aAAA,KACKF,KAAK;QACRX,IAAA,EAAMN,YAAA,CAAaY;MAAO,EAC5B;IAEJ;IACAS,QAAQJ,KAAK;MACX,IAAI;QAAAK,UAAA,EACFA;MAAU,CACX,GAAGL,KAAA;MAEJ,IAAI,OAAOtB,SAAA,KAAc,YACvBA,SAAA,CAAAwB,aAAA,CAAAA,aAAA,KACKF,KAAK;QACRX,IAAA,EAAMN,YAAA,CAAaY,OAAO;oBAC1BU;MAAA,EACF;MAGFtB,YAAA,CAAaY,OAAO,GAAG,IAAIV,GAAA;MAC3BC,UAAA,CAAWS,OAAO,GAAG;MACrBd,WAAA,CAAY;IACd;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}