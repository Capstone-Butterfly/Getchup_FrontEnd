{"ast":null,"code":"import { getHeaderTitle, HeaderBackContext } from '@react-navigation/elements';\nimport { NavigationContext, NavigationRouteContext } from '@react-navigation/native';\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { forNoAnimation, forSlideLeft, forSlideRight, forSlideUp } from '../../TransitionConfigs/HeaderStyleInterpolators';\nimport Header from './Header';\nexport default function HeaderContainer(_ref) {\n  let {\n    mode,\n    scenes,\n    layout,\n    getPreviousScene,\n    getFocusedRoute,\n    onContentHeightChange,\n    style\n  } = _ref;\n  const focusedRoute = getFocusedRoute();\n  const parentHeaderBack = React.useContext(HeaderBackContext);\n  return React.createElement(Animated.View, {\n    pointerEvents: \"box-none\",\n    style: style\n  }, scenes.slice(-3).map((scene, i, self) => {\n    var _self, _self2;\n    if (mode === 'screen' && i !== self.length - 1 || !scene) {\n      return null;\n    }\n    const {\n      header,\n      headerMode,\n      headerShown = true,\n      headerTransparent,\n      headerStyleInterpolator\n    } = scene.descriptor.options;\n    if (headerMode !== mode || !headerShown) {\n      return null;\n    }\n    const isFocused = focusedRoute.key === scene.descriptor.route.key;\n    const previousScene = getPreviousScene({\n      route: scene.descriptor.route\n    });\n    let headerBack = parentHeaderBack;\n    if (previousScene) {\n      const {\n        options,\n        route\n      } = previousScene.descriptor;\n      headerBack = previousScene ? {\n        title: getHeaderTitle(options, route.name)\n      } : parentHeaderBack;\n    }\n    const previousDescriptor = (_self = self[i - 1]) === null || _self === void 0 ? void 0 : _self.descriptor;\n    const nextDescriptor = (_self2 = self[i + 1]) === null || _self2 === void 0 ? void 0 : _self2.descriptor;\n    const {\n      headerShown: previousHeaderShown = true,\n      headerMode: previousHeaderMode\n    } = (previousDescriptor === null || previousDescriptor === void 0 ? void 0 : previousDescriptor.options) || {};\n    const nextHeaderlessScene = self.slice(i + 1).find(scene => {\n      const {\n        headerShown: currentHeaderShown = true,\n        headerMode: currentHeaderMode\n      } = (scene === null || scene === void 0 ? void 0 : scene.descriptor.options) || {};\n      return currentHeaderShown === false || currentHeaderMode === 'screen';\n    });\n    const {\n      gestureDirection: nextHeaderlessGestureDirection\n    } = (nextHeaderlessScene === null || nextHeaderlessScene === void 0 ? void 0 : nextHeaderlessScene.descriptor.options) || {};\n    const isHeaderStatic = (previousHeaderShown === false || previousHeaderMode === 'screen') && !nextDescriptor || nextHeaderlessScene;\n    const props = {\n      layout,\n      back: headerBack,\n      progress: scene.progress,\n      options: scene.descriptor.options,\n      route: scene.descriptor.route,\n      navigation: scene.descriptor.navigation,\n      styleInterpolator: mode === 'float' ? isHeaderStatic ? nextHeaderlessGestureDirection === 'vertical' || nextHeaderlessGestureDirection === 'vertical-inverted' ? forSlideUp : nextHeaderlessGestureDirection === 'horizontal-inverted' ? forSlideRight : forSlideLeft : headerStyleInterpolator : forNoAnimation\n    };\n    return React.createElement(NavigationContext.Provider, {\n      key: scene.descriptor.route.key,\n      value: scene.descriptor.navigation\n    }, React.createElement(NavigationRouteContext.Provider, {\n      value: scene.descriptor.route\n    }, React.createElement(View, {\n      onLayout: onContentHeightChange ? e => {\n        const {\n          height\n        } = e.nativeEvent.layout;\n        onContentHeightChange({\n          route: scene.descriptor.route,\n          height\n        });\n      } : undefined,\n      pointerEvents: isFocused ? 'box-none' : 'none',\n      accessibilityElementsHidden: !isFocused,\n      importantForAccessibility: isFocused ? 'auto' : 'no-hide-descendants',\n      style: mode === 'float' && !isFocused || headerTransparent ? styles.header : null\n    }, header !== undefined ? header(props) : React.createElement(Header, props))));\n  }));\n}\nconst styles = StyleSheet.create({\n  header: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0\n  }\n});","map":{"version":3,"names":["getHeaderTitle","HeaderBackContext","NavigationContext","NavigationRouteContext","React","Animated","StyleSheet","View","forNoAnimation","forSlideLeft","forSlideRight","forSlideUp","Header","HeaderContainer","_ref","mode","scenes","layout","getPreviousScene","getFocusedRoute","onContentHeightChange","style","focusedRoute","parentHeaderBack","useContext","createElement","pointerEvents","slice","map","scene","i","self","_self","_self2","length","header","headerMode","headerShown","headerTransparent","headerStyleInterpolator","descriptor","options","isFocused","key","route","previousScene","headerBack","title","name","previousDescriptor","nextDescriptor","previousHeaderShown","previousHeaderMode","nextHeaderlessScene","find","currentHeaderShown","currentHeaderMode","gestureDirection","nextHeaderlessGestureDirection","isHeaderStatic","props","back","progress","navigation","styleInterpolator","Provider","value","onLayout","e","height","nativeEvent","undefined","accessibilityElementsHidden","importantForAccessibility","styles","create","position","top","left","right"],"sources":["/Users/farhang/Desktop/June 17 /Front/Getchup_FrontEnd/node_modules/@react-navigation/stack/src/views/Header/HeaderContainer.tsx"],"sourcesContent":["import { getHeaderTitle, HeaderBackContext } from '@react-navigation/elements';\nimport {\n  NavigationContext,\n  NavigationRouteContext,\n  ParamListBase,\n  Route,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport { Animated, StyleProp, StyleSheet, View, ViewStyle } from 'react-native';\n\nimport {\n  forNoAnimation,\n  forSlideLeft,\n  forSlideRight,\n  forSlideUp,\n} from '../../TransitionConfigs/HeaderStyleInterpolators';\nimport type {\n  Layout,\n  Scene,\n  StackHeaderMode,\n  StackHeaderProps,\n  StackNavigationProp,\n} from '../../types';\nimport Header from './Header';\n\nexport type Props = {\n  mode: StackHeaderMode;\n  layout: Layout;\n  scenes: (Scene | undefined)[];\n  getPreviousScene: (props: { route: Route<string> }) => Scene | undefined;\n  getFocusedRoute: () => Route<string>;\n  onContentHeightChange?: (props: {\n    route: Route<string>;\n    height: number;\n  }) => void;\n  style?: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n};\n\nexport default function HeaderContainer({\n  mode,\n  scenes,\n  layout,\n  getPreviousScene,\n  getFocusedRoute,\n  onContentHeightChange,\n  style,\n}: Props) {\n  const focusedRoute = getFocusedRoute();\n  const parentHeaderBack = React.useContext(HeaderBackContext);\n\n  return (\n    <Animated.View pointerEvents=\"box-none\" style={style}>\n      {scenes.slice(-3).map((scene, i, self) => {\n        if ((mode === 'screen' && i !== self.length - 1) || !scene) {\n          return null;\n        }\n\n        const {\n          header,\n          headerMode,\n          headerShown = true,\n          headerTransparent,\n          headerStyleInterpolator,\n        } = scene.descriptor.options;\n\n        if (headerMode !== mode || !headerShown) {\n          return null;\n        }\n\n        const isFocused = focusedRoute.key === scene.descriptor.route.key;\n        const previousScene = getPreviousScene({\n          route: scene.descriptor.route,\n        });\n\n        let headerBack = parentHeaderBack;\n\n        if (previousScene) {\n          const { options, route } = previousScene.descriptor;\n\n          headerBack = previousScene\n            ? { title: getHeaderTitle(options, route.name) }\n            : parentHeaderBack;\n        }\n\n        // If the screen is next to a headerless screen, we need to make the header appear static\n        // This makes the header look like it's moving with the screen\n        const previousDescriptor = self[i - 1]?.descriptor;\n        const nextDescriptor = self[i + 1]?.descriptor;\n\n        const {\n          headerShown: previousHeaderShown = true,\n          headerMode: previousHeaderMode,\n        } = previousDescriptor?.options || {};\n\n        // If any of the next screens don't have a header or header is part of the screen\n        // Then we need to move this header offscreen so that it doesn't cover it\n        const nextHeaderlessScene = self.slice(i + 1).find((scene) => {\n          const {\n            headerShown: currentHeaderShown = true,\n            headerMode: currentHeaderMode,\n          } = scene?.descriptor.options || {};\n\n          return currentHeaderShown === false || currentHeaderMode === 'screen';\n        });\n\n        const { gestureDirection: nextHeaderlessGestureDirection } =\n          nextHeaderlessScene?.descriptor.options || {};\n\n        const isHeaderStatic =\n          ((previousHeaderShown === false || previousHeaderMode === 'screen') &&\n            // We still need to animate when coming back from next scene\n            // A hacky way to check this is if the next scene exists\n            !nextDescriptor) ||\n          nextHeaderlessScene;\n\n        const props: StackHeaderProps = {\n          layout,\n          back: headerBack,\n          progress: scene.progress,\n          options: scene.descriptor.options,\n          route: scene.descriptor.route,\n          navigation: scene.descriptor\n            .navigation as StackNavigationProp<ParamListBase>,\n          styleInterpolator:\n            mode === 'float'\n              ? isHeaderStatic\n                ? nextHeaderlessGestureDirection === 'vertical' ||\n                  nextHeaderlessGestureDirection === 'vertical-inverted'\n                  ? forSlideUp\n                  : nextHeaderlessGestureDirection === 'horizontal-inverted'\n                  ? forSlideRight\n                  : forSlideLeft\n                : headerStyleInterpolator\n              : forNoAnimation,\n        };\n\n        return (\n          <NavigationContext.Provider\n            key={scene.descriptor.route.key}\n            value={scene.descriptor.navigation}\n          >\n            <NavigationRouteContext.Provider value={scene.descriptor.route}>\n              <View\n                onLayout={\n                  onContentHeightChange\n                    ? (e) => {\n                        const { height } = e.nativeEvent.layout;\n\n                        onContentHeightChange({\n                          route: scene.descriptor.route,\n                          height,\n                        });\n                      }\n                    : undefined\n                }\n                pointerEvents={isFocused ? 'box-none' : 'none'}\n                accessibilityElementsHidden={!isFocused}\n                importantForAccessibility={\n                  isFocused ? 'auto' : 'no-hide-descendants'\n                }\n                style={\n                  // Avoid positioning the focused header absolutely\n                  // Otherwise accessibility tools don't seem to be able to find it\n                  (mode === 'float' && !isFocused) || headerTransparent\n                    ? styles.header\n                    : null\n                }\n              >\n                {header !== undefined ? header(props) : <Header {...props} />}\n              </View>\n            </NavigationRouteContext.Provider>\n          </NavigationContext.Provider>\n        );\n      })}\n    </Animated.View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  header: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}