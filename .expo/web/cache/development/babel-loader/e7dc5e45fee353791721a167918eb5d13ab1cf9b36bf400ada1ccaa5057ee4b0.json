{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport $czs6v$intlStringsmodulejs from \"./intlStrings.mjs\";\nimport { useId as $czs6v$useId } from \"@react-aria/utils\";\nimport { useLocalizedStringFormatter as $czs6v$useLocalizedStringFormatter } from \"@react-aria/i18n\";\nimport { useLongPress as $czs6v$useLongPress } from \"@react-aria/interactions\";\nimport { useOverlayTrigger as $czs6v$useOverlayTrigger } from \"@react-aria/overlays\";\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\nfunction $168583247155ddda$export$dc9c12ed27dd1b49(props, state, ref) {\n  let {\n    type = 'menu',\n    isDisabled: isDisabled,\n    trigger = 'press'\n  } = props;\n  let menuTriggerId = (0, $czs6v$useId)();\n  let {\n    triggerProps: triggerProps,\n    overlayProps: overlayProps\n  } = (0, $czs6v$useOverlayTrigger)({\n    type: type\n  }, state, ref);\n  let onKeyDown = e => {\n    if (isDisabled) return;\n    if (trigger === 'longPress' && !e.altKey) return;\n    if (ref && ref.current) switch (e.key) {\n      case 'Enter':\n      case ' ':\n        if (trigger === 'longPress') return;\n      case 'ArrowDown':\n        if (!('continuePropagation' in e)) e.stopPropagation();\n        e.preventDefault();\n        state.toggle('first');\n        break;\n      case 'ArrowUp':\n        if (!('continuePropagation' in e)) e.stopPropagation();\n        e.preventDefault();\n        state.toggle('last');\n        break;\n      default:\n        if ('continuePropagation' in e) e.continuePropagation();\n    }\n  };\n  let stringFormatter = (0, $czs6v$useLocalizedStringFormatter)((0, $parcel$interopDefault($czs6v$intlStringsmodulejs)), '@react-aria/menu');\n  let {\n    longPressProps: longPressProps\n  } = (0, $czs6v$useLongPress)({\n    isDisabled: isDisabled || trigger !== 'longPress',\n    accessibilityDescription: stringFormatter.format('longPressMessage'),\n    onLongPressStart() {\n      state.close();\n    },\n    onLongPress() {\n      state.open('first');\n    }\n  });\n  let pressProps = {\n    onPressStart(e) {\n      if (e.pointerType !== 'touch' && e.pointerType !== 'keyboard' && !isDisabled) state.open(e.pointerType === 'virtual' ? 'first' : null);\n    },\n    onPress(e) {\n      if (e.pointerType === 'touch' && !isDisabled) state.toggle();\n    }\n  };\n  delete triggerProps.onPress;\n  return {\n    menuTriggerProps: _objectSpread(_objectSpread(_objectSpread({}, triggerProps), trigger === 'press' ? pressProps : longPressProps), {}, {\n      id: menuTriggerId,\n      onKeyDown: onKeyDown\n    }),\n    menuProps: _objectSpread(_objectSpread({}, overlayProps), {}, {\n      'aria-labelledby': menuTriggerId,\n      autoFocus: state.focusStrategy || true,\n      onClose: state.close\n    })\n  };\n}\nexport { $168583247155ddda$export$dc9c12ed27dd1b49 as useMenuTrigger };","map":{"version":3,"names":["$168583247155ddda$export$dc9c12ed27dd1b49","props","state","ref","type","isDisabled","trigger","menuTriggerId","$czs6v$useId","triggerProps","overlayProps","$czs6v$useOverlayTrigger","onKeyDown","e","altKey","current","key","stopPropagation","preventDefault","toggle","continuePropagation","stringFormatter","$czs6v$useLocalizedStringFormatter","$parcel$interopDefault","$czs6v$intlStringsmodulejs","longPressProps","$czs6v$useLongPress","accessibilityDescription","format","onLongPressStart","close","onLongPress","open","pressProps","onPressStart","pointerType","onPress","menuTriggerProps","_objectSpread","id","menuProps","autoFocus","focusStrategy","onClose"],"sources":["/Users/farhang/Desktop/June 17 /Front/Getchup_FrontEnd/node_modules/@react-aria/menu/dist/packages/@react-aria/menu/src/useMenuTrigger.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaButtonProps} from '@react-types/button';\nimport {AriaMenuOptions} from './useMenu';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport {MenuTriggerState} from '@react-stately/menu';\nimport {MenuTriggerType} from '@react-types/menu';\nimport {RefObject} from 'react';\nimport {useId} from '@react-aria/utils';\nimport {useLocalizedStringFormatter} from '@react-aria/i18n';\nimport {useLongPress} from '@react-aria/interactions';\nimport {useOverlayTrigger} from '@react-aria/overlays';\n\nexport interface AriaMenuTriggerProps {\n  /** The type of menu that the menu trigger opens. */\n  type?: 'menu' | 'listbox',\n  /** Whether menu trigger is disabled. */\n  isDisabled?: boolean,\n  /** How menu is triggered. */\n  trigger?: MenuTriggerType\n}\n\nexport interface MenuTriggerAria<T> {\n  /** Props for the menu trigger element. */\n  menuTriggerProps: AriaButtonProps,\n\n  /** Props for the menu. */\n  menuProps: AriaMenuOptions<T>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a menu trigger.\n * @param props - Props for the menu trigger.\n * @param state - State for the menu trigger.\n * @param ref - Ref to the HTML element trigger for the menu.\n */\nexport function useMenuTrigger<T>(props: AriaMenuTriggerProps, state: MenuTriggerState, ref: RefObject<Element>): MenuTriggerAria<T> {\n  let {\n    type = 'menu' as AriaMenuTriggerProps['type'],\n    isDisabled,\n    trigger = 'press'\n  } = props;\n\n  let menuTriggerId = useId();\n  let {triggerProps, overlayProps} = useOverlayTrigger({type}, state, ref);\n\n  let onKeyDown = (e) => {\n    if (isDisabled) {\n      return;\n    }\n\n    if (trigger === 'longPress' && !e.altKey) {\n      return;\n    }\n\n    if (ref && ref.current) {\n      switch (e.key) {\n        case 'Enter':\n        case ' ':\n          if (trigger === 'longPress') {\n            return;\n          }\n          // fallthrough\n        case 'ArrowDown':\n          // Stop propagation, unless it would already be handled by useKeyboard.\n          if (!('continuePropagation' in e)) {\n            e.stopPropagation();\n          }\n          e.preventDefault();\n          state.toggle('first');\n          break;\n        case 'ArrowUp':\n          if (!('continuePropagation' in e)) {\n            e.stopPropagation();\n          }\n          e.preventDefault();\n          state.toggle('last');\n          break;\n        default:\n          // Allow other keys.\n          if ('continuePropagation' in e) {\n            e.continuePropagation();\n          }\n      }\n    }\n  };\n\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-aria/menu');\n  let {longPressProps} = useLongPress({\n    isDisabled: isDisabled || trigger !== 'longPress',\n    accessibilityDescription: stringFormatter.format('longPressMessage'),\n    onLongPressStart() {\n      state.close();\n    },\n    onLongPress() {\n      state.open('first');\n    }\n  });\n\n  let pressProps =  {\n    onPressStart(e) {\n      // For consistency with native, open the menu on mouse/key down, but touch up.\n      if (e.pointerType !== 'touch' && e.pointerType !== 'keyboard' && !isDisabled) {\n        // If opened with a screen reader, auto focus the first item.\n        // Otherwise, the menu itself will be focused.\n        state.open(e.pointerType === 'virtual' ? 'first' : null);\n      }\n    },\n    onPress(e) {\n      if (e.pointerType === 'touch' && !isDisabled) {\n        state.toggle();\n      }\n    }\n  };\n\n  // omit onPress from triggerProps since we override it above.\n  delete triggerProps.onPress;\n\n  return {\n    menuTriggerProps: {\n      ...triggerProps,\n      ...(trigger === 'press' ? pressProps : longPressProps),\n      id: menuTriggerId,\n      onKeyDown\n    },\n    menuProps: {\n      ...overlayProps,\n      'aria-labelledby': menuTriggerId,\n      autoFocus: state.focusStrategy || true,\n      onClose: state.close\n    }\n  };\n}\n"],"mappings":";;;;;;;;;;;AA+CO,SAASA,0CAAkBC,KAA2B,EAAEC,KAAuB,EAAEC,GAAuB;EAC7G,IAAI;IACFC,IAAA,GAAO;IAAAC,UAAA,EACPA,UAAU;IACVC,OAAA,GAAU;EAAA,CACX,GAAGL,KAAA;EAEJ,IAAIM,aAAA,GAAgB,IAAAC,YAAI;EACxB,IAAI;IAAAC,YAAA,EAACA,YAAY;IAAAC,YAAA,EAAEA;EAAY,CAAC,GAAG,IAAAC,wBAAgB,EAAE;UAACP;EAAI,GAAGF,KAAA,EAAOC,GAAA;EAEpE,IAAIS,SAAA,GAAaC,CAAA;IACf,IAAIR,UAAA,EACF;IAGF,IAAIC,OAAA,KAAY,eAAe,CAACO,CAAA,CAAEC,MAAM,EACtC;IAGF,IAAIX,GAAA,IAAOA,GAAA,CAAIY,OAAO,EACpB,QAAQF,CAAA,CAAEG,GAAG;MACX,KAAK;MACL,KAAK;QACH,IAAIV,OAAA,KAAY,aACd;MAGJ,KAAK;QAEH,IAAI,EAAE,yBAAyBO,CAAA,GAC7BA,CAAA,CAAEI,eAAe;QAEnBJ,CAAA,CAAEK,cAAc;QAChBhB,KAAA,CAAMiB,MAAM,CAAC;QACb;MACF,KAAK;QACH,IAAI,EAAE,yBAAyBN,CAAA,GAC7BA,CAAA,CAAEI,eAAe;QAEnBJ,CAAA,CAAEK,cAAc;QAChBhB,KAAA,CAAMiB,MAAM,CAAC;QACb;MACF;QAEE,IAAI,yBAAyBN,CAAA,EAC3BA,CAAA,CAAEO,mBAAmB;IAE3B;EAEJ;EAEA,IAAIC,eAAA,GAAkB,IAAAC,kCAA0B,GAAE,GAAAC,sBAAA,CAAAC,0BAAA,CAAW,GAAG;EAChE,IAAI;IAAAC,cAAA,EAACA;EAAc,CAAC,GAAG,IAAAC,mBAAW,EAAE;IAClCrB,UAAA,EAAYA,UAAA,IAAcC,OAAA,KAAY;IACtCqB,wBAAA,EAA0BN,eAAA,CAAgBO,MAAM,CAAC;IACjDC,iBAAA;MACE3B,KAAA,CAAM4B,KAAK;IACb;IACAC,YAAA;MACE7B,KAAA,CAAM8B,IAAI,CAAC;IACb;EACF;EAEA,IAAIC,UAAA,GAAc;IAChBC,aAAarB,CAAC;MAEZ,IAAIA,CAAA,CAAEsB,WAAW,KAAK,WAAWtB,CAAA,CAAEsB,WAAW,KAAK,cAAc,CAAC9B,UAAA,EAGhEH,KAAA,CAAM8B,IAAI,CAACnB,CAAA,CAAEsB,WAAW,KAAK,YAAY,UAAU;IAEvD;IACAC,QAAQvB,CAAC;MACP,IAAIA,CAAA,CAAEsB,WAAW,KAAK,WAAW,CAAC9B,UAAA,EAChCH,KAAA,CAAMiB,MAAM;IAEhB;EACF;EAGA,OAAOV,YAAA,CAAa2B,OAAO;EAE3B,OAAO;IACLC,gBAAA,EAAAC,aAAA,CAAAA,aAAA,CAAAA,aAAA,KACK7B,YAAY,GACXH,OAAA,KAAY,UAAU2B,UAAA,GAAaR,cAAc;MACrDc,EAAA,EAAIhC,aAAA;iBACJK;IAAA,EACF;IACA4B,SAAA,EAAAF,aAAA,CAAAA,aAAA,KACK5B,YAAY;MACf,mBAAmBH,aAAA;MACnBkC,SAAA,EAAWvC,KAAA,CAAMwC,aAAa,IAAI;MAClCC,OAAA,EAASzC,KAAA,CAAM4B;IAAK;EAExB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}