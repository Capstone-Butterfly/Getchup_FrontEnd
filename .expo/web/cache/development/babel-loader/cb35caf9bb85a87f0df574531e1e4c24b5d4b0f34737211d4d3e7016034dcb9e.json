{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nconst _excluded = [\"register\"],\n  _excluded2 = [\"onPress\", \"onPressChange\", \"onPressStart\", \"onPressEnd\", \"onPressUp\", \"isDisabled\", \"isPressed\", \"preventFocusOnPress\", \"shouldCancelOnPointerExit\", \"allowTextSelectionOnPress\", \"ref\"];\nimport { disableTextSelection as $14c0b72509d70225$export$16a4697467175487, restoreTextSelection as $14c0b72509d70225$export$b0d6fa1ab32e3295 } from \"./textSelection.mjs\";\nimport { PressResponderContext as $ae1eeba8b9eafd08$export$5165eccb35aaadb5 } from \"./context.mjs\";\nimport { _ as $7mdmh$_ } from \"@swc/helpers/_/_class_private_field_get\";\nimport { _ as $7mdmh$_1 } from \"@swc/helpers/_/_class_private_field_init\";\nimport { _ as $7mdmh$_2 } from \"@swc/helpers/_/_class_private_field_set\";\nimport { mergeProps as $7mdmh$mergeProps, useSyncRef as $7mdmh$useSyncRef, useGlobalListeners as $7mdmh$useGlobalListeners, useEffectEvent as $7mdmh$useEffectEvent, getOwnerDocument as $7mdmh$getOwnerDocument, chain as $7mdmh$chain, isMac as $7mdmh$isMac, openLink as $7mdmh$openLink, isVirtualClick as $7mdmh$isVirtualClick, focusWithoutScrolling as $7mdmh$focusWithoutScrolling, isVirtualPointerEvent as $7mdmh$isVirtualPointerEvent, getOwnerWindow as $7mdmh$getOwnerWindow } from \"@react-aria/utils\";\nimport { useContext as $7mdmh$useContext, useState as $7mdmh$useState, useRef as $7mdmh$useRef, useMemo as $7mdmh$useMemo, useEffect as $7mdmh$useEffect } from \"react\";\nfunction $f6c31cce2adf654f$var$usePressResponderContext(props) {\n  let context = (0, $7mdmh$useContext)((0, $ae1eeba8b9eafd08$export$5165eccb35aaadb5));\n  if (context) {\n    let {\n        register: register\n      } = context,\n      contextProps = _objectWithoutProperties(context, _excluded);\n    props = (0, $7mdmh$mergeProps)(contextProps, props);\n    register();\n  }\n  (0, $7mdmh$useSyncRef)(context, props.ref);\n  return props;\n}\nvar $f6c31cce2adf654f$var$_shouldStopPropagation = new WeakMap();\nclass $f6c31cce2adf654f$var$PressEvent {\n  continuePropagation() {\n    (0, $7mdmh$_2)(this, $f6c31cce2adf654f$var$_shouldStopPropagation, false);\n  }\n  get shouldStopPropagation() {\n    return (0, $7mdmh$_)(this, $f6c31cce2adf654f$var$_shouldStopPropagation);\n  }\n  constructor(type, pointerType, originalEvent) {\n    (0, $7mdmh$_1)(this, $f6c31cce2adf654f$var$_shouldStopPropagation, {\n      writable: true,\n      value: void 0\n    });\n    (0, $7mdmh$_2)(this, $f6c31cce2adf654f$var$_shouldStopPropagation, true);\n    this.type = type;\n    this.pointerType = pointerType;\n    this.target = originalEvent.currentTarget;\n    this.shiftKey = originalEvent.shiftKey;\n    this.metaKey = originalEvent.metaKey;\n    this.ctrlKey = originalEvent.ctrlKey;\n    this.altKey = originalEvent.altKey;\n  }\n}\nconst $f6c31cce2adf654f$var$LINK_CLICKED = Symbol('linkClicked');\nfunction $f6c31cce2adf654f$export$45712eceda6fad21(props) {\n  let _$f6c31cce2adf654f$va = $f6c31cce2adf654f$var$usePressResponderContext(props),\n    {\n      onPress: onPress,\n      onPressChange: onPressChange,\n      onPressStart: onPressStart,\n      onPressEnd: onPressEnd,\n      onPressUp: onPressUp,\n      isDisabled: isDisabled,\n      isPressed: isPressedProp,\n      preventFocusOnPress: preventFocusOnPress,\n      shouldCancelOnPointerExit: shouldCancelOnPointerExit,\n      allowTextSelectionOnPress: allowTextSelectionOnPress,\n      ref: _\n    } = _$f6c31cce2adf654f$va,\n    domProps = _objectWithoutProperties(_$f6c31cce2adf654f$va, _excluded2);\n  let [isPressed, setPressed] = (0, $7mdmh$useState)(false);\n  let ref = (0, $7mdmh$useRef)({\n    isPressed: false,\n    ignoreEmulatedMouseEvents: false,\n    ignoreClickAfterPress: false,\n    didFirePressStart: false,\n    isTriggeringEvent: false,\n    activePointerId: null,\n    target: null,\n    isOverTarget: false,\n    pointerType: null\n  });\n  let {\n    addGlobalListener: addGlobalListener,\n    removeAllGlobalListeners: removeAllGlobalListeners\n  } = (0, $7mdmh$useGlobalListeners)();\n  let triggerPressStart = (0, $7mdmh$useEffectEvent)((originalEvent, pointerType) => {\n    let state = ref.current;\n    if (isDisabled || state.didFirePressStart) return false;\n    let shouldStopPropagation = true;\n    state.isTriggeringEvent = true;\n    if (onPressStart) {\n      let event = new $f6c31cce2adf654f$var$PressEvent('pressstart', pointerType, originalEvent);\n      onPressStart(event);\n      shouldStopPropagation = event.shouldStopPropagation;\n    }\n    if (onPressChange) onPressChange(true);\n    state.isTriggeringEvent = false;\n    state.didFirePressStart = true;\n    setPressed(true);\n    return shouldStopPropagation;\n  });\n  let triggerPressEnd = (0, $7mdmh$useEffectEvent)((originalEvent, pointerType, wasPressed = true) => {\n    let state = ref.current;\n    if (!state.didFirePressStart) return false;\n    state.ignoreClickAfterPress = true;\n    state.didFirePressStart = false;\n    state.isTriggeringEvent = true;\n    let shouldStopPropagation = true;\n    if (onPressEnd) {\n      let event = new $f6c31cce2adf654f$var$PressEvent('pressend', pointerType, originalEvent);\n      onPressEnd(event);\n      shouldStopPropagation = event.shouldStopPropagation;\n    }\n    if (onPressChange) onPressChange(false);\n    setPressed(false);\n    if (onPress && wasPressed && !isDisabled) {\n      let event = new $f6c31cce2adf654f$var$PressEvent('press', pointerType, originalEvent);\n      onPress(event);\n      shouldStopPropagation && (shouldStopPropagation = event.shouldStopPropagation);\n    }\n    state.isTriggeringEvent = false;\n    return shouldStopPropagation;\n  });\n  let triggerPressUp = (0, $7mdmh$useEffectEvent)((originalEvent, pointerType) => {\n    let state = ref.current;\n    if (isDisabled) return false;\n    if (onPressUp) {\n      state.isTriggeringEvent = true;\n      let event = new $f6c31cce2adf654f$var$PressEvent('pressup', pointerType, originalEvent);\n      onPressUp(event);\n      state.isTriggeringEvent = false;\n      return event.shouldStopPropagation;\n    }\n    return true;\n  });\n  let cancel = (0, $7mdmh$useEffectEvent)(e => {\n    let state = ref.current;\n    if (state.isPressed && state.target) {\n      if (state.isOverTarget && state.pointerType != null) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n      state.isPressed = false;\n      state.isOverTarget = false;\n      state.activePointerId = null;\n      state.pointerType = null;\n      removeAllGlobalListeners();\n      if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)(state.target);\n    }\n  });\n  let cancelOnPointerExit = (0, $7mdmh$useEffectEvent)(e => {\n    if (shouldCancelOnPointerExit) cancel(e);\n  });\n  let pressProps = (0, $7mdmh$useMemo)(() => {\n    let state = ref.current;\n    let pressProps = {\n      onKeyDown(e) {\n        if ($f6c31cce2adf654f$var$isValidKeyboardEvent(e.nativeEvent, e.currentTarget) && e.currentTarget.contains(e.target)) {\n          var _state_metaKeyEvents;\n          if ($f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(e.target, e.key)) e.preventDefault();\n          let shouldStopPropagation = true;\n          if (!state.isPressed && !e.repeat) {\n            state.target = e.currentTarget;\n            state.isPressed = true;\n            shouldStopPropagation = triggerPressStart(e, 'keyboard');\n            let originalTarget = e.currentTarget;\n            let pressUp = e => {\n              if ($f6c31cce2adf654f$var$isValidKeyboardEvent(e, originalTarget) && !e.repeat && originalTarget.contains(e.target) && state.target) triggerPressUp($f6c31cce2adf654f$var$createEvent(state.target, e), 'keyboard');\n            };\n            addGlobalListener((0, $7mdmh$getOwnerDocument)(e.currentTarget), 'keyup', (0, $7mdmh$chain)(pressUp, onKeyUp), true);\n          }\n          if (shouldStopPropagation) e.stopPropagation();\n          if (e.metaKey && (0, $7mdmh$isMac)()) (_state_metaKeyEvents = state.metaKeyEvents) === null || _state_metaKeyEvents === void 0 ? void 0 : _state_metaKeyEvents.set(e.key, e.nativeEvent);\n        } else if (e.key === 'Meta') state.metaKeyEvents = new Map();\n      },\n      onClick(e) {\n        if (e && !e.currentTarget.contains(e.target)) return;\n        if (e && e.button === 0 && !state.isTriggeringEvent && !(0, $7mdmh$openLink).isOpening) {\n          let shouldStopPropagation = true;\n          if (isDisabled) e.preventDefault();\n          if (!state.ignoreClickAfterPress && !state.ignoreEmulatedMouseEvents && !state.isPressed && (state.pointerType === 'virtual' || (0, $7mdmh$isVirtualClick)(e.nativeEvent))) {\n            if (!isDisabled && !preventFocusOnPress) (0, $7mdmh$focusWithoutScrolling)(e.currentTarget);\n            let stopPressStart = triggerPressStart(e, 'virtual');\n            let stopPressUp = triggerPressUp(e, 'virtual');\n            let stopPressEnd = triggerPressEnd(e, 'virtual');\n            shouldStopPropagation = stopPressStart && stopPressUp && stopPressEnd;\n          }\n          state.ignoreEmulatedMouseEvents = false;\n          state.ignoreClickAfterPress = false;\n          if (shouldStopPropagation) e.stopPropagation();\n        }\n      }\n    };\n    let onKeyUp = e => {\n      var _state_metaKeyEvents;\n      if (state.isPressed && state.target && $f6c31cce2adf654f$var$isValidKeyboardEvent(e, state.target)) {\n        var _state_metaKeyEvents1;\n        if ($f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(e.target, e.key)) e.preventDefault();\n        let target = e.target;\n        triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), 'keyboard', state.target.contains(target));\n        removeAllGlobalListeners();\n        if (e.key !== 'Enter' && $f6c31cce2adf654f$var$isHTMLAnchorLink(state.target) && state.target.contains(target) && !e[$f6c31cce2adf654f$var$LINK_CLICKED]) {\n          e[$f6c31cce2adf654f$var$LINK_CLICKED] = true;\n          (0, $7mdmh$openLink)(state.target, e, false);\n        }\n        state.isPressed = false;\n        (_state_metaKeyEvents1 = state.metaKeyEvents) === null || _state_metaKeyEvents1 === void 0 ? void 0 : _state_metaKeyEvents1.delete(e.key);\n      } else if (e.key === 'Meta' && ((_state_metaKeyEvents = state.metaKeyEvents) === null || _state_metaKeyEvents === void 0 ? void 0 : _state_metaKeyEvents.size)) {\n        var _state_target;\n        let events = state.metaKeyEvents;\n        state.metaKeyEvents = undefined;\n        for (let event of events.values()) (_state_target = state.target) === null || _state_target === void 0 ? void 0 : _state_target.dispatchEvent(new KeyboardEvent('keyup', event));\n      }\n    };\n    if (typeof PointerEvent !== 'undefined') {\n      pressProps.onPointerDown = e => {\n        if (e.button !== 0 || !e.currentTarget.contains(e.target)) return;\n        if ((0, $7mdmh$isVirtualPointerEvent)(e.nativeEvent)) {\n          state.pointerType = 'virtual';\n          return;\n        }\n        if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();\n        state.pointerType = e.pointerType;\n        let shouldStopPropagation = true;\n        if (!state.isPressed) {\n          state.isPressed = true;\n          state.isOverTarget = true;\n          state.activePointerId = e.pointerId;\n          state.target = e.currentTarget;\n          if (!isDisabled && !preventFocusOnPress) (0, $7mdmh$focusWithoutScrolling)(e.currentTarget);\n          if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$16a4697467175487)(state.target);\n          shouldStopPropagation = triggerPressStart(e, state.pointerType);\n          addGlobalListener((0, $7mdmh$getOwnerDocument)(e.currentTarget), 'pointermove', onPointerMove, false);\n          addGlobalListener((0, $7mdmh$getOwnerDocument)(e.currentTarget), 'pointerup', onPointerUp, false);\n          addGlobalListener((0, $7mdmh$getOwnerDocument)(e.currentTarget), 'pointercancel', onPointerCancel, false);\n        }\n        if (shouldStopPropagation) e.stopPropagation();\n      };\n      pressProps.onMouseDown = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        if (e.button === 0) {\n          if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();\n          e.stopPropagation();\n        }\n      };\n      pressProps.onPointerUp = e => {\n        if (!e.currentTarget.contains(e.target) || state.pointerType === 'virtual') return;\n        if (e.button === 0 && $f6c31cce2adf654f$var$isOverTarget(e, e.currentTarget)) triggerPressUp(e, state.pointerType || e.pointerType);\n      };\n      let onPointerMove = e => {\n        if (e.pointerId !== state.activePointerId) return;\n        if (state.target && $f6c31cce2adf654f$var$isOverTarget(e, state.target)) {\n          if (!state.isOverTarget && state.pointerType != null) {\n            state.isOverTarget = true;\n            triggerPressStart($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);\n          }\n        } else if (state.target && state.isOverTarget && state.pointerType != null) {\n          state.isOverTarget = false;\n          triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n          cancelOnPointerExit(e);\n        }\n      };\n      let onPointerUp = e => {\n        if (e.pointerId === state.activePointerId && state.isPressed && e.button === 0 && state.target) {\n          if ($f6c31cce2adf654f$var$isOverTarget(e, state.target) && state.pointerType != null) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);else if (state.isOverTarget && state.pointerType != null) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n          state.isPressed = false;\n          state.isOverTarget = false;\n          state.activePointerId = null;\n          state.pointerType = null;\n          removeAllGlobalListeners();\n          if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)(state.target);\n        }\n      };\n      let onPointerCancel = e => {\n        cancel(e);\n      };\n      pressProps.onDragStart = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        cancel(e);\n      };\n    } else {\n      pressProps.onMouseDown = e => {\n        if (e.button !== 0 || !e.currentTarget.contains(e.target)) return;\n        if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();\n        if (state.ignoreEmulatedMouseEvents) {\n          e.stopPropagation();\n          return;\n        }\n        state.isPressed = true;\n        state.isOverTarget = true;\n        state.target = e.currentTarget;\n        state.pointerType = (0, $7mdmh$isVirtualClick)(e.nativeEvent) ? 'virtual' : 'mouse';\n        if (!isDisabled && !preventFocusOnPress) (0, $7mdmh$focusWithoutScrolling)(e.currentTarget);\n        let shouldStopPropagation = triggerPressStart(e, state.pointerType);\n        if (shouldStopPropagation) e.stopPropagation();\n        addGlobalListener((0, $7mdmh$getOwnerDocument)(e.currentTarget), 'mouseup', onMouseUp, false);\n      };\n      pressProps.onMouseEnter = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        let shouldStopPropagation = true;\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents && state.pointerType != null) {\n          state.isOverTarget = true;\n          shouldStopPropagation = triggerPressStart(e, state.pointerType);\n        }\n        if (shouldStopPropagation) e.stopPropagation();\n      };\n      pressProps.onMouseLeave = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        let shouldStopPropagation = true;\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents && state.pointerType != null) {\n          state.isOverTarget = false;\n          shouldStopPropagation = triggerPressEnd(e, state.pointerType, false);\n          cancelOnPointerExit(e);\n        }\n        if (shouldStopPropagation) e.stopPropagation();\n      };\n      pressProps.onMouseUp = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        if (!state.ignoreEmulatedMouseEvents && e.button === 0) triggerPressUp(e, state.pointerType || 'mouse');\n      };\n      let onMouseUp = e => {\n        if (e.button !== 0) return;\n        state.isPressed = false;\n        removeAllGlobalListeners();\n        if (state.ignoreEmulatedMouseEvents) {\n          state.ignoreEmulatedMouseEvents = false;\n          return;\n        }\n        if (state.target && $f6c31cce2adf654f$var$isOverTarget(e, state.target) && state.pointerType != null) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);else if (state.target && state.isOverTarget && state.pointerType != null) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n        state.isOverTarget = false;\n      };\n      pressProps.onTouchStart = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        let touch = $f6c31cce2adf654f$var$getTouchFromEvent(e.nativeEvent);\n        if (!touch) return;\n        state.activePointerId = touch.identifier;\n        state.ignoreEmulatedMouseEvents = true;\n        state.isOverTarget = true;\n        state.isPressed = true;\n        state.target = e.currentTarget;\n        state.pointerType = 'touch';\n        if (!isDisabled && !preventFocusOnPress) (0, $7mdmh$focusWithoutScrolling)(e.currentTarget);\n        if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$16a4697467175487)(state.target);\n        let shouldStopPropagation = triggerPressStart(e, state.pointerType);\n        if (shouldStopPropagation) e.stopPropagation();\n        addGlobalListener((0, $7mdmh$getOwnerWindow)(e.currentTarget), 'scroll', onScroll, true);\n      };\n      pressProps.onTouchMove = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        if (!state.isPressed) {\n          e.stopPropagation();\n          return;\n        }\n        let touch = $f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state.activePointerId);\n        let shouldStopPropagation = true;\n        if (touch && $f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget)) {\n          if (!state.isOverTarget && state.pointerType != null) {\n            state.isOverTarget = true;\n            shouldStopPropagation = triggerPressStart(e, state.pointerType);\n          }\n        } else if (state.isOverTarget && state.pointerType != null) {\n          state.isOverTarget = false;\n          shouldStopPropagation = triggerPressEnd(e, state.pointerType, false);\n          cancelOnPointerExit(e);\n        }\n        if (shouldStopPropagation) e.stopPropagation();\n      };\n      pressProps.onTouchEnd = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        if (!state.isPressed) {\n          e.stopPropagation();\n          return;\n        }\n        let touch = $f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state.activePointerId);\n        let shouldStopPropagation = true;\n        if (touch && $f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget) && state.pointerType != null) {\n          triggerPressUp(e, state.pointerType);\n          shouldStopPropagation = triggerPressEnd(e, state.pointerType);\n        } else if (state.isOverTarget && state.pointerType != null) shouldStopPropagation = triggerPressEnd(e, state.pointerType, false);\n        if (shouldStopPropagation) e.stopPropagation();\n        state.isPressed = false;\n        state.activePointerId = null;\n        state.isOverTarget = false;\n        state.ignoreEmulatedMouseEvents = true;\n        if (state.target && !allowTextSelectionOnPress) (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)(state.target);\n        removeAllGlobalListeners();\n      };\n      pressProps.onTouchCancel = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        e.stopPropagation();\n        if (state.isPressed) cancel(e);\n      };\n      let onScroll = e => {\n        if (state.isPressed && e.target.contains(state.target)) cancel({\n          currentTarget: state.target,\n          shiftKey: false,\n          ctrlKey: false,\n          metaKey: false,\n          altKey: false\n        });\n      };\n      pressProps.onDragStart = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        cancel(e);\n      };\n    }\n    return pressProps;\n  }, [addGlobalListener, isDisabled, preventFocusOnPress, removeAllGlobalListeners, allowTextSelectionOnPress, cancel, cancelOnPointerExit, triggerPressEnd, triggerPressStart, triggerPressUp]);\n  (0, $7mdmh$useEffect)(() => {\n    return () => {\n      var _ref_current_target;\n      if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)((_ref_current_target = ref.current.target) !== null && _ref_current_target !== void 0 ? _ref_current_target : undefined);\n    };\n  }, [allowTextSelectionOnPress]);\n  return {\n    isPressed: isPressedProp || isPressed,\n    pressProps: (0, $7mdmh$mergeProps)(domProps, pressProps)\n  };\n}\nfunction $f6c31cce2adf654f$var$isHTMLAnchorLink(target) {\n  return target.tagName === 'A' && target.hasAttribute('href');\n}\nfunction $f6c31cce2adf654f$var$isValidKeyboardEvent(event, currentTarget) {\n  const {\n    key: key,\n    code: code\n  } = event;\n  const element = currentTarget;\n  const role = element.getAttribute('role');\n  return (key === 'Enter' || key === ' ' || key === 'Spacebar' || code === 'Space') && !(element instanceof (0, $7mdmh$getOwnerWindow)(element).HTMLInputElement && !$f6c31cce2adf654f$var$isValidInputKey(element, key) || element instanceof (0, $7mdmh$getOwnerWindow)(element).HTMLTextAreaElement || element.isContentEditable) && !((role === 'link' || !role && $f6c31cce2adf654f$var$isHTMLAnchorLink(element)) && key !== 'Enter');\n}\nfunction $f6c31cce2adf654f$var$getTouchFromEvent(event) {\n  const {\n    targetTouches: targetTouches\n  } = event;\n  if (targetTouches.length > 0) return targetTouches[0];\n  return null;\n}\nfunction $f6c31cce2adf654f$var$getTouchById(event, pointerId) {\n  const changedTouches = event.changedTouches;\n  for (let i = 0; i < changedTouches.length; i++) {\n    const touch = changedTouches[i];\n    if (touch.identifier === pointerId) return touch;\n  }\n  return null;\n}\nfunction $f6c31cce2adf654f$var$createEvent(target, e) {\n  return {\n    currentTarget: target,\n    shiftKey: e.shiftKey,\n    ctrlKey: e.ctrlKey,\n    metaKey: e.metaKey,\n    altKey: e.altKey\n  };\n}\nfunction $f6c31cce2adf654f$var$getPointClientRect(point) {\n  let offsetX = 0;\n  let offsetY = 0;\n  if (point.width !== undefined) offsetX = point.width / 2;else if (point.radiusX !== undefined) offsetX = point.radiusX;\n  if (point.height !== undefined) offsetY = point.height / 2;else if (point.radiusY !== undefined) offsetY = point.radiusY;\n  return {\n    top: point.clientY - offsetY,\n    right: point.clientX + offsetX,\n    bottom: point.clientY + offsetY,\n    left: point.clientX - offsetX\n  };\n}\nfunction $f6c31cce2adf654f$var$areRectanglesOverlapping(a, b) {\n  if (a.left > b.right || b.left > a.right) return false;\n  if (a.top > b.bottom || b.top > a.bottom) return false;\n  return true;\n}\nfunction $f6c31cce2adf654f$var$isOverTarget(point, target) {\n  let rect = target.getBoundingClientRect();\n  let pointRect = $f6c31cce2adf654f$var$getPointClientRect(point);\n  return $f6c31cce2adf654f$var$areRectanglesOverlapping(rect, pointRect);\n}\nfunction $f6c31cce2adf654f$var$shouldPreventDefault(target) {\n  return !(target instanceof HTMLElement) || !target.hasAttribute('draggable');\n}\nfunction $f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(target, key) {\n  if (target instanceof HTMLInputElement) return !$f6c31cce2adf654f$var$isValidInputKey(target, key);\n  if (target instanceof HTMLButtonElement) return target.type !== 'submit' && target.type !== 'reset';\n  if ($f6c31cce2adf654f$var$isHTMLAnchorLink(target)) return false;\n  return true;\n}\nconst $f6c31cce2adf654f$var$nonTextInputTypes = new Set(['checkbox', 'radio', 'range', 'color', 'file', 'image', 'button', 'submit', 'reset']);\nfunction $f6c31cce2adf654f$var$isValidInputKey(target, key) {\n  return target.type === 'checkbox' || target.type === 'radio' ? key === ' ' : $f6c31cce2adf654f$var$nonTextInputTypes.has(target.type);\n}\nexport { $f6c31cce2adf654f$export$45712eceda6fad21 as usePress };","map":{"version":3,"names":["$f6c31cce2adf654f$var$usePressResponderContext","props","context","$7mdmh$useContext","$ae1eeba8b9eafd08$export$5165eccb35aaadb5","register","contextProps","_objectWithoutProperties","_excluded","$7mdmh$mergeProps","$7mdmh$useSyncRef","ref","$f6c31cce2adf654f$var$_shouldStopPropagation","WeakMap","$f6c31cce2adf654f$var$PressEvent","continuePropagation","shouldStopPropagation","$7mdmh$_","constructor","type","pointerType","originalEvent","$7mdmh$_1","target","currentTarget","shiftKey","metaKey","ctrlKey","altKey","$f6c31cce2adf654f$var$LINK_CLICKED","Symbol","$f6c31cce2adf654f$export$45712eceda6fad21","_$f6c31cce2adf654f$va","onPress","onPressChange","onPressStart","onPressEnd","onPressUp","isDisabled","isPressed","isPressedProp","preventFocusOnPress","shouldCancelOnPointerExit","allowTextSelectionOnPress","_","domProps","_excluded2","setPressed","$7mdmh$useState","$7mdmh$useRef","ignoreEmulatedMouseEvents","ignoreClickAfterPress","didFirePressStart","isTriggeringEvent","activePointerId","isOverTarget","addGlobalListener","removeAllGlobalListeners","$7mdmh$useGlobalListeners","triggerPressStart","$7mdmh$useEffectEvent","state","current","event","triggerPressEnd","wasPressed","triggerPressUp","cancel","e","$f6c31cce2adf654f$var$createEvent","$14c0b72509d70225$export$b0d6fa1ab32e3295","cancelOnPointerExit","pressProps","$7mdmh$useMemo","onKeyDown","$f6c31cce2adf654f$var$isValidKeyboardEvent","nativeEvent","contains","_state_metaKeyEvents","$f6c31cce2adf654f$var$shouldPreventDefaultKeyboard","key","preventDefault","repeat","originalTarget","pressUp","$7mdmh$getOwnerDocument","$7mdmh$chain","onKeyUp","stopPropagation","$7mdmh$isMac","metaKeyEvents","set","Map","onClick","button","$7mdmh$openLink","isOpening","$7mdmh$isVirtualClick","$7mdmh$focusWithoutScrolling","stopPressStart","stopPressUp","stopPressEnd","_state_metaKeyEvents1","$f6c31cce2adf654f$var$isHTMLAnchorLink","delete","size","_state_target","events","undefined","values","dispatchEvent","KeyboardEvent","PointerEvent","onPointerDown","$7mdmh$isVirtualPointerEvent","$f6c31cce2adf654f$var$shouldPreventDefault","pointerId","$14c0b72509d70225$export$16a4697467175487","onPointerMove","onPointerUp","onPointerCancel","onMouseDown","$f6c31cce2adf654f$var$isOverTarget","onDragStart","onMouseUp","onMouseEnter","onMouseLeave","onTouchStart","touch","$f6c31cce2adf654f$var$getTouchFromEvent","identifier","$7mdmh$getOwnerWindow","onScroll","onTouchMove","$f6c31cce2adf654f$var$getTouchById","onTouchEnd","onTouchCancel","$7mdmh$useEffect","_ref_current_target","tagName","hasAttribute","code","element","role","getAttribute","HTMLInputElement","$f6c31cce2adf654f$var$isValidInputKey","HTMLTextAreaElement","isContentEditable","targetTouches","length","changedTouches","i","$f6c31cce2adf654f$var$getPointClientRect","point","offsetX","offsetY","width","radiusX","height","radiusY","top","clientY","right","clientX","bottom","left","$f6c31cce2adf654f$var$areRectanglesOverlapping","a","b","rect","getBoundingClientRect","pointRect","HTMLElement","HTMLButtonElement","$f6c31cce2adf654f$var$nonTextInputTypes","Set","has"],"sources":["/Users/farhang/Desktop/June 17 /Front/Getchup_FrontEnd/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/usePress.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {chain, focusWithoutScrolling, getOwnerDocument, getOwnerWindow, isMac, isVirtualClick, isVirtualPointerEvent, mergeProps, openLink, useEffectEvent, useGlobalListeners, useSyncRef} from '@react-aria/utils';\nimport {disableTextSelection, restoreTextSelection} from './textSelection';\nimport {DOMAttributes, FocusableElement, PressEvent as IPressEvent, PointerType, PressEvents} from '@react-types/shared';\nimport {PressResponderContext} from './context';\nimport {RefObject, useContext, useEffect, useMemo, useRef, useState} from 'react';\n\nexport interface PressProps extends PressEvents {\n  /** Whether the target is in a controlled press state (e.g. an overlay it triggers is open). */\n  isPressed?: boolean,\n  /** Whether the press events should be disabled. */\n  isDisabled?: boolean,\n  /** Whether the target should not receive focus on press. */\n  preventFocusOnPress?: boolean,\n  /**\n   * Whether press events should be canceled when the pointer leaves the target while pressed.\n   * By default, this is `false`, which means if the pointer returns back over the target while\n   * still pressed, onPressStart will be fired again. If set to `true`, the press is canceled\n   * when the pointer leaves the target and onPressStart will not be fired if the pointer returns.\n   */\n  shouldCancelOnPointerExit?: boolean,\n  /** Whether text selection should be enabled on the pressable element. */\n  allowTextSelectionOnPress?: boolean\n}\n\nexport interface PressHookProps extends PressProps {\n  /** A ref to the target element. */\n  ref?: RefObject<Element>\n}\n\ninterface PressState {\n  isPressed: boolean,\n  ignoreEmulatedMouseEvents: boolean,\n  ignoreClickAfterPress: boolean,\n  didFirePressStart: boolean,\n  isTriggeringEvent: boolean,\n  activePointerId: any,\n  target: FocusableElement | null,\n  isOverTarget: boolean,\n  pointerType: PointerType | null,\n  userSelect?: string,\n  metaKeyEvents?: Map<string, KeyboardEvent>\n}\n\ninterface EventBase {\n  currentTarget: EventTarget | null,\n  shiftKey: boolean,\n  ctrlKey: boolean,\n  metaKey: boolean,\n  altKey: boolean\n}\n\nexport interface PressResult {\n  /** Whether the target is currently pressed. */\n  isPressed: boolean,\n  /** Props to spread on the target element. */\n  pressProps: DOMAttributes\n}\n\nfunction usePressResponderContext(props: PressHookProps): PressHookProps {\n  // Consume context from <PressResponder> and merge with props.\n  let context = useContext(PressResponderContext);\n  if (context) {\n    let {register, ...contextProps} = context;\n    props = mergeProps(contextProps, props) as PressHookProps;\n    register();\n  }\n  useSyncRef(context, props.ref);\n\n  return props;\n}\n\nclass PressEvent implements IPressEvent {\n  type: IPressEvent['type'];\n  pointerType: PointerType;\n  target: Element;\n  shiftKey: boolean;\n  ctrlKey: boolean;\n  metaKey: boolean;\n  altKey: boolean;\n  #shouldStopPropagation = true;\n\n  constructor(type: IPressEvent['type'], pointerType: PointerType, originalEvent: EventBase) {\n    this.type = type;\n    this.pointerType = pointerType;\n    this.target = originalEvent.currentTarget as Element;\n    this.shiftKey = originalEvent.shiftKey;\n    this.metaKey = originalEvent.metaKey;\n    this.ctrlKey = originalEvent.ctrlKey;\n    this.altKey = originalEvent.altKey;\n  }\n\n  continuePropagation() {\n    this.#shouldStopPropagation = false;\n  }\n\n  get shouldStopPropagation() {\n    return this.#shouldStopPropagation;\n  }\n}\n\nconst LINK_CLICKED = Symbol('linkClicked');\n\n/**\n * Handles press interactions across mouse, touch, keyboard, and screen readers.\n * It normalizes behavior across browsers and platforms, and handles many nuances\n * of dealing with pointer and keyboard events.\n */\nexport function usePress(props: PressHookProps): PressResult {\n  let {\n    onPress,\n    onPressChange,\n    onPressStart,\n    onPressEnd,\n    onPressUp,\n    isDisabled,\n    isPressed: isPressedProp,\n    preventFocusOnPress,\n    shouldCancelOnPointerExit,\n    allowTextSelectionOnPress,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ref: _, // Removing `ref` from `domProps` because TypeScript is dumb\n    ...domProps\n  } = usePressResponderContext(props);\n\n  let [isPressed, setPressed] = useState(false);\n  let ref = useRef<PressState>({\n    isPressed: false,\n    ignoreEmulatedMouseEvents: false,\n    ignoreClickAfterPress: false,\n    didFirePressStart: false,\n    isTriggeringEvent: false,\n    activePointerId: null,\n    target: null,\n    isOverTarget: false,\n    pointerType: null\n  });\n\n  let {addGlobalListener, removeAllGlobalListeners} = useGlobalListeners();\n\n  let triggerPressStart = useEffectEvent((originalEvent: EventBase, pointerType: PointerType) => {\n    let state = ref.current;\n    if (isDisabled || state.didFirePressStart) {\n      return false;\n    }\n\n    let shouldStopPropagation = true;\n    state.isTriggeringEvent = true;\n    if (onPressStart) {\n      let event = new PressEvent('pressstart', pointerType, originalEvent);\n      onPressStart(event);\n      shouldStopPropagation = event.shouldStopPropagation;\n    }\n\n    if (onPressChange) {\n      onPressChange(true);\n    }\n\n    state.isTriggeringEvent = false;\n    state.didFirePressStart = true;\n    setPressed(true);\n    return shouldStopPropagation;\n  });\n\n  let triggerPressEnd = useEffectEvent((originalEvent: EventBase, pointerType: PointerType, wasPressed = true) => {\n    let state = ref.current;\n    if (!state.didFirePressStart) {\n      return false;\n    }\n\n    state.ignoreClickAfterPress = true;\n    state.didFirePressStart = false;\n    state.isTriggeringEvent = true;\n\n    let shouldStopPropagation = true;\n    if (onPressEnd) {\n      let event = new PressEvent('pressend', pointerType, originalEvent);\n      onPressEnd(event);\n      shouldStopPropagation = event.shouldStopPropagation;\n    }\n\n    if (onPressChange) {\n      onPressChange(false);\n    }\n\n    setPressed(false);\n\n    if (onPress && wasPressed && !isDisabled) {\n      let event = new PressEvent('press', pointerType, originalEvent);\n      onPress(event);\n      shouldStopPropagation &&= event.shouldStopPropagation;\n    }\n\n    state.isTriggeringEvent = false;\n    return shouldStopPropagation;\n  });\n\n  let triggerPressUp = useEffectEvent((originalEvent: EventBase, pointerType: PointerType) => {\n    let state = ref.current;\n    if (isDisabled) {\n      return false;\n    }\n\n    if (onPressUp) {\n      state.isTriggeringEvent = true;\n      let event = new PressEvent('pressup', pointerType, originalEvent);\n      onPressUp(event);\n      state.isTriggeringEvent = false;\n      return event.shouldStopPropagation;\n    }\n\n    return true;\n  });\n\n  let cancel = useEffectEvent((e: EventBase) => {\n    let state = ref.current;\n    if (state.isPressed && state.target) {\n      if (state.isOverTarget && state.pointerType != null) {\n        triggerPressEnd(createEvent(state.target, e), state.pointerType, false);\n      }\n      state.isPressed = false;\n      state.isOverTarget = false;\n      state.activePointerId = null;\n      state.pointerType = null;\n      removeAllGlobalListeners();\n      if (!allowTextSelectionOnPress) {\n        restoreTextSelection(state.target);\n      }\n    }\n  });\n\n  let cancelOnPointerExit = useEffectEvent((e: EventBase) => {\n    if (shouldCancelOnPointerExit) {\n      cancel(e);\n    }\n  });\n\n  let pressProps = useMemo(() => {\n    let state = ref.current;\n    let pressProps: DOMAttributes = {\n      onKeyDown(e) {\n        if (isValidKeyboardEvent(e.nativeEvent, e.currentTarget) && e.currentTarget.contains(e.target as Element)) {\n          if (shouldPreventDefaultKeyboard(e.target as Element, e.key)) {\n            e.preventDefault();\n          }\n\n          // If the event is repeating, it may have started on a different element\n          // after which focus moved to the current element. Ignore these events and\n          // only handle the first key down event.\n          let shouldStopPropagation = true;\n          if (!state.isPressed && !e.repeat) {\n            state.target = e.currentTarget;\n            state.isPressed = true;\n            shouldStopPropagation = triggerPressStart(e, 'keyboard');\n\n            // Focus may move before the key up event, so register the event on the document\n            // instead of the same element where the key down event occurred. Make it capturing so that it will trigger\n            // before stopPropagation from useKeyboard on a child element may happen and thus we can still call triggerPress for the parent element.\n            let originalTarget = e.currentTarget;\n            let pressUp = (e) => {\n              if (isValidKeyboardEvent(e, originalTarget) && !e.repeat && originalTarget.contains(e.target as Element) && state.target) {\n                triggerPressUp(createEvent(state.target, e), 'keyboard');\n              }\n            };\n\n            addGlobalListener(getOwnerDocument(e.currentTarget), 'keyup', chain(pressUp, onKeyUp), true);\n          }\n\n          if (shouldStopPropagation) {\n            e.stopPropagation();\n          }\n\n          // Keep track of the keydown events that occur while the Meta (e.g. Command) key is held.\n          // macOS has a bug where keyup events are not fired while the Meta key is down.\n          // When the Meta key itself is released we will get an event for that, and we'll act as if\n          // all of these other keys were released as well.\n          // https://bugs.chromium.org/p/chromium/issues/detail?id=1393524\n          // https://bugs.webkit.org/show_bug.cgi?id=55291\n          // https://bugzilla.mozilla.org/show_bug.cgi?id=1299553\n          if (e.metaKey && isMac()) {\n            state.metaKeyEvents?.set(e.key, e.nativeEvent);\n          }\n        } else if (e.key === 'Meta') {\n          state.metaKeyEvents = new Map();\n        }\n      },\n      onClick(e) {\n        if (e && !e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        if (e && e.button === 0 && !state.isTriggeringEvent && !(openLink as any).isOpening) {\n          let shouldStopPropagation = true;\n          if (isDisabled) {\n            e.preventDefault();\n          }\n\n          // If triggered from a screen reader or by using element.click(),\n          // trigger as if it were a keyboard click.\n          if (!state.ignoreClickAfterPress && !state.ignoreEmulatedMouseEvents && !state.isPressed && (state.pointerType === 'virtual' || isVirtualClick(e.nativeEvent))) {\n            // Ensure the element receives focus (VoiceOver on iOS does not do this)\n            if (!isDisabled && !preventFocusOnPress) {\n              focusWithoutScrolling(e.currentTarget);\n            }\n\n            let stopPressStart = triggerPressStart(e, 'virtual');\n            let stopPressUp = triggerPressUp(e, 'virtual');\n            let stopPressEnd = triggerPressEnd(e, 'virtual');\n            shouldStopPropagation = stopPressStart && stopPressUp && stopPressEnd;\n          }\n\n          state.ignoreEmulatedMouseEvents = false;\n          state.ignoreClickAfterPress = false;\n          if (shouldStopPropagation) {\n            e.stopPropagation();\n          }\n        }\n      }\n    };\n\n    let onKeyUp = (e: KeyboardEvent) => {\n      if (state.isPressed && state.target && isValidKeyboardEvent(e, state.target)) {\n        if (shouldPreventDefaultKeyboard(e.target as Element, e.key)) {\n          e.preventDefault();\n        }\n\n        let target = e.target as Element;\n        triggerPressEnd(createEvent(state.target, e), 'keyboard', state.target.contains(target));\n        removeAllGlobalListeners();\n\n        // If a link was triggered with a key other than Enter, open the URL ourselves.\n        // This means the link has a role override, and the default browser behavior\n        // only applies when using the Enter key.\n        if (e.key !== 'Enter' && isHTMLAnchorLink(state.target) && state.target.contains(target) && !e[LINK_CLICKED]) {\n          // Store a hidden property on the event so we only trigger link click once,\n          // even if there are multiple usePress instances attached to the element.\n          e[LINK_CLICKED] = true;\n          openLink(state.target, e, false);\n        }\n\n        state.isPressed = false;\n        state.metaKeyEvents?.delete(e.key);\n      } else if (e.key === 'Meta' && state.metaKeyEvents?.size) {\n        // If we recorded keydown events that occurred while the Meta key was pressed,\n        // and those haven't received keyup events already, fire keyup events ourselves.\n        // See comment above for more info about the macOS bug causing this.\n        let events = state.metaKeyEvents;\n        state.metaKeyEvents = undefined;\n        for (let event of events.values()) {\n          state.target?.dispatchEvent(new KeyboardEvent('keyup', event));\n        }\n      }\n    };\n\n    if (typeof PointerEvent !== 'undefined') {\n      pressProps.onPointerDown = (e) => {\n        // Only handle left clicks, and ignore events that bubbled through portals.\n        if (e.button !== 0 || !e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        // iOS safari fires pointer events from VoiceOver with incorrect coordinates/target.\n        // Ignore and let the onClick handler take care of it instead.\n        // https://bugs.webkit.org/show_bug.cgi?id=222627\n        // https://bugs.webkit.org/show_bug.cgi?id=223202\n        if (isVirtualPointerEvent(e.nativeEvent)) {\n          state.pointerType = 'virtual';\n          return;\n        }\n\n        // Due to browser inconsistencies, especially on mobile browsers, we prevent\n        // default on pointer down and handle focusing the pressable element ourselves.\n        if (shouldPreventDefault(e.currentTarget as Element)) {\n          e.preventDefault();\n        }\n\n        state.pointerType = e.pointerType;\n\n        let shouldStopPropagation = true;\n        if (!state.isPressed) {\n          state.isPressed = true;\n          state.isOverTarget = true;\n          state.activePointerId = e.pointerId;\n          state.target = e.currentTarget;\n\n          if (!isDisabled && !preventFocusOnPress) {\n            focusWithoutScrolling(e.currentTarget);\n          }\n\n          if (!allowTextSelectionOnPress) {\n            disableTextSelection(state.target);\n          }\n\n          shouldStopPropagation = triggerPressStart(e, state.pointerType);\n\n          addGlobalListener(getOwnerDocument(e.currentTarget), 'pointermove', onPointerMove, false);\n          addGlobalListener(getOwnerDocument(e.currentTarget), 'pointerup', onPointerUp, false);\n          addGlobalListener(getOwnerDocument(e.currentTarget), 'pointercancel', onPointerCancel, false);\n        }\n\n        if (shouldStopPropagation) {\n          e.stopPropagation();\n        }\n      };\n\n      pressProps.onMouseDown = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        if (e.button === 0) {\n          // Chrome and Firefox on touch Windows devices require mouse down events\n          // to be canceled in addition to pointer events, or an extra asynchronous\n          // focus event will be fired.\n          if (shouldPreventDefault(e.currentTarget as Element)) {\n            e.preventDefault();\n          }\n\n          e.stopPropagation();\n        }\n      };\n\n      pressProps.onPointerUp = (e) => {\n        // iOS fires pointerup with zero width and height, so check the pointerType recorded during pointerdown.\n        if (!e.currentTarget.contains(e.target as Element) || state.pointerType === 'virtual') {\n          return;\n        }\n\n        // Only handle left clicks\n        // Safari on iOS sometimes fires pointerup events, even\n        // when the touch isn't over the target, so double check.\n        if (e.button === 0 && isOverTarget(e, e.currentTarget)) {\n          triggerPressUp(e, state.pointerType || e.pointerType);\n        }\n      };\n\n      // Safari on iOS < 13.2 does not implement pointerenter/pointerleave events correctly.\n      // Use pointer move events instead to implement our own hit testing.\n      // See https://bugs.webkit.org/show_bug.cgi?id=199803\n      let onPointerMove = (e: PointerEvent) => {\n        if (e.pointerId !== state.activePointerId) {\n          return;\n        }\n\n        if (state.target && isOverTarget(e, state.target)) {\n          if (!state.isOverTarget && state.pointerType != null) {\n            state.isOverTarget = true;\n            triggerPressStart(createEvent(state.target, e), state.pointerType);\n          }\n        } else if (state.target && state.isOverTarget && state.pointerType != null) {\n          state.isOverTarget = false;\n          triggerPressEnd(createEvent(state.target, e), state.pointerType, false);\n          cancelOnPointerExit(e);\n        }\n      };\n\n      let onPointerUp = (e: PointerEvent) => {\n        if (e.pointerId === state.activePointerId && state.isPressed && e.button === 0 && state.target) {\n          if (isOverTarget(e, state.target) && state.pointerType != null) {\n            triggerPressEnd(createEvent(state.target, e), state.pointerType);\n          } else if (state.isOverTarget && state.pointerType != null) {\n            triggerPressEnd(createEvent(state.target, e), state.pointerType, false);\n          }\n\n          state.isPressed = false;\n          state.isOverTarget = false;\n          state.activePointerId = null;\n          state.pointerType = null;\n          removeAllGlobalListeners();\n          if (!allowTextSelectionOnPress) {\n            restoreTextSelection(state.target);\n          }\n        }\n      };\n\n      let onPointerCancel = (e: PointerEvent) => {\n        cancel(e);\n      };\n\n      pressProps.onDragStart = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        // Safari does not call onPointerCancel when a drag starts, whereas Chrome and Firefox do.\n        cancel(e);\n      };\n    } else {\n      pressProps.onMouseDown = (e) => {\n        // Only handle left clicks\n        if (e.button !== 0 || !e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        // Due to browser inconsistencies, especially on mobile browsers, we prevent\n        // default on mouse down and handle focusing the pressable element ourselves.\n        if (shouldPreventDefault(e.currentTarget)) {\n          e.preventDefault();\n        }\n\n        if (state.ignoreEmulatedMouseEvents) {\n          e.stopPropagation();\n          return;\n        }\n\n        state.isPressed = true;\n        state.isOverTarget = true;\n        state.target = e.currentTarget;\n        state.pointerType = isVirtualClick(e.nativeEvent) ? 'virtual' : 'mouse';\n\n        if (!isDisabled && !preventFocusOnPress) {\n          focusWithoutScrolling(e.currentTarget);\n        }\n\n        let shouldStopPropagation = triggerPressStart(e, state.pointerType);\n        if (shouldStopPropagation) {\n          e.stopPropagation();\n        }\n\n        addGlobalListener(getOwnerDocument(e.currentTarget), 'mouseup', onMouseUp, false);\n      };\n\n      pressProps.onMouseEnter = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        let shouldStopPropagation = true;\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents && state.pointerType != null) {\n          state.isOverTarget = true;\n          shouldStopPropagation = triggerPressStart(e, state.pointerType);\n        }\n\n        if (shouldStopPropagation) {\n          e.stopPropagation();\n        }\n      };\n\n      pressProps.onMouseLeave = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        let shouldStopPropagation = true;\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents && state.pointerType != null) {\n          state.isOverTarget = false;\n          shouldStopPropagation = triggerPressEnd(e, state.pointerType, false);\n          cancelOnPointerExit(e);\n        }\n\n        if (shouldStopPropagation) {\n          e.stopPropagation();\n        }\n      };\n\n      pressProps.onMouseUp = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        if (!state.ignoreEmulatedMouseEvents && e.button === 0) {\n          triggerPressUp(e, state.pointerType || 'mouse');\n        }\n      };\n\n      let onMouseUp = (e: MouseEvent) => {\n        // Only handle left clicks\n        if (e.button !== 0) {\n          return;\n        }\n\n        state.isPressed = false;\n        removeAllGlobalListeners();\n\n        if (state.ignoreEmulatedMouseEvents) {\n          state.ignoreEmulatedMouseEvents = false;\n          return;\n        }\n\n        if (state.target && isOverTarget(e, state.target) && state.pointerType != null) {\n          triggerPressEnd(createEvent(state.target, e), state.pointerType);\n        } else if (state.target && state.isOverTarget && state.pointerType != null) {\n          triggerPressEnd(createEvent(state.target, e), state.pointerType, false);\n        }\n\n        state.isOverTarget = false;\n      };\n\n      pressProps.onTouchStart = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        let touch = getTouchFromEvent(e.nativeEvent);\n        if (!touch) {\n          return;\n        }\n        state.activePointerId = touch.identifier;\n        state.ignoreEmulatedMouseEvents = true;\n        state.isOverTarget = true;\n        state.isPressed = true;\n        state.target = e.currentTarget;\n        state.pointerType = 'touch';\n\n        // Due to browser inconsistencies, especially on mobile browsers, we prevent default\n        // on the emulated mouse event and handle focusing the pressable element ourselves.\n        if (!isDisabled && !preventFocusOnPress) {\n          focusWithoutScrolling(e.currentTarget);\n        }\n\n        if (!allowTextSelectionOnPress) {\n          disableTextSelection(state.target);\n        }\n\n        let shouldStopPropagation = triggerPressStart(e, state.pointerType);\n        if (shouldStopPropagation) {\n          e.stopPropagation();\n        }\n\n        addGlobalListener(getOwnerWindow(e.currentTarget), 'scroll', onScroll, true);\n      };\n\n      pressProps.onTouchMove = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        if (!state.isPressed) {\n          e.stopPropagation();\n          return;\n        }\n\n        let touch = getTouchById(e.nativeEvent, state.activePointerId);\n        let shouldStopPropagation = true;\n        if (touch && isOverTarget(touch, e.currentTarget)) {\n          if (!state.isOverTarget && state.pointerType != null) {\n            state.isOverTarget = true;\n            shouldStopPropagation = triggerPressStart(e, state.pointerType);\n          }\n        } else if (state.isOverTarget && state.pointerType != null) {\n          state.isOverTarget = false;\n          shouldStopPropagation = triggerPressEnd(e, state.pointerType, false);\n          cancelOnPointerExit(e);\n        }\n\n        if (shouldStopPropagation) {\n          e.stopPropagation();\n        }\n      };\n\n      pressProps.onTouchEnd = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        if (!state.isPressed) {\n          e.stopPropagation();\n          return;\n        }\n\n        let touch = getTouchById(e.nativeEvent, state.activePointerId);\n        let shouldStopPropagation = true;\n        if (touch && isOverTarget(touch, e.currentTarget) && state.pointerType != null) {\n          triggerPressUp(e, state.pointerType);\n          shouldStopPropagation = triggerPressEnd(e, state.pointerType);\n        } else if (state.isOverTarget && state.pointerType != null) {\n          shouldStopPropagation = triggerPressEnd(e, state.pointerType, false);\n        }\n\n        if (shouldStopPropagation) {\n          e.stopPropagation();\n        }\n\n        state.isPressed = false;\n        state.activePointerId = null;\n        state.isOverTarget = false;\n        state.ignoreEmulatedMouseEvents = true;\n        if (state.target && !allowTextSelectionOnPress) {\n          restoreTextSelection(state.target);\n        }\n        removeAllGlobalListeners();\n      };\n\n      pressProps.onTouchCancel = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        e.stopPropagation();\n        if (state.isPressed) {\n          cancel(e);\n        }\n      };\n\n      let onScroll = (e: Event) => {\n        if (state.isPressed && (e.target as Element).contains(state.target)) {\n          cancel({\n            currentTarget: state.target,\n            shiftKey: false,\n            ctrlKey: false,\n            metaKey: false,\n            altKey: false\n          });\n        }\n      };\n\n      pressProps.onDragStart = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        cancel(e);\n      };\n    }\n\n    return pressProps;\n  }, [\n    addGlobalListener,\n    isDisabled,\n    preventFocusOnPress,\n    removeAllGlobalListeners,\n    allowTextSelectionOnPress,\n    cancel,\n    cancelOnPointerExit,\n    triggerPressEnd,\n    triggerPressStart,\n    triggerPressUp\n  ]);\n\n  // Remove user-select: none in case component unmounts immediately after pressStart\n  // eslint-disable-next-line arrow-body-style\n  useEffect(() => {\n    return () => {\n      if (!allowTextSelectionOnPress) {\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        restoreTextSelection(ref.current.target ?? undefined);\n      }\n    };\n  }, [allowTextSelectionOnPress]);\n\n  return {\n    isPressed: isPressedProp || isPressed,\n    pressProps: mergeProps(domProps, pressProps)\n  };\n}\n\nfunction isHTMLAnchorLink(target: Element): target is HTMLAnchorElement {\n  return target.tagName === 'A' && target.hasAttribute('href');\n}\n\nfunction isValidKeyboardEvent(event: KeyboardEvent, currentTarget: Element): boolean {\n  const {key, code} = event;\n  const element = currentTarget as HTMLElement;\n  const role = element.getAttribute('role');\n  // Accessibility for keyboards. Space and Enter only.\n  // \"Spacebar\" is for IE 11\n  return (\n    (key === 'Enter' || key === ' ' || key === 'Spacebar' || code === 'Space') &&\n    !((element instanceof getOwnerWindow(element).HTMLInputElement && !isValidInputKey(element, key)) ||\n      element instanceof getOwnerWindow(element).HTMLTextAreaElement ||\n      element.isContentEditable) &&\n    // Links should only trigger with Enter key\n    !((role === 'link' || (!role && isHTMLAnchorLink(element))) && key !== 'Enter')\n  );\n}\n\nfunction getTouchFromEvent(event: TouchEvent): Touch | null {\n  const {targetTouches} = event;\n  if (targetTouches.length > 0) {\n    return targetTouches[0];\n  }\n  return null;\n}\n\nfunction getTouchById(\n  event: TouchEvent,\n  pointerId: null | number\n): null | Touch {\n  const changedTouches = event.changedTouches;\n  for (let i = 0; i < changedTouches.length; i++) {\n    const touch = changedTouches[i];\n    if (touch.identifier === pointerId) {\n      return touch;\n    }\n  }\n  return null;\n}\n\nfunction createEvent(target: FocusableElement, e: EventBase): EventBase {\n  return {\n    currentTarget: target,\n    shiftKey: e.shiftKey,\n    ctrlKey: e.ctrlKey,\n    metaKey: e.metaKey,\n    altKey: e.altKey\n  };\n}\n\ninterface Rect {\n  top: number,\n  right: number,\n  bottom: number,\n  left: number\n}\n\ninterface EventPoint {\n  clientX: number,\n  clientY: number,\n  width?: number,\n  height?: number,\n  radiusX?: number,\n  radiusY?: number\n}\n\nfunction getPointClientRect(point: EventPoint): Rect {\n  let offsetX = 0;\n  let offsetY = 0;\n  if (point.width !== undefined) {\n    offsetX = (point.width / 2);\n  } else if (point.radiusX !== undefined) {\n    offsetX = point.radiusX;\n  }\n  if (point.height !== undefined) {\n    offsetY = (point.height / 2);\n  } else if (point.radiusY !== undefined) {\n    offsetY = point.radiusY;\n  }\n\n  return {\n    top: point.clientY - offsetY,\n    right: point.clientX + offsetX,\n    bottom: point.clientY + offsetY,\n    left: point.clientX - offsetX\n  };\n}\n\nfunction areRectanglesOverlapping(a: Rect, b: Rect) {\n  // check if they cannot overlap on x axis\n  if (a.left > b.right || b.left > a.right) {\n    return false;\n  }\n  // check if they cannot overlap on y axis\n  if (a.top > b.bottom || b.top > a.bottom) {\n    return false;\n  }\n  return true;\n}\n\nfunction isOverTarget(point: EventPoint, target: Element) {\n  let rect = target.getBoundingClientRect();\n  let pointRect = getPointClientRect(point);\n  return areRectanglesOverlapping(rect, pointRect);\n}\n\nfunction shouldPreventDefault(target: Element) {\n  // We cannot prevent default if the target is a draggable element.\n  return !(target instanceof HTMLElement) || !target.hasAttribute('draggable');\n}\n\nfunction shouldPreventDefaultKeyboard(target: Element, key: string) {\n  if (target instanceof HTMLInputElement) {\n    return !isValidInputKey(target, key);\n  }\n\n  if (target instanceof HTMLButtonElement) {\n    return target.type !== 'submit' && target.type !== 'reset';\n  }\n\n  if (isHTMLAnchorLink(target)) {\n    return false;\n  }\n\n  return true;\n}\n\nconst nonTextInputTypes = new Set([\n  'checkbox',\n  'radio',\n  'range',\n  'color',\n  'file',\n  'image',\n  'button',\n  'submit',\n  'reset'\n]);\n\nfunction isValidInputKey(target: HTMLInputElement, key: string) {\n  // Only space should toggle checkboxes and radios, not enter.\n  return target.type === 'checkbox' || target.type === 'radio'\n    ? key === ' '\n    : nonTextInputTypes.has(target.type);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}