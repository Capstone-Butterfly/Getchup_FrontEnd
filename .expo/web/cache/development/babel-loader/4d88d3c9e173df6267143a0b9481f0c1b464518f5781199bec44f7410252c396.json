{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { Background, getDefaultHeaderHeight, SafeAreaProviderCompat } from '@react-navigation/elements';\nimport Color from 'color';\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { forModalPresentationIOS, forNoAnimation as forNoAnimationCard } from '../../TransitionConfigs/CardStyleInterpolators';\nimport { DefaultTransition, ModalFadeTransition, ModalTransition } from '../../TransitionConfigs/TransitionPresets';\nimport findLastIndex from '../../utils/findLastIndex';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport { MaybeScreen, MaybeScreenContainer } from '../Screens';\nimport { getIsModalPresentation } from './Card';\nimport CardContainer from './CardContainer';\nconst EPSILON = 1e-5;\nconst STATE_INACTIVE = 0;\nconst STATE_TRANSITIONING_OR_BELOW_TOP = 1;\nconst STATE_ON_TOP = 2;\nconst FALLBACK_DESCRIPTOR = Object.freeze({\n  options: {}\n});\nconst getInterpolationIndex = (scenes, index) => {\n  const {\n    cardStyleInterpolator\n  } = scenes[index].descriptor.options;\n  let interpolationIndex = 0;\n  for (let i = index - 1; i >= 0; i--) {\n    var _scenes$i;\n    const cardStyleInterpolatorCurrent = (_scenes$i = scenes[i]) === null || _scenes$i === void 0 ? void 0 : _scenes$i.descriptor.options.cardStyleInterpolator;\n    if (cardStyleInterpolatorCurrent !== cardStyleInterpolator) {\n      break;\n    }\n    interpolationIndex++;\n  }\n  return interpolationIndex;\n};\nconst getIsModal = (scene, interpolationIndex, isParentModal) => {\n  if (isParentModal) {\n    return true;\n  }\n  const {\n    cardStyleInterpolator\n  } = scene.descriptor.options;\n  const isModalPresentation = getIsModalPresentation(cardStyleInterpolator);\n  const isModal = isModalPresentation && interpolationIndex !== 0;\n  return isModal;\n};\nconst getHeaderHeights = (scenes, insets, isParentHeaderShown, isParentModal, layout, previous) => {\n  return scenes.reduce((acc, curr, index) => {\n    const {\n      headerStatusBarHeight = isParentHeaderShown ? 0 : insets.top,\n      headerStyle\n    } = curr.descriptor.options;\n    const style = StyleSheet.flatten(headerStyle || {});\n    const height = 'height' in style && typeof style.height === 'number' ? style.height : previous[curr.route.key];\n    const interpolationIndex = getInterpolationIndex(scenes, index);\n    const isModal = getIsModal(curr, interpolationIndex, isParentModal);\n    acc[curr.route.key] = typeof height === 'number' ? height : getDefaultHeaderHeight(layout, isModal, headerStatusBarHeight);\n    return acc;\n  }, {});\n};\nconst getDistanceFromOptions = (layout, descriptor) => {\n  const {\n    presentation,\n    gestureDirection = presentation === 'modal' ? ModalTransition.gestureDirection : DefaultTransition.gestureDirection\n  } = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {};\n  return getDistanceForDirection(layout, gestureDirection);\n};\nconst getProgressFromGesture = (gesture, layout, descriptor) => {\n  const distance = getDistanceFromOptions({\n    width: Math.max(1, layout.width),\n    height: Math.max(1, layout.height)\n  }, descriptor);\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0]\n    });\n  }\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1]\n  });\n};\nexport default class CardStack extends React.Component {\n  static getDerivedStateFromProps(props, state) {\n    if (props.routes === state.routes && props.descriptors === state.descriptors) {\n      return null;\n    }\n    const gestures = props.routes.reduce((acc, curr) => {\n      const descriptor = props.descriptors[curr.key];\n      const {\n        animationEnabled\n      } = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {};\n      acc[curr.key] = state.gestures[curr.key] || new Animated.Value(props.openingRouteKeys.includes(curr.key) && animationEnabled !== false ? getDistanceFromOptions(state.layout, descriptor) : 0);\n      return acc;\n    }, {});\n    const scenes = props.routes.map((route, index, self) => {\n      const previousRoute = self[index - 1];\n      const nextRoute = self[index + 1];\n      const oldScene = state.scenes[index];\n      const currentGesture = gestures[route.key];\n      const previousGesture = previousRoute ? gestures[previousRoute.key] : undefined;\n      const nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n      const descriptor = props.descriptors[route.key] || state.descriptors[route.key] || (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n      const nextDescriptor = props.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key] || state.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key];\n      const previousDescriptor = props.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key] || state.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key];\n      const optionsForTransitionConfig = index !== self.length - 1 && nextDescriptor && nextDescriptor.options.presentation !== 'transparentModal' ? nextDescriptor.options : descriptor.options;\n      let defaultTransitionPreset = optionsForTransitionConfig.presentation === 'modal' ? ModalTransition : optionsForTransitionConfig.presentation === 'transparentModal' ? ModalFadeTransition : DefaultTransition;\n      const {\n        animationEnabled = Platform.OS !== 'web' && Platform.OS !== 'windows' && Platform.OS !== 'macos',\n        gestureEnabled = Platform.OS === 'ios' && animationEnabled,\n        gestureDirection = defaultTransitionPreset.gestureDirection,\n        transitionSpec = defaultTransitionPreset.transitionSpec,\n        cardStyleInterpolator = animationEnabled === false ? forNoAnimationCard : defaultTransitionPreset.cardStyleInterpolator,\n        headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n        cardOverlayEnabled = Platform.OS !== 'ios' && optionsForTransitionConfig.presentation !== 'transparentModal' || getIsModalPresentation(cardStyleInterpolator)\n      } = optionsForTransitionConfig;\n      const headerMode = descriptor.options.headerMode ?? (!(optionsForTransitionConfig.presentation === 'modal' || optionsForTransitionConfig.presentation === 'transparentModal' || (nextDescriptor === null || nextDescriptor === void 0 ? void 0 : nextDescriptor.options.presentation) === 'modal' || (nextDescriptor === null || nextDescriptor === void 0 ? void 0 : nextDescriptor.options.presentation) === 'transparentModal' || getIsModalPresentation(cardStyleInterpolator)) && Platform.OS === 'ios' && descriptor.options.header === undefined ? 'float' : 'screen');\n      const scene = {\n        route,\n        descriptor: _objectSpread(_objectSpread({}, descriptor), {}, {\n          options: _objectSpread(_objectSpread({}, descriptor.options), {}, {\n            animationEnabled,\n            cardOverlayEnabled,\n            cardStyleInterpolator,\n            gestureDirection,\n            gestureEnabled,\n            headerStyleInterpolator,\n            transitionSpec,\n            headerMode\n          })\n        }),\n        progress: {\n          current: getProgressFromGesture(currentGesture, state.layout, descriptor),\n          next: nextGesture && (nextDescriptor === null || nextDescriptor === void 0 ? void 0 : nextDescriptor.options.presentation) !== 'transparentModal' ? getProgressFromGesture(nextGesture, state.layout, nextDescriptor) : undefined,\n          previous: previousGesture ? getProgressFromGesture(previousGesture, state.layout, previousDescriptor) : undefined\n        },\n        __memo: [state.layout, descriptor, nextDescriptor, previousDescriptor, currentGesture, nextGesture, previousGesture]\n      };\n      if (oldScene && scene.__memo.every((it, i) => {\n        return oldScene.__memo[i] === it;\n      })) {\n        return oldScene;\n      }\n      return scene;\n    });\n    return {\n      routes: props.routes,\n      scenes,\n      gestures,\n      descriptors: props.descriptors,\n      headerHeights: getHeaderHeights(scenes, props.insets, props.isParentHeaderShown, props.isParentModal, state.layout, state.headerHeights)\n    };\n  }\n  constructor(props) {\n    super(props);\n    this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: SafeAreaProviderCompat.initialMetrics.frame,\n      descriptors: this.props.descriptors,\n      headerHeights: {}\n    };\n  }\n  handleLayout = e => {\n    const {\n      height,\n      width\n    } = e.nativeEvent.layout;\n    const layout = {\n      width,\n      height\n    };\n    this.setState((state, props) => {\n      if (height === state.layout.height && width === state.layout.width) {\n        return null;\n      }\n      return {\n        layout,\n        headerHeights: getHeaderHeights(state.scenes, props.insets, props.isParentHeaderShown, props.isParentModal, layout, state.headerHeights)\n      };\n    });\n  };\n  handleHeaderLayout = _ref => {\n    let {\n      route,\n      height\n    } = _ref;\n    this.setState(_ref2 => {\n      let {\n        headerHeights\n      } = _ref2;\n      const previousHeight = headerHeights[route.key];\n      if (previousHeight === height) {\n        return null;\n      }\n      return {\n        headerHeights: _objectSpread(_objectSpread({}, headerHeights), {}, {\n          [route.key]: height\n        })\n      };\n    });\n  };\n  getFocusedRoute = () => {\n    const {\n      state\n    } = this.props;\n    return state.routes[state.index];\n  };\n  getPreviousScene = _ref3 => {\n    let {\n      route\n    } = _ref3;\n    const {\n      getPreviousRoute\n    } = this.props;\n    const {\n      scenes\n    } = this.state;\n    const previousRoute = getPreviousRoute({\n      route\n    });\n    if (previousRoute) {\n      const previousScene = scenes.find(scene => scene.descriptor.route.key === previousRoute.key);\n      return previousScene;\n    }\n    return undefined;\n  };\n  render() {\n    const {\n      insets,\n      state,\n      routes,\n      closingRouteKeys,\n      onOpenRoute,\n      onCloseRoute,\n      renderHeader,\n      renderScene,\n      isParentHeaderShown,\n      isParentModal,\n      onTransitionStart,\n      onTransitionEnd,\n      onGestureStart,\n      onGestureEnd,\n      onGestureCancel,\n      detachInactiveScreens = Platform.OS === 'web' || Platform.OS === 'android' || Platform.OS === 'ios'\n    } = this.props;\n    const {\n      scenes,\n      layout,\n      gestures,\n      headerHeights\n    } = this.state;\n    const focusedRoute = state.routes[state.index];\n    const focusedHeaderHeight = headerHeights[focusedRoute.key];\n    const isFloatHeaderAbsolute = this.state.scenes.slice(-2).some(scene => {\n      const options = scene.descriptor.options ?? {};\n      const {\n        headerMode,\n        headerTransparent,\n        headerShown = true\n      } = options;\n      if (headerTransparent || headerShown === false || headerMode === 'screen') {\n        return true;\n      }\n      return false;\n    });\n    let activeScreensLimit = 1;\n    for (let i = scenes.length - 1; i >= 0; i--) {\n      const {\n        options\n      } = scenes[i].descriptor;\n      const {\n        detachPreviousScreen = options.presentation === 'transparentModal' ? false : getIsModalPresentation(options.cardStyleInterpolator) ? i !== findLastIndex(scenes, scene => {\n          const {\n            cardStyleInterpolator\n          } = scene.descriptor.options;\n          return cardStyleInterpolator === forModalPresentationIOS || (cardStyleInterpolator === null || cardStyleInterpolator === void 0 ? void 0 : cardStyleInterpolator.name) === 'forModalPresentationIOS';\n        }) : true\n      } = options;\n      if (detachPreviousScreen === false) {\n        activeScreensLimit++;\n      } else {\n        if (i <= scenes.length - 2) {\n          break;\n        }\n      }\n    }\n    const floatingHeader = React.createElement(React.Fragment, {\n      key: \"header\"\n    }, renderHeader({\n      mode: 'float',\n      layout,\n      scenes,\n      getPreviousScene: this.getPreviousScene,\n      getFocusedRoute: this.getFocusedRoute,\n      onContentHeightChange: this.handleHeaderLayout,\n      style: [styles.floating, isFloatHeaderAbsolute && [{\n        height: focusedHeaderHeight\n      }, styles.absolute]]\n    }));\n    return React.createElement(Background, null, isFloatHeaderAbsolute ? null : floatingHeader, React.createElement(MaybeScreenContainer, {\n      enabled: detachInactiveScreens,\n      style: styles.container,\n      onLayout: this.handleLayout\n    }, routes.map((route, index, self) => {\n      var _scenes, _scenes2;\n      const focused = focusedRoute.key === route.key;\n      const gesture = gestures[route.key];\n      const scene = scenes[index];\n      let isScreenActive = 1;\n      if (index < self.length - activeScreensLimit - 1) {\n        isScreenActive = STATE_INACTIVE;\n      } else {\n        const sceneForActivity = scenes[self.length - 1];\n        const outputValue = index === self.length - 1 ? STATE_ON_TOP : index >= self.length - activeScreensLimit ? STATE_TRANSITIONING_OR_BELOW_TOP : STATE_INACTIVE;\n        isScreenActive = sceneForActivity ? sceneForActivity.progress.current.interpolate({\n          inputRange: [0, 1 - EPSILON, 1],\n          outputRange: [1, 1, outputValue],\n          extrapolate: 'clamp'\n        }) : STATE_TRANSITIONING_OR_BELOW_TOP;\n      }\n      const {\n        headerShown = true,\n        headerTransparent,\n        headerStyle,\n        headerTintColor,\n        freezeOnBlur\n      } = scene.descriptor.options;\n      const safeAreaInsetTop = insets.top;\n      const safeAreaInsetRight = insets.right;\n      const safeAreaInsetBottom = insets.bottom;\n      const safeAreaInsetLeft = insets.left;\n      const headerHeight = headerShown !== false ? headerHeights[route.key] : 0;\n      let headerDarkContent;\n      if (headerShown) {\n        if (typeof headerTintColor === 'string') {\n          headerDarkContent = Color(headerTintColor).isDark();\n        } else {\n          const flattenedHeaderStyle = StyleSheet.flatten(headerStyle);\n          if (flattenedHeaderStyle && 'backgroundColor' in flattenedHeaderStyle && typeof flattenedHeaderStyle.backgroundColor === 'string') {\n            headerDarkContent = !Color(flattenedHeaderStyle.backgroundColor).isDark();\n          }\n        }\n      }\n      const interpolationIndex = getInterpolationIndex(scenes, index);\n      const isModal = getIsModal(scene, interpolationIndex, isParentModal);\n      const isNextScreenTransparent = ((_scenes = scenes[index + 1]) === null || _scenes === void 0 ? void 0 : _scenes.descriptor.options.presentation) === 'transparentModal';\n      const detachCurrentScreen = ((_scenes2 = scenes[index + 1]) === null || _scenes2 === void 0 ? void 0 : _scenes2.descriptor.options.detachPreviousScreen) !== false;\n      return React.createElement(MaybeScreen, {\n        key: route.key,\n        style: StyleSheet.absoluteFill,\n        enabled: detachInactiveScreens,\n        active: isScreenActive,\n        freezeOnBlur: freezeOnBlur,\n        pointerEvents: \"box-none\"\n      }, React.createElement(CardContainer, {\n        index: index,\n        interpolationIndex: interpolationIndex,\n        modal: isModal,\n        active: index === self.length - 1,\n        focused: focused,\n        closing: closingRouteKeys.includes(route.key),\n        layout: layout,\n        gesture: gesture,\n        scene: scene,\n        safeAreaInsetTop: safeAreaInsetTop,\n        safeAreaInsetRight: safeAreaInsetRight,\n        safeAreaInsetBottom: safeAreaInsetBottom,\n        safeAreaInsetLeft: safeAreaInsetLeft,\n        onGestureStart: onGestureStart,\n        onGestureCancel: onGestureCancel,\n        onGestureEnd: onGestureEnd,\n        headerHeight: headerHeight,\n        isParentHeaderShown: isParentHeaderShown,\n        onHeaderHeightChange: this.handleHeaderLayout,\n        getPreviousScene: this.getPreviousScene,\n        getFocusedRoute: this.getFocusedRoute,\n        headerDarkContent: headerDarkContent,\n        hasAbsoluteFloatHeader: isFloatHeaderAbsolute && !headerTransparent,\n        renderHeader: renderHeader,\n        renderScene: renderScene,\n        onOpenRoute: onOpenRoute,\n        onCloseRoute: onCloseRoute,\n        onTransitionStart: onTransitionStart,\n        onTransitionEnd: onTransitionEnd,\n        isNextScreenTransparent: isNextScreenTransparent,\n        detachCurrentScreen: detachCurrentScreen\n      }));\n    })), isFloatHeaderAbsolute ? floatingHeader : null);\n  }\n}\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0\n  },\n  floating: {\n    zIndex: 1\n  }\n});","map":{"version":3,"names":["Background","getDefaultHeaderHeight","SafeAreaProviderCompat","Color","React","Animated","Platform","StyleSheet","forModalPresentationIOS","forNoAnimation","forNoAnimationCard","DefaultTransition","ModalFadeTransition","ModalTransition","findLastIndex","getDistanceForDirection","MaybeScreen","MaybeScreenContainer","getIsModalPresentation","CardContainer","EPSILON","STATE_INACTIVE","STATE_TRANSITIONING_OR_BELOW_TOP","STATE_ON_TOP","FALLBACK_DESCRIPTOR","Object","freeze","options","getInterpolationIndex","scenes","index","cardStyleInterpolator","descriptor","interpolationIndex","i","_scenes$i","cardStyleInterpolatorCurrent","getIsModal","scene","isParentModal","isModalPresentation","isModal","getHeaderHeights","insets","isParentHeaderShown","layout","previous","reduce","acc","curr","headerStatusBarHeight","top","headerStyle","style","flatten","height","route","key","getDistanceFromOptions","presentation","gestureDirection","getProgressFromGesture","gesture","distance","width","Math","max","interpolate","inputRange","outputRange","CardStack","Component","getDerivedStateFromProps","props","state","routes","descriptors","gestures","animationEnabled","Value","openingRouteKeys","includes","map","self","previousRoute","nextRoute","oldScene","currentGesture","previousGesture","undefined","nextGesture","nextDescriptor","previousDescriptor","optionsForTransitionConfig","length","defaultTransitionPreset","OS","gestureEnabled","transitionSpec","headerStyleInterpolator","cardOverlayEnabled","headerMode","header","_objectSpread","progress","current","next","__memo","every","it","headerHeights","constructor","initialMetrics","frame","handleLayout","e","nativeEvent","setState","handleHeaderLayout","_ref","_ref2","previousHeight","getFocusedRoute","getPreviousScene","_ref3","getPreviousRoute","previousScene","find","render","closingRouteKeys","onOpenRoute","onCloseRoute","renderHeader","renderScene","onTransitionStart","onTransitionEnd","onGestureStart","onGestureEnd","onGestureCancel","detachInactiveScreens","focusedRoute","focusedHeaderHeight","isFloatHeaderAbsolute","slice","some","headerTransparent","headerShown","activeScreensLimit","detachPreviousScreen","name","floatingHeader","createElement","Fragment","mode","onContentHeightChange","styles","floating","absolute","enabled","container","onLayout","_scenes","_scenes2","focused","isScreenActive","sceneForActivity","outputValue","extrapolate","headerTintColor","freezeOnBlur","safeAreaInsetTop","safeAreaInsetRight","right","safeAreaInsetBottom","bottom","safeAreaInsetLeft","left","headerHeight","headerDarkContent","isDark","flattenedHeaderStyle","backgroundColor","isNextScreenTransparent","detachCurrentScreen","absoluteFill","active","pointerEvents","modal","closing","onHeaderHeightChange","hasAbsoluteFloatHeader","create","flex","position","zIndex"],"sources":["/Users/farhang/Desktop/June 17 /Front/Getchup_FrontEnd/node_modules/@react-navigation/stack/src/views/Stack/CardStack.tsx"],"sourcesContent":["import {\n  Background,\n  getDefaultHeaderHeight,\n  SafeAreaProviderCompat,\n} from '@react-navigation/elements';\nimport type {\n  ParamListBase,\n  Route,\n  StackNavigationState,\n} from '@react-navigation/native';\nimport Color from 'color';\nimport * as React from 'react';\nimport {\n  Animated,\n  LayoutChangeEvent,\n  Platform,\n  StyleSheet,\n} from 'react-native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\n\nimport {\n  forModalPresentationIOS,\n  forNoAnimation as forNoAnimationCard,\n} from '../../TransitionConfigs/CardStyleInterpolators';\nimport {\n  DefaultTransition,\n  ModalFadeTransition,\n  ModalTransition,\n} from '../../TransitionConfigs/TransitionPresets';\nimport type {\n  Layout,\n  Scene,\n  StackDescriptor,\n  StackDescriptorMap,\n  StackHeaderMode,\n  StackNavigationOptions,\n} from '../../types';\nimport findLastIndex from '../../utils/findLastIndex';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport type { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport { MaybeScreen, MaybeScreenContainer } from '../Screens';\nimport { getIsModalPresentation } from './Card';\nimport CardContainer from './CardContainer';\n\ntype GestureValues = {\n  [key: string]: Animated.Value;\n};\n\ntype Props = {\n  insets: EdgeInsets;\n  state: StackNavigationState<ParamListBase>;\n  descriptors: StackDescriptorMap;\n  routes: Route<string>[];\n  openingRouteKeys: string[];\n  closingRouteKeys: string[];\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  isParentHeaderShown: boolean;\n  isParentModal: boolean;\n  onTransitionStart: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd: (props: { route: Route<string> }, closing: boolean) => void;\n  onGestureStart: (props: { route: Route<string> }) => void;\n  onGestureEnd: (props: { route: Route<string> }) => void;\n  onGestureCancel: (props: { route: Route<string> }) => void;\n  detachInactiveScreens?: boolean;\n};\n\ntype State = {\n  routes: Route<string>[];\n  descriptors: StackDescriptorMap;\n  scenes: Scene[];\n  gestures: GestureValues;\n  layout: Layout;\n  headerHeights: Record<string, number>;\n};\n\nconst EPSILON = 1e-5;\n\nconst STATE_INACTIVE = 0;\nconst STATE_TRANSITIONING_OR_BELOW_TOP = 1;\nconst STATE_ON_TOP = 2;\n\nconst FALLBACK_DESCRIPTOR = Object.freeze({ options: {} });\n\nconst getInterpolationIndex = (scenes: Scene[], index: number) => {\n  const { cardStyleInterpolator } = scenes[index].descriptor.options;\n\n  // Start from current card and count backwards the number of cards with same interpolation\n  let interpolationIndex = 0;\n\n  for (let i = index - 1; i >= 0; i--) {\n    const cardStyleInterpolatorCurrent =\n      scenes[i]?.descriptor.options.cardStyleInterpolator;\n\n    if (cardStyleInterpolatorCurrent !== cardStyleInterpolator) {\n      break;\n    }\n\n    interpolationIndex++;\n  }\n\n  return interpolationIndex;\n};\n\nconst getIsModal = (\n  scene: Scene,\n  interpolationIndex: number,\n  isParentModal: boolean\n) => {\n  if (isParentModal) {\n    return true;\n  }\n\n  const { cardStyleInterpolator } = scene.descriptor.options;\n  const isModalPresentation = getIsModalPresentation(cardStyleInterpolator);\n  const isModal = isModalPresentation && interpolationIndex !== 0;\n\n  return isModal;\n};\n\nconst getHeaderHeights = (\n  scenes: Scene[],\n  insets: EdgeInsets,\n  isParentHeaderShown: boolean,\n  isParentModal: boolean,\n  layout: Layout,\n  previous: Record<string, number>\n) => {\n  return scenes.reduce<Record<string, number>>((acc, curr, index) => {\n    const {\n      headerStatusBarHeight = isParentHeaderShown ? 0 : insets.top,\n      headerStyle,\n    } = curr.descriptor.options;\n\n    const style = StyleSheet.flatten(headerStyle || {});\n\n    const height =\n      'height' in style && typeof style.height === 'number'\n        ? style.height\n        : previous[curr.route.key];\n\n    const interpolationIndex = getInterpolationIndex(scenes, index);\n    const isModal = getIsModal(curr, interpolationIndex, isParentModal);\n\n    acc[curr.route.key] =\n      typeof height === 'number'\n        ? height\n        : getDefaultHeaderHeight(layout, isModal, headerStatusBarHeight);\n\n    return acc;\n  }, {});\n};\n\nconst getDistanceFromOptions = (\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const {\n    presentation,\n    gestureDirection = presentation === 'modal'\n      ? ModalTransition.gestureDirection\n      : DefaultTransition.gestureDirection,\n  } = (descriptor?.options || {}) as StackNavigationOptions;\n\n  return getDistanceForDirection(layout, gestureDirection);\n};\n\nconst getProgressFromGesture = (\n  gesture: Animated.Value,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const distance = getDistanceFromOptions(\n    {\n      // Make sure that we have a non-zero distance, otherwise there will be incorrect progress\n      // This causes blank screen on web if it was previously inside container with display: none\n      width: Math.max(1, layout.width),\n      height: Math.max(1, layout.height),\n    },\n    descriptor\n  );\n\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0],\n    });\n  }\n\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1],\n  });\n};\n\nexport default class CardStack extends React.Component<Props, State> {\n  static getDerivedStateFromProps(\n    props: Props,\n    state: State\n  ): Partial<State> | null {\n    if (\n      props.routes === state.routes &&\n      props.descriptors === state.descriptors\n    ) {\n      return null;\n    }\n\n    const gestures = props.routes.reduce<GestureValues>((acc, curr) => {\n      const descriptor = props.descriptors[curr.key];\n      const { animationEnabled } = descriptor?.options || {};\n\n      acc[curr.key] =\n        state.gestures[curr.key] ||\n        new Animated.Value(\n          props.openingRouteKeys.includes(curr.key) &&\n          animationEnabled !== false\n            ? getDistanceFromOptions(state.layout, descriptor)\n            : 0\n        );\n\n      return acc;\n    }, {});\n\n    const scenes = props.routes.map((route, index, self) => {\n      const previousRoute = self[index - 1];\n      const nextRoute = self[index + 1];\n\n      const oldScene = state.scenes[index];\n\n      const currentGesture = gestures[route.key];\n      const previousGesture = previousRoute\n        ? gestures[previousRoute.key]\n        : undefined;\n      const nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n\n      const descriptor =\n        props.descriptors[route.key] ||\n        state.descriptors[route.key] ||\n        (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n\n      const nextDescriptor =\n        props.descriptors[nextRoute?.key] || state.descriptors[nextRoute?.key];\n\n      const previousDescriptor =\n        props.descriptors[previousRoute?.key] ||\n        state.descriptors[previousRoute?.key];\n\n      // When a screen is not the last, it should use next screen's transition config\n      // Many transitions also animate the previous screen, so using 2 different transitions doesn't look right\n      // For example combining a slide and a modal transition would look wrong otherwise\n      // With this approach, combining different transition styles in the same navigator mostly looks right\n      // This will still be broken when 2 transitions have different idle state (e.g. modal presentation),\n      // but majority of the transitions look alright\n      const optionsForTransitionConfig =\n        index !== self.length - 1 &&\n        nextDescriptor &&\n        nextDescriptor.options.presentation !== 'transparentModal'\n          ? nextDescriptor.options\n          : descriptor.options;\n\n      let defaultTransitionPreset =\n        optionsForTransitionConfig.presentation === 'modal'\n          ? ModalTransition\n          : optionsForTransitionConfig.presentation === 'transparentModal'\n          ? ModalFadeTransition\n          : DefaultTransition;\n\n      const {\n        animationEnabled = Platform.OS !== 'web' &&\n          Platform.OS !== 'windows' &&\n          Platform.OS !== 'macos',\n        gestureEnabled = Platform.OS === 'ios' && animationEnabled,\n        gestureDirection = defaultTransitionPreset.gestureDirection,\n        transitionSpec = defaultTransitionPreset.transitionSpec,\n        cardStyleInterpolator = animationEnabled === false\n          ? forNoAnimationCard\n          : defaultTransitionPreset.cardStyleInterpolator,\n        headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n        cardOverlayEnabled = (Platform.OS !== 'ios' &&\n          optionsForTransitionConfig.presentation !== 'transparentModal') ||\n          getIsModalPresentation(cardStyleInterpolator),\n      } = optionsForTransitionConfig;\n\n      const headerMode: StackHeaderMode =\n        descriptor.options.headerMode ??\n        (!(\n          optionsForTransitionConfig.presentation === 'modal' ||\n          optionsForTransitionConfig.presentation === 'transparentModal' ||\n          nextDescriptor?.options.presentation === 'modal' ||\n          nextDescriptor?.options.presentation === 'transparentModal' ||\n          getIsModalPresentation(cardStyleInterpolator)\n        ) &&\n        Platform.OS === 'ios' &&\n        descriptor.options.header === undefined\n          ? 'float'\n          : 'screen');\n\n      const scene = {\n        route,\n        descriptor: {\n          ...descriptor,\n          options: {\n            ...descriptor.options,\n            animationEnabled,\n            cardOverlayEnabled,\n            cardStyleInterpolator,\n            gestureDirection,\n            gestureEnabled,\n            headerStyleInterpolator,\n            transitionSpec,\n            headerMode,\n          },\n        },\n        progress: {\n          current: getProgressFromGesture(\n            currentGesture,\n            state.layout,\n            descriptor\n          ),\n          next:\n            nextGesture &&\n            nextDescriptor?.options.presentation !== 'transparentModal'\n              ? getProgressFromGesture(\n                  nextGesture,\n                  state.layout,\n                  nextDescriptor\n                )\n              : undefined,\n          previous: previousGesture\n            ? getProgressFromGesture(\n                previousGesture,\n                state.layout,\n                previousDescriptor\n              )\n            : undefined,\n        },\n        __memo: [\n          state.layout,\n          descriptor,\n          nextDescriptor,\n          previousDescriptor,\n          currentGesture,\n          nextGesture,\n          previousGesture,\n        ],\n      };\n\n      if (\n        oldScene &&\n        scene.__memo.every((it, i) => {\n          // @ts-expect-error: we haven't added __memo to the annotation to prevent usage elsewhere\n          return oldScene.__memo[i] === it;\n        })\n      ) {\n        return oldScene;\n      }\n\n      return scene;\n    });\n\n    return {\n      routes: props.routes,\n      scenes,\n      gestures,\n      descriptors: props.descriptors,\n      headerHeights: getHeaderHeights(\n        scenes,\n        props.insets,\n        props.isParentHeaderShown,\n        props.isParentModal,\n        state.layout,\n        state.headerHeights\n      ),\n    };\n  }\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: SafeAreaProviderCompat.initialMetrics.frame,\n      descriptors: this.props.descriptors,\n      // Used when card's header is null and mode is float to make transition\n      // between screens with headers and those without headers smooth.\n      // This is not a great heuristic here. We don't know synchronously\n      // on mount what the header height is so we have just used the most\n      // common cases here.\n      headerHeights: {},\n    };\n  }\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    const layout = { width, height };\n\n    this.setState((state, props) => {\n      if (height === state.layout.height && width === state.layout.width) {\n        return null;\n      }\n\n      return {\n        layout,\n        headerHeights: getHeaderHeights(\n          state.scenes,\n          props.insets,\n          props.isParentHeaderShown,\n          props.isParentModal,\n          layout,\n          state.headerHeights\n        ),\n      };\n    });\n  };\n\n  private handleHeaderLayout = ({\n    route,\n    height,\n  }: {\n    route: Route<string>;\n    height: number;\n  }) => {\n    this.setState(({ headerHeights }) => {\n      const previousHeight = headerHeights[route.key];\n\n      if (previousHeight === height) {\n        return null;\n      }\n\n      return {\n        headerHeights: {\n          ...headerHeights,\n          [route.key]: height,\n        },\n      };\n    });\n  };\n\n  private getFocusedRoute = () => {\n    const { state } = this.props;\n\n    return state.routes[state.index];\n  };\n\n  private getPreviousScene = ({ route }: { route: Route<string> }) => {\n    const { getPreviousRoute } = this.props;\n    const { scenes } = this.state;\n\n    const previousRoute = getPreviousRoute({ route });\n\n    if (previousRoute) {\n      const previousScene = scenes.find(\n        (scene) => scene.descriptor.route.key === previousRoute.key\n      );\n\n      return previousScene;\n    }\n\n    return undefined;\n  };\n\n  render() {\n    const {\n      insets,\n      state,\n      routes,\n      closingRouteKeys,\n      onOpenRoute,\n      onCloseRoute,\n      renderHeader,\n      renderScene,\n      isParentHeaderShown,\n      isParentModal,\n      onTransitionStart,\n      onTransitionEnd,\n      onGestureStart,\n      onGestureEnd,\n      onGestureCancel,\n      detachInactiveScreens = Platform.OS === 'web' ||\n        Platform.OS === 'android' ||\n        Platform.OS === 'ios',\n    } = this.props;\n\n    const { scenes, layout, gestures, headerHeights } = this.state;\n\n    const focusedRoute = state.routes[state.index];\n    const focusedHeaderHeight = headerHeights[focusedRoute.key];\n\n    const isFloatHeaderAbsolute = this.state.scenes.slice(-2).some((scene) => {\n      const options = scene.descriptor.options ?? {};\n      const { headerMode, headerTransparent, headerShown = true } = options;\n\n      if (\n        headerTransparent ||\n        headerShown === false ||\n        headerMode === 'screen'\n      ) {\n        return true;\n      }\n\n      return false;\n    });\n\n    let activeScreensLimit = 1;\n\n    for (let i = scenes.length - 1; i >= 0; i--) {\n      const { options } = scenes[i].descriptor;\n      const {\n        // By default, we don't want to detach the previous screen of the active one for modals\n        detachPreviousScreen = options.presentation === 'transparentModal'\n          ? false\n          : getIsModalPresentation(options.cardStyleInterpolator)\n          ? i !==\n            findLastIndex(scenes, (scene) => {\n              const { cardStyleInterpolator } = scene.descriptor.options;\n\n              return (\n                cardStyleInterpolator === forModalPresentationIOS ||\n                cardStyleInterpolator?.name === 'forModalPresentationIOS'\n              );\n            })\n          : true,\n      } = options;\n\n      if (detachPreviousScreen === false) {\n        activeScreensLimit++;\n      } else {\n        // Check at least last 2 screens before stopping\n        // This will make sure that screen isn't detached when another screen is animating on top of the transparent one\n        // For example, (Opaque -> Transparent -> Opaque)\n        if (i <= scenes.length - 2) {\n          break;\n        }\n      }\n    }\n\n    const floatingHeader = (\n      <React.Fragment key=\"header\">\n        {renderHeader({\n          mode: 'float',\n          layout,\n          scenes,\n          getPreviousScene: this.getPreviousScene,\n          getFocusedRoute: this.getFocusedRoute,\n          onContentHeightChange: this.handleHeaderLayout,\n          style: [\n            styles.floating,\n            isFloatHeaderAbsolute && [\n              // Without this, the header buttons won't be touchable on Android when headerTransparent: true\n              { height: focusedHeaderHeight },\n              styles.absolute,\n            ],\n          ],\n        })}\n      </React.Fragment>\n    );\n\n    return (\n      <Background>\n        {isFloatHeaderAbsolute ? null : floatingHeader}\n        <MaybeScreenContainer\n          enabled={detachInactiveScreens}\n          style={styles.container}\n          onLayout={this.handleLayout}\n        >\n          {routes.map((route, index, self) => {\n            const focused = focusedRoute.key === route.key;\n            const gesture = gestures[route.key];\n            const scene = scenes[index];\n\n            // For the screens that shouldn't be active, the value is 0\n            // For those that should be active, but are not the top screen, the value is 1\n            // For those on top of the stack and with interaction enabled, the value is 2\n            // For the old implementation, it stays the same it was\n            let isScreenActive:\n              | Animated.AnimatedInterpolation<0 | 1 | 2>\n              | 2\n              | 1\n              | 0 = 1;\n\n            if (index < self.length - activeScreensLimit - 1) {\n              // screen should be inactive because it is too deep in the stack\n              isScreenActive = STATE_INACTIVE;\n            } else {\n              const sceneForActivity = scenes[self.length - 1];\n              const outputValue =\n                index === self.length - 1\n                  ? STATE_ON_TOP // the screen is on top after the transition\n                  : index >= self.length - activeScreensLimit\n                  ? STATE_TRANSITIONING_OR_BELOW_TOP // the screen should stay active after the transition, it is not on top but is in activeLimit\n                  : STATE_INACTIVE; // the screen should be active only during the transition, it is at the edge of activeLimit\n              isScreenActive = sceneForActivity\n                ? sceneForActivity.progress.current.interpolate({\n                    inputRange: [0, 1 - EPSILON, 1],\n                    outputRange: [1, 1, outputValue],\n                    extrapolate: 'clamp',\n                  })\n                : STATE_TRANSITIONING_OR_BELOW_TOP;\n            }\n\n            const {\n              headerShown = true,\n              headerTransparent,\n              headerStyle,\n              headerTintColor,\n              freezeOnBlur,\n            } = scene.descriptor.options;\n\n            const safeAreaInsetTop = insets.top;\n            const safeAreaInsetRight = insets.right;\n            const safeAreaInsetBottom = insets.bottom;\n            const safeAreaInsetLeft = insets.left;\n\n            const headerHeight =\n              headerShown !== false ? headerHeights[route.key] : 0;\n\n            let headerDarkContent: boolean | undefined;\n\n            if (headerShown) {\n              if (typeof headerTintColor === 'string') {\n                headerDarkContent = Color(headerTintColor).isDark();\n              } else {\n                const flattenedHeaderStyle = StyleSheet.flatten(headerStyle);\n\n                if (\n                  flattenedHeaderStyle &&\n                  'backgroundColor' in flattenedHeaderStyle &&\n                  typeof flattenedHeaderStyle.backgroundColor === 'string'\n                ) {\n                  headerDarkContent = !Color(\n                    flattenedHeaderStyle.backgroundColor\n                  ).isDark();\n                }\n              }\n            }\n\n            // Start from current card and count backwards the number of cards with same interpolation\n            const interpolationIndex = getInterpolationIndex(scenes, index);\n            const isModal = getIsModal(\n              scene,\n              interpolationIndex,\n              isParentModal\n            );\n\n            const isNextScreenTransparent =\n              scenes[index + 1]?.descriptor.options.presentation ===\n              'transparentModal';\n\n            const detachCurrentScreen =\n              scenes[index + 1]?.descriptor.options.detachPreviousScreen !==\n              false;\n\n            return (\n              <MaybeScreen\n                key={route.key}\n                style={StyleSheet.absoluteFill}\n                enabled={detachInactiveScreens}\n                active={isScreenActive}\n                freezeOnBlur={freezeOnBlur}\n                pointerEvents=\"box-none\"\n              >\n                <CardContainer\n                  index={index}\n                  interpolationIndex={interpolationIndex}\n                  modal={isModal}\n                  active={index === self.length - 1}\n                  focused={focused}\n                  closing={closingRouteKeys.includes(route.key)}\n                  layout={layout}\n                  gesture={gesture}\n                  scene={scene}\n                  safeAreaInsetTop={safeAreaInsetTop}\n                  safeAreaInsetRight={safeAreaInsetRight}\n                  safeAreaInsetBottom={safeAreaInsetBottom}\n                  safeAreaInsetLeft={safeAreaInsetLeft}\n                  onGestureStart={onGestureStart}\n                  onGestureCancel={onGestureCancel}\n                  onGestureEnd={onGestureEnd}\n                  headerHeight={headerHeight}\n                  isParentHeaderShown={isParentHeaderShown}\n                  onHeaderHeightChange={this.handleHeaderLayout}\n                  getPreviousScene={this.getPreviousScene}\n                  getFocusedRoute={this.getFocusedRoute}\n                  headerDarkContent={headerDarkContent}\n                  hasAbsoluteFloatHeader={\n                    isFloatHeaderAbsolute && !headerTransparent\n                  }\n                  renderHeader={renderHeader}\n                  renderScene={renderScene}\n                  onOpenRoute={onOpenRoute}\n                  onCloseRoute={onCloseRoute}\n                  onTransitionStart={onTransitionStart}\n                  onTransitionEnd={onTransitionEnd}\n                  isNextScreenTransparent={isNextScreenTransparent}\n                  detachCurrentScreen={detachCurrentScreen}\n                />\n              </MaybeScreen>\n            );\n          })}\n        </MaybeScreenContainer>\n        {isFloatHeaderAbsolute ? floatingHeader : null}\n      </Background>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n  floating: {\n    zIndex: 1,\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}