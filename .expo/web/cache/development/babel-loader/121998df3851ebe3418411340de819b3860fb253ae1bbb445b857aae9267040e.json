{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { ContinousBaseGesture } from './gesture';\nfunction changeEventCalculator(current, previous) {\n  'worklet';\n\n  let changePayload;\n  if (previous === undefined) {\n    changePayload = {\n      rotationChange: current.rotation\n    };\n  } else {\n    changePayload = {\n      rotationChange: current.rotation - previous.rotation\n    };\n  }\n  return _objectSpread(_objectSpread({}, current), changePayload);\n}\nexport class RotationGesture extends ContinousBaseGesture {\n  constructor() {\n    super();\n    this.handlerName = 'RotationGestureHandler';\n  }\n  onChange(callback) {\n    this.handlers.changeEventCalculator = changeEventCalculator;\n    return super.onChange(callback);\n  }\n}","map":{"version":3,"names":["ContinousBaseGesture","changeEventCalculator","current","previous","changePayload","undefined","rotationChange","rotation","_objectSpread","RotationGesture","constructor","handlerName","onChange","callback","handlers"],"sources":["/Users/farhang/Desktop/June 17 /Front/Getchup_FrontEnd/node_modules/react-native-gesture-handler/lib/module/handlers/gestures/rotationGesture.ts"],"sourcesContent":["import { ContinousBaseGesture } from './gesture';\nimport { RotationGestureHandlerEventPayload } from '../RotationGestureHandler';\nimport { GestureUpdateEvent } from '../gestureHandlerCommon';\n\ntype RotationGestureChangeEventPayload = {\n  rotationChange: number;\n};\n\nfunction changeEventCalculator(\n  current: GestureUpdateEvent<RotationGestureHandlerEventPayload>,\n  previous?: GestureUpdateEvent<RotationGestureHandlerEventPayload>\n) {\n  'worklet';\n  let changePayload: RotationGestureChangeEventPayload;\n  if (previous === undefined) {\n    changePayload = {\n      rotationChange: current.rotation,\n    };\n  } else {\n    changePayload = {\n      rotationChange: current.rotation - previous.rotation,\n    };\n  }\n\n  return { ...current, ...changePayload };\n}\n\nexport class RotationGesture extends ContinousBaseGesture<\n  RotationGestureHandlerEventPayload,\n  RotationGestureChangeEventPayload\n> {\n  constructor() {\n    super();\n\n    this.handlerName = 'RotationGestureHandler';\n  }\n\n  onChange(\n    callback: (\n      event: GestureUpdateEvent<\n        RotationGestureHandlerEventPayload & RotationGestureChangeEventPayload\n      >\n    ) => void\n  ) {\n    // @ts-ignore TS being overprotective, RotationGestureHandlerEventPayload is Record\n    this.handlers.changeEventCalculator = changeEventCalculator;\n    return super.onChange(callback);\n  }\n}\n\nexport type RotationGestureType = InstanceType<typeof RotationGesture>;\n"],"mappings":";;;AAAA,SAASA,oBAAT,QAAqC,WAArC;AAQA,SAASC,qBAATA,CACEC,OADF,EAEEC,QAFF,EAGE;EACA;;EACA,IAAIC,aAAJ;EACA,IAAID,QAAQ,KAAKE,SAAjB,EAA4B;IAC1BD,aAAa,GAAG;MACdE,cAAc,EAAEJ,OAAO,CAACK;IADV,CAAhB;EAGD,CAJD,MAIO;IACLH,aAAa,GAAG;MACdE,cAAc,EAAEJ,OAAO,CAACK,QAAR,GAAmBJ,QAAQ,CAACI;IAD9B,CAAhB;EAGD;EAED,OAAAC,aAAA,CAAAA,aAAA,KAAYN,OAAL,GAAiBE,aAAA;AACzB;AAED,OAAO,MAAMK,eAAN,SAA8BT,oBAA9B,CAGL;EACAU,WAAWA,CAAA,EAAG;IACZ;IAEA,KAAKC,WAAL,GAAmB,wBAAnB;EACD;EAEDC,QAAQA,CACNC,QADM,EAMN;IAEA,KAAKC,QAAL,CAAcb,qBAAd,GAAsCA,qBAAtC;IACA,OAAO,MAAMW,QAAN,CAAeC,QAAf,CAAP;EACD;AAjBD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}