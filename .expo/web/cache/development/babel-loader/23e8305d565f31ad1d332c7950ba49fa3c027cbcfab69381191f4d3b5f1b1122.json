{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nconst _excluded = [\"isDisabled\", \"onPress\", \"onPressStart\", \"onPressEnd\", \"onPressUp\", \"onPressChange\", \"isPressed\"];\nimport React from 'react';\nimport { mergeProps } from '@react-aria/utils';\nexport function usePress(_ref) {\n  let {\n      isDisabled,\n      onPress,\n      onPressStart,\n      onPressEnd,\n      onPressUp,\n      onPressChange,\n      isPressed: isPressedProp\n    } = _ref,\n    restProps = _objectWithoutProperties(_ref, _excluded);\n  let [isPressed, setPressed] = React.useState(false);\n  let pressProps = {\n    onPress: e => {\n      if (isDisabled) return;\n      onPress && onPress(e);\n    },\n    onPressIn: e => {\n      if (isDisabled) return;\n      onPressStart && onPressStart(e);\n      setPressed(true);\n      onPressChange && onPressChange(true);\n    },\n    onPressOut: e => {\n      if (isDisabled) return;\n      onPressEnd && onPressEnd(e);\n      setPressed(false);\n      onPressChange && onPressChange(false);\n      onPressUp && onPressUp(e);\n    }\n  };\n  pressProps = mergeProps(pressProps, restProps);\n  return {\n    isPressed: isPressedProp || isPressed,\n    pressProps\n  };\n}","map":{"version":3,"names":["React","mergeProps","usePress","_ref","isDisabled","onPress","onPressStart","onPressEnd","onPressUp","onPressChange","isPressed","isPressedProp","restProps","_objectWithoutProperties","_excluded","setPressed","useState","pressProps","e","onPressIn","onPressOut"],"sources":["/Users/farhang/Desktop/June 17 /Front/Getchup_FrontEnd/node_modules/@react-native-aria/interactions/src/usePress.ts"],"sourcesContent":["import React, { RefObject } from 'react';\nimport { mergeProps } from '@react-aria/utils';\n\nexport interface PressEvents {\n  /** Handler that is called when the press is released over the target. */\n  onPress?: (e: any) => void;\n  /** Handler that is called when a press interaction starts. */\n  onPressStart?: (e: any) => void;\n  /**\n   * Handler that is called when a press interaction ends, either\n   * over the target or when the pointer leaves the target.\n   */\n  onPressEnd?: (e: any) => void;\n  /** Handler that is called when the press state changes. */\n  onPressChange?: (isPressed: boolean) => void;\n  /**\n   * Handler that is called when a press is released over the target, regardless of\n   * whether it started on the target or not.\n   */\n  onPressUp?: (e: any) => void;\n}\n\nexport interface PressProps extends PressEvents {\n  /** Whether the target is in a controlled press state (e.g. an overlay it triggers is open). */\n  isPressed?: boolean;\n  /** Whether the press events should be disabled. */\n  isDisabled?: boolean;\n  /** Whether the target should not receive focus on press. */\n  preventFocusOnPress?: boolean;\n}\n\nexport interface PressHookProps extends PressProps {\n  /** A ref to the target element. */\n  ref?: RefObject<any>;\n}\n\nexport type PressResult = {\n  /** Whether the target is currently pressed. */\n  isPressed: boolean;\n  /** Props to spread on the target element. */\n  pressProps: any;\n};\n\nexport function usePress({\n  isDisabled,\n  onPress,\n  onPressStart,\n  onPressEnd,\n  onPressUp, // No onPressUp on RN.\n  onPressChange,\n  isPressed: isPressedProp,\n  ...restProps\n}: PressHookProps): PressResult {\n  let [isPressed, setPressed] = React.useState(false);\n\n  let pressProps = {\n    onPress: (e: any) => {\n      if (isDisabled) return;\n      onPress && onPress(e);\n    },\n    onPressIn: (e: any) => {\n      if (isDisabled) return;\n      onPressStart && onPressStart(e);\n      setPressed(true);\n      onPressChange && onPressChange(true);\n    },\n    onPressOut: (e: any) => {\n      if (isDisabled) return;\n      onPressEnd && onPressEnd(e);\n      setPressed(false);\n      onPressChange && onPressChange(false);\n      onPressUp && onPressUp(e);\n    },\n  };\n\n  pressProps = mergeProps(pressProps, restProps);\n\n  return {\n    isPressed: isPressedProp || isPressed,\n    pressProps,\n  };\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAqB,OAAO;AACxC,SAASC,UAAU,QAAQ,mBAAmB;AA0C9C,OAAO,SAASC,QAAQA,CAAAC,IAAA,EASQ;EAAA,IATP;MACvBC,UAAU;MACVC,OAAO;MACPC,YAAY;MACZC,UAAU;MACVC,SAAS;MACTC,aAAa;MACbC,SAAS,EAAEC;IAEG,CAAC,GAAAR,IAAA;IADZS,SAAA,GAAAC,wBAAA,CAAAV,IAAA,EAAAW,SAAA;EAEH,IAAI,CAACJ,SAAS,EAAEK,UAAU,CAAC,GAAGf,KAAK,CAACgB,QAAQ,CAAC,KAAK,CAAC;EAEnD,IAAIC,UAAU,GAAG;IACfZ,OAAO,EAAGa,CAAM,IAAK;MACnB,IAAId,UAAU,EAAE;MAChBC,OAAO,IAAIA,OAAO,CAACa,CAAC,CAAC;IACvB,CAAC;IACDC,SAAS,EAAGD,CAAM,IAAK;MACrB,IAAId,UAAU,EAAE;MAChBE,YAAY,IAAIA,YAAY,CAACY,CAAC,CAAC;MAC/BH,UAAU,CAAC,IAAI,CAAC;MAChBN,aAAa,IAAIA,aAAa,CAAC,IAAI,CAAC;IACtC,CAAC;IACDW,UAAU,EAAGF,CAAM,IAAK;MACtB,IAAId,UAAU,EAAE;MAChBG,UAAU,IAAIA,UAAU,CAACW,CAAC,CAAC;MAC3BH,UAAU,CAAC,KAAK,CAAC;MACjBN,aAAa,IAAIA,aAAa,CAAC,KAAK,CAAC;MACrCD,SAAS,IAAIA,SAAS,CAACU,CAAC,CAAC;IAC3B;EACF,CAAC;EAEDD,UAAU,GAAGhB,UAAU,CAACgB,UAAU,EAAEL,SAAS,CAAC;EAE9C,OAAO;IACLF,SAAS,EAAEC,aAAa,IAAID,SAAS;IACrCO;EACF,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}