{"ast":null,"code":"import { TreeCollection as $05ca4cd7c4a5a999$export$863faf230ee2118a } from \"./TreeCollection.mjs\";\nimport { useMultipleSelectionState as $75HV2$useMultipleSelectionState, SelectionManager as $75HV2$SelectionManager } from \"@react-stately/selection\";\nimport { useMemo as $75HV2$useMemo, useCallback as $75HV2$useCallback, useEffect as $75HV2$useEffect } from \"react\";\nimport { useCollection as $75HV2$useCollection } from \"@react-stately/collections\";\nimport { useControlledState as $75HV2$useControlledState } from \"@react-stately/utils\";\nfunction $875d6693e12af071$export$728d6ba534403756(props) {\n  let {\n    onExpandedChange: onExpandedChange\n  } = props;\n  let [expandedKeys, setExpandedKeys] = (0, $75HV2$useControlledState)(props.expandedKeys ? new Set(props.expandedKeys) : undefined, props.defaultExpandedKeys ? new Set(props.defaultExpandedKeys) : new Set(), onExpandedChange);\n  let selectionState = (0, $75HV2$useMultipleSelectionState)(props);\n  let disabledKeys = (0, $75HV2$useMemo)(() => props.disabledKeys ? new Set(props.disabledKeys) : new Set(), [props.disabledKeys]);\n  let tree = (0, $75HV2$useCollection)(props, (0, $75HV2$useCallback)(nodes => new (0, $05ca4cd7c4a5a999$export$863faf230ee2118a)(nodes, {\n    expandedKeys: expandedKeys\n  }), [expandedKeys]), null);\n  (0, $75HV2$useEffect)(() => {\n    if (selectionState.focusedKey != null && !tree.getItem(selectionState.focusedKey)) selectionState.setFocusedKey(null);\n  }, [tree, selectionState.focusedKey]);\n  let onToggle = key => {\n    setExpandedKeys($875d6693e12af071$var$toggleKey(expandedKeys, key));\n  };\n  return {\n    collection: tree,\n    expandedKeys: expandedKeys,\n    disabledKeys: disabledKeys,\n    toggleKey: onToggle,\n    setExpandedKeys: setExpandedKeys,\n    selectionManager: new (0, $75HV2$SelectionManager)(tree, selectionState)\n  };\n}\nfunction $875d6693e12af071$var$toggleKey(set, key) {\n  let res = new Set(set);\n  if (res.has(key)) res.delete(key);else res.add(key);\n  return res;\n}\nexport { $875d6693e12af071$export$728d6ba534403756 as useTreeState };","map":{"version":3,"names":["$875d6693e12af071$export$728d6ba534403756","props","onExpandedChange","expandedKeys","setExpandedKeys","$75HV2$useControlledState","Set","undefined","defaultExpandedKeys","selectionState","$75HV2$useMultipleSelectionState","disabledKeys","$75HV2$useMemo","tree","$75HV2$useCollection","$75HV2$useCallback","nodes","$05ca4cd7c4a5a999$export$863faf230ee2118a","$75HV2$useEffect","focusedKey","getItem","setFocusedKey","onToggle","key","$875d6693e12af071$var$toggleKey","collection","toggleKey","selectionManager","$75HV2$SelectionManager","set","res","has","delete","add"],"sources":["/Users/farhang/Desktop/June 17 /Front/Getchup_FrontEnd/node_modules/@react-stately/tree/dist/packages/@react-stately/tree/src/useTreeState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, CollectionStateBase, DisabledBehavior, Expandable, Key, MultipleSelection, Node} from '@react-types/shared';\nimport {SelectionManager, useMultipleSelectionState} from '@react-stately/selection';\nimport {TreeCollection} from './TreeCollection';\nimport {useCallback, useEffect, useMemo} from 'react';\nimport {useCollection} from '@react-stately/collections';\nimport {useControlledState} from '@react-stately/utils';\n\nexport interface TreeProps<T> extends CollectionStateBase<T>, Expandable, MultipleSelection {\n  /** Whether `disabledKeys` applies to all interactions, or only selection. */\n  disabledBehavior?: DisabledBehavior\n}\nexport interface TreeState<T> {\n  /** A collection of items in the tree. */\n  readonly collection: Collection<Node<T>>,\n\n  /** A set of keys for items that are disabled. */\n  readonly disabledKeys: Set<Key>,\n\n  /** A set of keys for items that are expanded. */\n  readonly expandedKeys: Set<Key>,\n\n  /** Toggles the expanded state for an item by its key. */\n  toggleKey(key: Key): void,\n\n  /** Replaces the set of expanded keys. */\n  setExpandedKeys(keys: Set<Key>): void,\n\n  /** A selection manager to read and update multiple selection state. */\n  readonly selectionManager: SelectionManager\n}\n\n/**\n * Provides state management for tree-like components. Handles building a collection\n * of items from props, item expanded state, and manages multiple selection state.\n */\nexport function useTreeState<T extends object>(props: TreeProps<T>): TreeState<T> {\n  let {\n    onExpandedChange\n  } = props;\n\n  let [expandedKeys, setExpandedKeys] = useControlledState(\n    props.expandedKeys ? new Set(props.expandedKeys) : undefined,\n    props.defaultExpandedKeys ? new Set(props.defaultExpandedKeys) : new Set(),\n    onExpandedChange\n  );\n\n  let selectionState = useMultipleSelectionState(props);\n  let disabledKeys = useMemo(() =>\n    props.disabledKeys ? new Set(props.disabledKeys) : new Set<Key>()\n  , [props.disabledKeys]);\n\n  let tree = useCollection(props, useCallback(nodes => new TreeCollection(nodes, {expandedKeys}), [expandedKeys]), null);\n\n  // Reset focused key if that item is deleted from the collection.\n  useEffect(() => {\n    if (selectionState.focusedKey != null && !tree.getItem(selectionState.focusedKey)) {\n      selectionState.setFocusedKey(null);\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [tree, selectionState.focusedKey]);\n\n  let onToggle = (key: Key) => {\n    setExpandedKeys(toggleKey(expandedKeys, key));\n  };\n\n  return {\n    collection: tree,\n    expandedKeys,\n    disabledKeys,\n    toggleKey: onToggle,\n    setExpandedKeys,\n    selectionManager: new SelectionManager(tree, selectionState)\n  };\n}\n\nfunction toggleKey(set: Set<Key>, key: Key): Set<Key> {\n  let res = new Set(set);\n  if (res.has(key)) {\n    res.delete(key);\n  } else {\n    res.add(key);\n  }\n\n  return res;\n}\n"],"mappings":";;;;;AA+CO,SAASA,0CAA+BC,KAAmB;EAChE,IAAI;IAAAC,gBAAA,EACFA;EAAgB,CACjB,GAAGD,KAAA;EAEJ,IAAI,CAACE,YAAA,EAAcC,eAAA,CAAgB,GAAG,IAAAC,yBAAiB,EACrDJ,KAAA,CAAME,YAAY,GAAG,IAAIG,GAAA,CAAIL,KAAA,CAAME,YAAY,IAAII,SAAA,EACnDN,KAAA,CAAMO,mBAAmB,GAAG,IAAIF,GAAA,CAAIL,KAAA,CAAMO,mBAAmB,IAAI,IAAIF,GAAA,IACrEJ,gBAAA;EAGF,IAAIO,cAAA,GAAiB,IAAAC,gCAAwB,EAAET,KAAA;EAC/C,IAAIU,YAAA,GAAe,IAAAC,cAAM,EAAE,MACzBX,KAAA,CAAMU,YAAY,GAAG,IAAIL,GAAA,CAAIL,KAAA,CAAMU,YAAY,IAAI,IAAIL,GAAA,IACvD,CAACL,KAAA,CAAMU,YAAY,CAAC;EAEtB,IAAIE,IAAA,GAAO,IAAAC,oBAAY,EAAEb,KAAA,EAAO,IAAAc,kBAAU,EAAEC,KAAA,IAAS,KAAI,GAAAC,yCAAa,EAAED,KAAA,EAAO;kBAACb;EAAY,IAAI,CAACA,YAAA,CAAa,GAAG;EAGjH,IAAAe,gBAAQ,EAAE;IACR,IAAIT,cAAA,CAAeU,UAAU,IAAI,QAAQ,CAACN,IAAA,CAAKO,OAAO,CAACX,cAAA,CAAeU,UAAU,GAC9EV,cAAA,CAAeY,aAAa,CAAC;EAGjC,GAAG,CAACR,IAAA,EAAMJ,cAAA,CAAeU,UAAU,CAAC;EAEpC,IAAIG,QAAA,GAAYC,GAAA;IACdnB,eAAA,CAAgBoB,+BAAA,CAAUrB,YAAA,EAAcoB,GAAA;EAC1C;EAEA,OAAO;IACLE,UAAA,EAAYZ,IAAA;kBACZV,YAAA;kBACAQ,YAAA;IACAe,SAAA,EAAWJ,QAAA;qBACXlB,eAAA;IACAuB,gBAAA,EAAkB,KAAI,GAAAC,uBAAe,EAAEf,IAAA,EAAMJ,cAAA;EAC/C;AACF;AAEA,SAASe,gCAAUK,GAAa,EAAEN,GAAQ;EACxC,IAAIO,GAAA,GAAM,IAAIxB,GAAA,CAAIuB,GAAA;EAClB,IAAIC,GAAA,CAAIC,GAAG,CAACR,GAAA,GACVO,GAAA,CAAIE,MAAM,CAACT,GAAA,OAEXO,GAAA,CAAIG,GAAG,CAACV,GAAA;EAGV,OAAOO,GAAA;AACT","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}