{"ast":null,"code":"var _jsxFileName = \"/Users/farhang/Desktop/June 17 /Front/Getchup_FrontEnd/src/screens/profile/SurveyQuestionScreen.jsx\";\nimport { EyeIcon, ButtonText, FormControl, Heading, VStack, Button } from '@gluestack-ui/themed';\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { useNavigation } from '@react-navigation/native';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport api from '../../../api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SurveyQuestionScreen() {\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [answers, setAnswers] = useState([]);\n  const navigation = useNavigation();\n  const questions = [{\n    question: \"How often do you feel the need to be constantly moving or fidgeting?\",\n    options: [\"Almost Always\", \"Frequently\", \"Occationally\", \"Rarely\"]\n  }, {\n    question: \"How often do you act on impulse without considering the consequences?\",\n    options: [\"Almost Always\", \"Frequently\", \"Occationally\", \"Rarely\"]\n  }, {\n    question: \"How often do you find it difficult to stay focused on tasks or conversations?\",\n    options: [\"Almost Always\", \"Frequently\", \"Occationally\", \"Rarely\"]\n  }, {\n    question: \"How often do you feel restless or have difficulty sitting still for extended periods?\",\n    options: [\"Almost Always\", \"Frequently\", \"Occationally\", \"Rarely\"]\n  }];\n  const handleOptionPress = option => {\n    const newAnswers = [...answers];\n    newAnswers[currentQuestion] = option;\n    setAnswers(newAnswers);\n    if (currentQuestion < questions.length - 1) {\n      setCurrentQuestion(currentQuestion + 1);\n    } else {\n      handleSubmit(newAnswers);\n    }\n  };\n  const handleSubmit = async answers => {\n    const data = {\n      question_1: {\n        options: answers[0]\n      },\n      question_2: {\n        options: answers[1]\n      },\n      question_3: {\n        options: answers[2]\n      },\n      question_4: {\n        options: answers[3]\n      }\n    };\n    try {\n      const response = await api.post('/api/v1/surveys/submit', data);\n      console.log('Survey response:', response);\n      if (response.status === 200) {\n        Alert.alert('Success', 'Survey submitted successfully');\n        navigation.navigate('HomeScreen');\n      } else {\n        Alert.alert('Survey submission failed', response.data.message || 'Unknown error');\n      }\n    } catch (error) {\n      console.error('Survey submission error:', error);\n      Alert.alert('Error', 'Something went wrong. Please try again.');\n    }\n  };\n  return _jsxDEV(View, {\n    children: [_jsxDEV(Text, {\n      fontWeight: \"bold\",\n      children: [\"Survey \", currentQuestion + 1]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), _jsxDEV(FormControl, {\n      p: \"$4\",\n      borderWidth: \"$1\",\n      borderRadius: \"$lg\",\n      borderColor: \"$borderLight300\",\n      \"$dark-borderWidth\": \"$1\",\n      \"$dark-borderRadius\": \"$lg\",\n      \"$dark-borderColor\": \"$borderDark800\",\n      children: _jsxDEV(VStack, {\n        space: \"xl\",\n        children: [_jsxDEV(Heading, {\n          color: \"$text900\",\n          lineHeight: \"$md\",\n          children: questions[currentQuestion].question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this), questions[currentQuestion].options.map(option => _jsxDEV(Button, {\n          backgroundColor: answers[currentQuestion] === option ? '$blue' : '$gray300',\n          onPress: () => handleOptionPress(option),\n          children: _jsxDEV(ButtonText, {\n            children: option\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 15\n          }, this)\n        }, option, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\nexport default SurveyQuestionScreen;","map":{"version":3,"names":["EyeIcon","ButtonText","FormControl","Heading","VStack","Button","React","useState","View","Text","useNavigation","Alert","api","jsxDEV","_jsxDEV","SurveyQuestionScreen","currentQuestion","setCurrentQuestion","answers","setAnswers","navigation","questions","question","options","handleOptionPress","option","newAnswers","length","handleSubmit","data","question_1","question_2","question_3","question_4","response","post","console","log","status","alert","navigate","message","error","children","fontWeight","fileName","_jsxFileName","lineNumber","columnNumber","p","borderWidth","borderRadius","borderColor","space","color","lineHeight","map","backgroundColor","onPress"],"sources":["/Users/farhang/Desktop/June 17 /Front/Getchup_FrontEnd/src/screens/profile/SurveyQuestionScreen.jsx"],"sourcesContent":["import { EyeIcon, ButtonText, FormControl, Heading, VStack, Button } from '@gluestack-ui/themed';\nimport React, { useState } from 'react';\nimport { View, Text } from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\nimport { Alert } from 'react-native';\nimport api from '../../../api'; \n\nfunction SurveyQuestionScreen() {\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [answers, setAnswers] = useState([]);\n  const navigation = useNavigation();\n\n  const questions = [\n    {\n      question: \"How often do you feel the need to be constantly moving or fidgeting?\",\n      options: [\"Almost Always\", \"Frequently\", \"Occationally\", \"Rarely\"]\n    },\n    {\n      question: \"How often do you act on impulse without considering the consequences?\",\n      options: [\"Almost Always\", \"Frequently\", \"Occationally\", \"Rarely\"]\n    },\n    {\n      question: \"How often do you find it difficult to stay focused on tasks or conversations?\",\n      options: [\"Almost Always\", \"Frequently\", \"Occationally\", \"Rarely\"]\n    },\n    {\n      question: \"How often do you feel restless or have difficulty sitting still for extended periods?\",\n      options: [\"Almost Always\", \"Frequently\", \"Occationally\", \"Rarely\"]\n    }\n  ];\n\n  const handleOptionPress = (option) => {\n    const newAnswers = [...answers];\n    newAnswers[currentQuestion] = option;\n    setAnswers(newAnswers);\n\n    if (currentQuestion < questions.length - 1) {\n      setCurrentQuestion(currentQuestion + 1);\n    } else {\n      handleSubmit(newAnswers);\n    }\n  };\n\n  const handleSubmit = async (answers) => {\n    const data = {\n      question_1: { options: answers[0] },\n      question_2: { options: answers[1] },\n      question_3: { options: answers[2] },\n      question_4: { options: answers[3] }\n    };\n\n    try {\n      const response = await api.post('/api/v1/surveys/submit', data);\n      console.log('Survey response:', response);\n      if (response.status === 200) {\n        Alert.alert('Success', 'Survey submitted successfully');\n        navigation.navigate('HomeScreen'); // Navigate to the home screen or any other screen\n      } else {\n        Alert.alert('Survey submission failed', response.data.message || 'Unknown error');\n      }\n    } catch (error) {\n      console.error('Survey submission error:', error);\n      Alert.alert('Error', 'Something went wrong. Please try again.');\n    }\n  };\n\n  return (\n    <View>\n      <Text fontWeight=\"bold\">Survey {currentQuestion + 1}</Text>\n      <FormControl\n        p=\"$4\"\n        borderWidth=\"$1\"\n        borderRadius=\"$lg\"\n        borderColor=\"$borderLight300\"\n        $dark-borderWidth=\"$1\"\n        $dark-borderRadius=\"$lg\"\n        $dark-borderColor=\"$borderDark800\"\n      >\n        <VStack space=\"xl\">\n          <Heading color=\"$text900\" lineHeight=\"$md\">\n            {questions[currentQuestion].question}\n          </Heading>\n\n          {questions[currentQuestion].options.map((option) => (\n            <Button\n              key={option}\n              backgroundColor={answers[currentQuestion] === option ? '$blue' : '$gray300'}\n              onPress={() => handleOptionPress(option)}\n            >\n              <ButtonText>{option}</ButtonText>\n            </Button>\n          ))}\n        </VStack>\n      </FormControl>\n    </View>\n  );\n}\n\nexport default SurveyQuestionScreen;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}