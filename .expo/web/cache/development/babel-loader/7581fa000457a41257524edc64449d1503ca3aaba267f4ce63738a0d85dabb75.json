{"ast":null,"code":"import { Selection as $e40ea825a81a3709$export$52baac22726c72bf } from \"./Selection.mjs\";\nimport { useControlledState as $6tM1y$useControlledState } from \"@react-stately/utils\";\nimport { useRef as $6tM1y$useRef, useState as $6tM1y$useState, useMemo as $6tM1y$useMemo, useEffect as $6tM1y$useEffect } from \"react\";\nfunction $7af3f5b51489e0b5$var$equalSets(setA, setB) {\n  if (setA.size !== setB.size) return false;\n  for (let item of setA) {\n    if (!setB.has(item)) return false;\n  }\n  return true;\n}\nfunction $7af3f5b51489e0b5$export$253fe78d46329472(props) {\n  let {\n    selectionMode = 'none',\n    disallowEmptySelection: disallowEmptySelection,\n    allowDuplicateSelectionEvents: allowDuplicateSelectionEvents,\n    selectionBehavior: selectionBehaviorProp = 'toggle',\n    disabledBehavior = 'all'\n  } = props;\n  let isFocusedRef = (0, $6tM1y$useRef)(false);\n  let [, setFocused] = (0, $6tM1y$useState)(false);\n  let focusedKeyRef = (0, $6tM1y$useRef)(null);\n  let childFocusStrategyRef = (0, $6tM1y$useRef)(null);\n  let [, setFocusedKey] = (0, $6tM1y$useState)(null);\n  let selectedKeysProp = (0, $6tM1y$useMemo)(() => $7af3f5b51489e0b5$var$convertSelection(props.selectedKeys), [props.selectedKeys]);\n  let defaultSelectedKeys = (0, $6tM1y$useMemo)(() => $7af3f5b51489e0b5$var$convertSelection(props.defaultSelectedKeys, new (0, $e40ea825a81a3709$export$52baac22726c72bf)()), [props.defaultSelectedKeys]);\n  let [selectedKeys, setSelectedKeys] = (0, $6tM1y$useControlledState)(selectedKeysProp, defaultSelectedKeys, props.onSelectionChange);\n  let disabledKeysProp = (0, $6tM1y$useMemo)(() => props.disabledKeys ? new Set(props.disabledKeys) : new Set(), [props.disabledKeys]);\n  let [selectionBehavior, setSelectionBehavior] = (0, $6tM1y$useState)(selectionBehaviorProp);\n  if (selectionBehaviorProp === 'replace' && selectionBehavior === 'toggle' && typeof selectedKeys === 'object' && selectedKeys.size === 0) setSelectionBehavior('replace');\n  let lastSelectionBehavior = (0, $6tM1y$useRef)(selectionBehaviorProp);\n  (0, $6tM1y$useEffect)(() => {\n    if (selectionBehaviorProp !== lastSelectionBehavior.current) {\n      setSelectionBehavior(selectionBehaviorProp);\n      lastSelectionBehavior.current = selectionBehaviorProp;\n    }\n  }, [selectionBehaviorProp]);\n  return {\n    selectionMode: selectionMode,\n    disallowEmptySelection: disallowEmptySelection,\n    selectionBehavior: selectionBehavior,\n    setSelectionBehavior: setSelectionBehavior,\n    get isFocused() {\n      return isFocusedRef.current;\n    },\n    setFocused(f) {\n      isFocusedRef.current = f;\n      setFocused(f);\n    },\n    get focusedKey() {\n      return focusedKeyRef.current;\n    },\n    get childFocusStrategy() {\n      return childFocusStrategyRef.current;\n    },\n    setFocusedKey(k, childFocusStrategy = 'first') {\n      focusedKeyRef.current = k;\n      childFocusStrategyRef.current = childFocusStrategy;\n      setFocusedKey(k);\n    },\n    selectedKeys: selectedKeys,\n    setSelectedKeys(keys) {\n      if (allowDuplicateSelectionEvents || !$7af3f5b51489e0b5$var$equalSets(keys, selectedKeys)) setSelectedKeys(keys);\n    },\n    disabledKeys: disabledKeysProp,\n    disabledBehavior: disabledBehavior\n  };\n}\nfunction $7af3f5b51489e0b5$var$convertSelection(selection, defaultValue) {\n  if (!selection) return defaultValue;\n  return selection === 'all' ? 'all' : new (0, $e40ea825a81a3709$export$52baac22726c72bf)(selection);\n}\nexport { $7af3f5b51489e0b5$export$253fe78d46329472 as useMultipleSelectionState };","map":{"version":3,"names":["$7af3f5b51489e0b5$var$equalSets","setA","setB","size","item","has","$7af3f5b51489e0b5$export$253fe78d46329472","props","selectionMode","disallowEmptySelection","allowDuplicateSelectionEvents","selectionBehavior","selectionBehaviorProp","disabledBehavior","isFocusedRef","$6tM1y$useRef","setFocused","$6tM1y$useState","focusedKeyRef","childFocusStrategyRef","setFocusedKey","selectedKeysProp","$6tM1y$useMemo","$7af3f5b51489e0b5$var$convertSelection","selectedKeys","defaultSelectedKeys","$e40ea825a81a3709$export$52baac22726c72bf","setSelectedKeys","$6tM1y$useControlledState","onSelectionChange","disabledKeysProp","disabledKeys","Set","setSelectionBehavior","lastSelectionBehavior","$6tM1y$useEffect","current","isFocused","f","focusedKey","childFocusStrategy","k","keys","selection","defaultValue"],"sources":["/Users/farhang/Desktop/June 17 /Front/Getchup_FrontEnd/node_modules/@react-stately/selection/dist/packages/@react-stately/selection/src/useMultipleSelectionState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DisabledBehavior, Key, MultipleSelection, SelectionBehavior, SelectionMode} from '@react-types/shared';\nimport {MultipleSelectionState} from './types';\nimport {Selection} from './Selection';\nimport {useControlledState} from '@react-stately/utils';\nimport {useEffect, useMemo, useRef, useState} from 'react';\n\nfunction equalSets(setA, setB) {\n  if (setA.size !== setB.size) {\n    return false;\n  }\n\n  for (let item of setA) {\n    if (!setB.has(item)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport interface MultipleSelectionStateProps extends MultipleSelection {\n  /** How multiple selection should behave in the collection. */\n  selectionBehavior?: SelectionBehavior,\n  /** Whether onSelectionChange should fire even if the new set of keys is the same as the last. */\n  allowDuplicateSelectionEvents?: boolean,\n  /** Whether `disabledKeys` applies to all interactions, or only selection. */\n  disabledBehavior?: DisabledBehavior\n}\n\n/**\n * Manages state for multiple selection and focus in a collection.\n */\nexport function useMultipleSelectionState(props: MultipleSelectionStateProps): MultipleSelectionState {\n  let {\n    selectionMode = 'none' as SelectionMode,\n    disallowEmptySelection,\n    allowDuplicateSelectionEvents,\n    selectionBehavior: selectionBehaviorProp = 'toggle',\n    disabledBehavior = 'all'\n  } = props;\n\n  // We want synchronous updates to `isFocused` and `focusedKey` after their setters are called.\n  // But we also need to trigger a react re-render. So, we have both a ref (sync) and state (async).\n  let isFocusedRef = useRef(false);\n  let [, setFocused] = useState(false);\n  let focusedKeyRef = useRef(null);\n  let childFocusStrategyRef = useRef(null);\n  let [, setFocusedKey] = useState(null);\n  let selectedKeysProp = useMemo(() => convertSelection(props.selectedKeys), [props.selectedKeys]);\n  let defaultSelectedKeys = useMemo(() => convertSelection(props.defaultSelectedKeys, new Selection()), [props.defaultSelectedKeys]);\n  let [selectedKeys, setSelectedKeys] = useControlledState(\n    selectedKeysProp,\n    defaultSelectedKeys,\n    props.onSelectionChange\n  );\n  let disabledKeysProp = useMemo(() =>\n    props.disabledKeys ? new Set(props.disabledKeys) : new Set<Key>()\n  , [props.disabledKeys]);\n  let [selectionBehavior, setSelectionBehavior] = useState(selectionBehaviorProp);\n\n  // If the selectionBehavior prop is set to replace, but the current state is toggle (e.g. due to long press\n  // to enter selection mode on touch), and the selection becomes empty, reset the selection behavior.\n  if (selectionBehaviorProp === 'replace' && selectionBehavior === 'toggle' && typeof selectedKeys === 'object' && selectedKeys.size === 0) {\n    setSelectionBehavior('replace');\n  }\n\n  // If the selectionBehavior prop changes, update the state as well.\n  let lastSelectionBehavior = useRef(selectionBehaviorProp);\n  useEffect(() => {\n    if (selectionBehaviorProp !== lastSelectionBehavior.current) {\n      setSelectionBehavior(selectionBehaviorProp);\n      lastSelectionBehavior.current = selectionBehaviorProp;\n    }\n  }, [selectionBehaviorProp]);\n\n  return {\n    selectionMode,\n    disallowEmptySelection,\n    selectionBehavior,\n    setSelectionBehavior,\n    get isFocused() {\n      return isFocusedRef.current;\n    },\n    setFocused(f) {\n      isFocusedRef.current = f;\n      setFocused(f);\n    },\n    get focusedKey() {\n      return focusedKeyRef.current;\n    },\n    get childFocusStrategy() {\n      return childFocusStrategyRef.current;\n    },\n    setFocusedKey(k, childFocusStrategy = 'first') {\n      focusedKeyRef.current = k;\n      childFocusStrategyRef.current = childFocusStrategy;\n      setFocusedKey(k);\n    },\n    selectedKeys,\n    setSelectedKeys(keys) {\n      if (allowDuplicateSelectionEvents || !equalSets(keys, selectedKeys)) {\n        setSelectedKeys(keys);\n      }\n    },\n    disabledKeys: disabledKeysProp,\n    disabledBehavior\n  };\n}\n\nfunction convertSelection(selection: 'all' | Iterable<Key>, defaultValue?: Selection): 'all' | Set<Key> {\n  if (!selection) {\n    return defaultValue;\n  }\n\n  return selection === 'all'\n    ? 'all'\n    : new Selection(selection);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}