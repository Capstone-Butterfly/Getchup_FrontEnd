{"ast":null,"code":"export const useAccordion = props => {\n  const {\n    type,\n    isCollapsible,\n    selectedValues,\n    setSelectedValues\n  } = props;\n  const toggleItem = (itemValue, isDisabled = false) => {\n    if (isDisabled || !itemValue) return;\n    if (type === 'single') {\n      if (isCollapsible) {\n        if (selectedValues.includes(itemValue)) {\n          setSelectedValues([]);\n        } else {\n          setSelectedValues([itemValue]);\n        }\n      } else {\n        if (selectedValues.includes(itemValue)) return;\n        setSelectedValues([itemValue]);\n      }\n    } else {\n      if (isCollapsible) {\n        if (selectedValues.includes(itemValue)) {\n          setSelectedValues(selectedValues.filter(v => v !== itemValue));\n        } else {\n          setSelectedValues([...selectedValues, itemValue]);\n        }\n      } else {\n        if (selectedValues.includes(itemValue)) return;\n        setSelectedValues([...selectedValues, itemValue]);\n      }\n    }\n  };\n  return {\n    state: {\n      selectedValues,\n      toggleItem\n    }\n  };\n};","map":{"version":3,"names":["useAccordion","props","type","isCollapsible","selectedValues","setSelectedValues","toggleItem","itemValue","isDisabled","includes","filter","v","state"],"sources":["/Users/farhang/Desktop/June 17 /Front/Getchup_FrontEnd/node_modules/@react-native-aria/accordion/lib/module/useAccordion.ts"],"sourcesContent":["type Props = {\n  type: 'single' | 'multiple';\n  isCollapsible: boolean;\n  selectedValues: string[];\n  setSelectedValues: (values: string[]) => void;\n};\n\nexport const useAccordion = (props: Props) => {\n  const { type, isCollapsible, selectedValues, setSelectedValues } = props;\n\n  /*\n   * The toggleItem function is responsible for updating the selected values\n   * based on the type of accordion (single or multiple) and whether or not\n   * the accordion is collapsible.\n   */\n  const toggleItem = (itemValue: string, isDisabled = false) => {\n    if (isDisabled || !itemValue) return;\n\n    if (type === 'single') {\n      if (isCollapsible) {\n        if (selectedValues.includes(itemValue)) {\n          setSelectedValues([]);\n        } else {\n          setSelectedValues([itemValue]);\n        }\n      } else {\n        if (selectedValues.includes(itemValue)) return;\n        setSelectedValues([itemValue]);\n      }\n    } else {\n      if (isCollapsible) {\n        if (selectedValues.includes(itemValue)) {\n          setSelectedValues(selectedValues.filter((v) => v !== itemValue));\n        } else {\n          setSelectedValues([...selectedValues, itemValue]);\n        }\n      } else {\n        if (selectedValues.includes(itemValue)) return;\n        setSelectedValues([...selectedValues, itemValue]);\n      }\n    }\n  };\n\n  return {\n    state: {\n      selectedValues,\n      toggleItem,\n    },\n  };\n};\n"],"mappings":"AAOA,OAAO,MAAMA,YAAY,GAAIC,KAAD,IAAkB;EAC5C,MAAM;IAAEC,IAAF;IAAQC,aAAR;IAAuBC,cAAvB;IAAuCC;EAAvC,IAA6DJ,KAAnE;EAOA,MAAMK,UAAU,GAAGA,CAACC,SAAD,EAAoBC,UAAU,GAAG,KAAjC,KAA2C;IAC5D,IAAIA,UAAU,IAAI,CAACD,SAAnB,EAA8B;IAE9B,IAAIL,IAAI,KAAK,QAAb,EAAuB;MACrB,IAAIC,aAAJ,EAAmB;QACjB,IAAIC,cAAc,CAACK,QAAf,CAAwBF,SAAxB,CAAJ,EAAwC;UACtCF,iBAAiB,CAAC,EAAD,CAAjB;QACD,CAFD,MAEO;UACLA,iBAAiB,CAAC,CAACE,SAAD,CAAD,CAAjB;QACD;MACF,CAND,MAMO;QACL,IAAIH,cAAc,CAACK,QAAf,CAAwBF,SAAxB,CAAJ,EAAwC;QACxCF,iBAAiB,CAAC,CAACE,SAAD,CAAD,CAAjB;MACD;IACF,CAXD,MAWO;MACL,IAAIJ,aAAJ,EAAmB;QACjB,IAAIC,cAAc,CAACK,QAAf,CAAwBF,SAAxB,CAAJ,EAAwC;UACtCF,iBAAiB,CAACD,cAAc,CAACM,MAAf,CAAuBC,CAAD,IAAOA,CAAC,KAAKJ,SAAnC,CAAD,CAAjB;QACD,CAFD,MAEO;UACLF,iBAAiB,CAAC,CAAC,GAAGD,cAAJ,EAAoBG,SAApB,CAAD,CAAjB;QACD;MACF,CAND,MAMO;QACL,IAAIH,cAAc,CAACK,QAAf,CAAwBF,SAAxB,CAAJ,EAAwC;QACxCF,iBAAiB,CAAC,CAAC,GAAGD,cAAJ,EAAoBG,SAApB,CAAD,CAAjB;MACD;IACF;EACF,CA1BD;EA4BA,OAAO;IACLK,KAAK,EAAE;MACLR,cADK;MAELE;IAFK;EADF,CAAP;AAMD,CA1CM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}