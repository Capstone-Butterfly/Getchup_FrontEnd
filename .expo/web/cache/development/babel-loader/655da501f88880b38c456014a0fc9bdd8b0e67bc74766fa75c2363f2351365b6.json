{"ast":null,"code":"import $6Fm0V$react from \"react\";\nfunction $c1d7fb2ec91bae71$var$Item(props) {\n  return null;\n}\n$c1d7fb2ec91bae71$var$Item.getCollectionNode = function* getCollectionNode(props, context) {\n  let {\n    childItems: childItems,\n    title: title,\n    children: children\n  } = props;\n  let rendered = props.title || props.children;\n  let textValue = props.textValue || (typeof rendered === 'string' ? rendered : '') || props['aria-label'] || '';\n  if (!textValue && !(context === null || context === void 0 ? void 0 : context.suppressTextValueWarning)) console.warn('<Item> with non-plain text contents is unsupported by type to select for accessibility. Please add a `textValue` prop.');\n  yield {\n    type: 'item',\n    props: props,\n    rendered: rendered,\n    textValue: textValue,\n    'aria-label': props['aria-label'],\n    hasChildNodes: $c1d7fb2ec91bae71$var$hasChildItems(props),\n    *childNodes() {\n      if (childItems) for (let child of childItems) yield {\n        type: 'item',\n        value: child\n      };else if (title) {\n        let items = [];\n        (0, $6Fm0V$react).Children.forEach(children, child => {\n          items.push({\n            type: 'item',\n            element: child\n          });\n        });\n        yield* items;\n      }\n    }\n  };\n};\nfunction $c1d7fb2ec91bae71$var$hasChildItems(props) {\n  if (props.hasChildItems != null) return props.hasChildItems;\n  if (props.childItems) return true;\n  if (props.title && (0, $6Fm0V$react).Children.count(props.children) > 0) return true;\n  return false;\n}\nlet $c1d7fb2ec91bae71$export$6d08773d2e66f8f2 = $c1d7fb2ec91bae71$var$Item;\nexport { $c1d7fb2ec91bae71$export$6d08773d2e66f8f2 as Item };","map":{"version":3,"names":["$c1d7fb2ec91bae71$var$Item","props","getCollectionNode","context","childItems","title","children","rendered","textValue","suppressTextValueWarning","console","warn","type","hasChildNodes","$c1d7fb2ec91bae71$var$hasChildItems","childNodes","child","value","items","$6Fm0V$react","Children","forEach","push","element","hasChildItems","count","$c1d7fb2ec91bae71$export$6d08773d2e66f8f2"],"sources":["/Users/farhang/Desktop/June 17 /Front/Getchup_FrontEnd/node_modules/@react-stately/collections/dist/packages/@react-stately/collections/src/Item.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {ItemElement, ItemProps} from '@react-types/shared';\nimport {PartialNode} from './types';\nimport React, {JSX, ReactElement} from 'react';\n\nfunction Item<T>(props: ItemProps<T>): ReactElement { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null;\n}\n\nItem.getCollectionNode = function* getCollectionNode<T>(props: ItemProps<T>, context: any): Generator<PartialNode<T>> {\n  let {childItems, title, children} = props;\n\n  let rendered = props.title || props.children;\n  let textValue = props.textValue || (typeof rendered === 'string' ? rendered : '') || props['aria-label'] || '';\n\n  // suppressTextValueWarning is used in components like Tabs, which don't have type to select support.\n  if (!textValue && !context?.suppressTextValueWarning) {\n    console.warn('<Item> with non-plain text contents is unsupported by type to select for accessibility. Please add a `textValue` prop.');\n  }\n\n  yield {\n    type: 'item',\n    props: props,\n    rendered,\n    textValue,\n    'aria-label': props['aria-label'],\n    hasChildNodes: hasChildItems(props),\n    *childNodes() {\n      if (childItems) {\n        for (let child of childItems) {\n          yield {\n            type: 'item',\n            value: child\n          };\n        }\n      } else if (title) {\n        let items: PartialNode<T>[] = [];\n        React.Children.forEach(children, child => {\n          items.push({\n            type: 'item',\n            element: child as ItemElement<T>\n          });\n        });\n\n        yield* items;\n      }\n    }\n  };\n};\n\nfunction hasChildItems<T>(props: ItemProps<T>) {\n  if (props.hasChildItems != null) {\n    return props.hasChildItems;\n  }\n\n  if (props.childItems) {\n    return true;\n  }\n\n  if (props.title && React.Children.count(props.children) > 0) {\n    return true;\n  }\n\n  return false;\n}\n\n// We don't want getCollectionNode to show up in the type definition\nlet _Item = Item as <T>(props: ItemProps<T>) => JSX.Element;\nexport {_Item as Item};\n"],"mappings":";AAgBA,SAASA,2BAAQC,KAAmB;EAClC,OAAO;AACT;AAEAD,0BAAA,CAAKE,iBAAiB,GAAG,UAAUA,kBAAqBD,KAAmB,EAAEE,OAAY;EACvF,IAAI;IAAAC,UAAA,EAACA,UAAU;IAAAC,KAAA,EAAEA,KAAK;IAAAC,QAAA,EAAEA;EAAQ,CAAC,GAAGL,KAAA;EAEpC,IAAIM,QAAA,GAAWN,KAAA,CAAMI,KAAK,IAAIJ,KAAA,CAAMK,QAAQ;EAC5C,IAAIE,SAAA,GAAYP,KAAA,CAAMO,SAAS,KAAK,OAAOD,QAAA,KAAa,WAAWA,QAAA,GAAW,EAAC,KAAMN,KAAK,CAAC,aAAa,IAAI;EAG5G,IAAI,CAACO,SAAA,IAAa,EAACL,OAAA,aAAAA,OAAA,uBAAAA,OAAA,CAASM,wBAAwB,GAClDC,OAAA,CAAQC,IAAI,CAAC;EAGf,MAAM;IACJC,IAAA,EAAM;IACNX,KAAA,EAAOA,KAAA;cACPM,QAAA;eACAC,SAAA;IACA,cAAcP,KAAK,CAAC,aAAa;IACjCY,aAAA,EAAeC,mCAAA,CAAcb,KAAA;IAC7B,CAACc,WAAA;MACC,IAAIX,UAAA,EACF,KAAK,IAAIY,KAAA,IAASZ,UAAA,EAChB,MAAM;QACJQ,IAAA,EAAM;QACNK,KAAA,EAAOD;MACT,OAEG,IAAIX,KAAA,EAAO;QAChB,IAAIa,KAAA,GAA0B,EAAE;QAChC,IAAAC,YAAI,EAAEC,QAAQ,CAACC,OAAO,CAACf,QAAA,EAAUU,KAAA;UAC/BE,KAAA,CAAMI,IAAI,CAAC;YACTV,IAAA,EAAM;YACNW,OAAA,EAASP;UACX;QACF;QAEA,OAAOE,KAAA;MACT;IACF;EACF;AACF;AAEA,SAASJ,oCAAiBb,KAAmB;EAC3C,IAAIA,KAAA,CAAMuB,aAAa,IAAI,MACzB,OAAOvB,KAAA,CAAMuB,aAAa;EAG5B,IAAIvB,KAAA,CAAMG,UAAU,EAClB,OAAO;EAGT,IAAIH,KAAA,CAAMI,KAAK,IAAI,IAAAc,YAAI,EAAEC,QAAQ,CAACK,KAAK,CAACxB,KAAA,CAAMK,QAAQ,IAAI,GACxD,OAAO;EAGT,OAAO;AACT;AAGA,IAAIoB,yCAAA,GAAQ1B,0BAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}