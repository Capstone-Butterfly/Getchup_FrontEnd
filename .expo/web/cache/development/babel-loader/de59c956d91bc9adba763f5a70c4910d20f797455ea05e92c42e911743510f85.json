{"ast":null,"code":"import { useRef as $dAE4Y$useRef } from \"react\";\nconst $fb3050f43d946246$var$TYPEAHEAD_DEBOUNCE_WAIT_MS = 1000;\nfunction $fb3050f43d946246$export$e32c88dfddc6e1d8(options) {\n  let {\n    keyboardDelegate: keyboardDelegate,\n    selectionManager: selectionManager,\n    onTypeSelect: onTypeSelect\n  } = options;\n  let state = (0, $dAE4Y$useRef)({\n    search: '',\n    timeout: null\n  }).current;\n  let onKeyDown = e => {\n    let character = $fb3050f43d946246$var$getStringForKey(e.key);\n    if (!character || e.ctrlKey || e.metaKey || !e.currentTarget.contains(e.target)) return;\n    if (character === ' ' && state.search.trim().length > 0) {\n      e.preventDefault();\n      if (!('continuePropagation' in e)) e.stopPropagation();\n    }\n    state.search += character;\n    let key = keyboardDelegate.getKeyForSearch(state.search, selectionManager.focusedKey);\n    if (key == null) key = keyboardDelegate.getKeyForSearch(state.search);\n    if (key != null) {\n      selectionManager.setFocusedKey(key);\n      if (onTypeSelect) onTypeSelect(key);\n    }\n    clearTimeout(state.timeout);\n    state.timeout = setTimeout(() => {\n      state.search = '';\n    }, $fb3050f43d946246$var$TYPEAHEAD_DEBOUNCE_WAIT_MS);\n  };\n  return {\n    typeSelectProps: {\n      onKeyDownCapture: keyboardDelegate.getKeyForSearch ? onKeyDown : null\n    }\n  };\n}\nfunction $fb3050f43d946246$var$getStringForKey(key) {\n  if (key.length === 1 || !/^[A-Z]/i.test(key)) return key;\n  return '';\n}\nexport { $fb3050f43d946246$export$e32c88dfddc6e1d8 as useTypeSelect };","map":{"version":3,"names":["$fb3050f43d946246$var$TYPEAHEAD_DEBOUNCE_WAIT_MS","$fb3050f43d946246$export$e32c88dfddc6e1d8","options","keyboardDelegate","selectionManager","onTypeSelect","state","$dAE4Y$useRef","search","timeout","current","onKeyDown","e","character","$fb3050f43d946246$var$getStringForKey","key","ctrlKey","metaKey","currentTarget","contains","target","trim","length","preventDefault","stopPropagation","getKeyForSearch","focusedKey","setFocusedKey","clearTimeout","setTimeout","typeSelectProps","onKeyDownCapture","test"],"sources":["/Users/farhang/Desktop/June 17 /Front/Getchup_FrontEnd/node_modules/@react-aria/selection/dist/packages/@react-aria/selection/src/useTypeSelect.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes, Key, KeyboardDelegate} from '@react-types/shared';\nimport {KeyboardEvent, useRef} from 'react';\nimport {MultipleSelectionManager} from '@react-stately/selection';\n\n/**\n * Controls how long to wait before clearing the typeahead buffer.\n */\nconst TYPEAHEAD_DEBOUNCE_WAIT_MS = 1000; // 1 second\n\nexport interface AriaTypeSelectOptions {\n  /**\n   * A delegate that returns collection item keys with respect to visual layout.\n   */\n  keyboardDelegate: KeyboardDelegate,\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager,\n  /**\n   * Called when an item is focused by typing.\n   */\n  onTypeSelect?: (key: Key) => void\n}\n\nexport interface TypeSelectAria {\n  /**\n   * Props to be spread on the owner of the options.\n   */\n  typeSelectProps: DOMAttributes\n}\n\n/**\n * Handles typeahead interactions with collections.\n */\nexport function useTypeSelect(options: AriaTypeSelectOptions): TypeSelectAria {\n  let {keyboardDelegate, selectionManager, onTypeSelect} = options;\n  let state = useRef({\n    search: '',\n    timeout: null\n  }).current;\n\n  let onKeyDown = (e: KeyboardEvent) => {\n    let character = getStringForKey(e.key);\n    if (!character || e.ctrlKey || e.metaKey || !e.currentTarget.contains(e.target as HTMLElement)) {\n      return;\n    }\n\n    // Do not propagate the Spacebar event if it's meant to be part of the search.\n    // When we time out, the search term becomes empty, hence the check on length.\n    // Trimming is to account for the case of pressing the Spacebar more than once,\n    // which should cycle through the selection/deselection of the focused item.\n    if (character === ' ' && state.search.trim().length > 0) {\n      e.preventDefault();\n      if (!('continuePropagation' in e)) {\n        e.stopPropagation();\n      }\n    }\n\n    state.search += character;\n\n    // Use the delegate to find a key to focus.\n    // Prioritize items after the currently focused item, falling back to searching the whole list.\n    let key = keyboardDelegate.getKeyForSearch(state.search, selectionManager.focusedKey);\n\n    // If no key found, search from the top.\n    if (key == null) {\n      key = keyboardDelegate.getKeyForSearch(state.search);\n    }\n\n    if (key != null) {\n      selectionManager.setFocusedKey(key);\n      if (onTypeSelect) {\n        onTypeSelect(key);\n      }\n    }\n\n    clearTimeout(state.timeout);\n    state.timeout = setTimeout(() => {\n      state.search = '';\n    }, TYPEAHEAD_DEBOUNCE_WAIT_MS);\n  };\n\n  return {\n    typeSelectProps: {\n      // Using a capturing listener to catch the keydown event before\n      // other hooks in order to handle the Spacebar event.\n      onKeyDownCapture: keyboardDelegate.getKeyForSearch ? onKeyDown : null\n    }\n  };\n}\n\nfunction getStringForKey(key: string) {\n  // If the key is of length 1, it is an ASCII value.\n  // Otherwise, if there are no ASCII characters in the key name,\n  // it is a Unicode character.\n  // See https://www.w3.org/TR/uievents-key/\n  if (key.length === 1 || !/^[A-Z]/i.test(key)) {\n    return key;\n  }\n\n  return '';\n}\n"],"mappings":";AAmBA,MAAMA,gDAAA,GAA6B;AA2B5B,SAASC,0CAAcC,OAA8B;EAC1D,IAAI;IAAAC,gBAAA,EAACA,gBAAgB;IAAAC,gBAAA,EAAEA,gBAAgB;IAAAC,YAAA,EAAEA;EAAY,CAAC,GAAGH,OAAA;EACzD,IAAII,KAAA,GAAQ,IAAAC,aAAK,EAAE;IACjBC,MAAA,EAAQ;IACRC,OAAA,EAAS;EACX,GAAGC,OAAO;EAEV,IAAIC,SAAA,GAAaC,CAAA;IACf,IAAIC,SAAA,GAAYC,qCAAA,CAAgBF,CAAA,CAAEG,GAAG;IACrC,IAAI,CAACF,SAAA,IAAaD,CAAA,CAAEI,OAAO,IAAIJ,CAAA,CAAEK,OAAO,IAAI,CAACL,CAAA,CAAEM,aAAa,CAACC,QAAQ,CAACP,CAAA,CAAEQ,MAAM,GAC5E;IAOF,IAAIP,SAAA,KAAc,OAAOP,KAAA,CAAME,MAAM,CAACa,IAAI,GAAGC,MAAM,GAAG,GAAG;MACvDV,CAAA,CAAEW,cAAc;MAChB,IAAI,EAAE,yBAAyBX,CAAA,GAC7BA,CAAA,CAAEY,eAAe;IAErB;IAEAlB,KAAA,CAAME,MAAM,IAAIK,SAAA;IAIhB,IAAIE,GAAA,GAAMZ,gBAAA,CAAiBsB,eAAe,CAACnB,KAAA,CAAME,MAAM,EAAEJ,gBAAA,CAAiBsB,UAAU;IAGpF,IAAIX,GAAA,IAAO,MACTA,GAAA,GAAMZ,gBAAA,CAAiBsB,eAAe,CAACnB,KAAA,CAAME,MAAM;IAGrD,IAAIO,GAAA,IAAO,MAAM;MACfX,gBAAA,CAAiBuB,aAAa,CAACZ,GAAA;MAC/B,IAAIV,YAAA,EACFA,YAAA,CAAaU,GAAA;IAEjB;IAEAa,YAAA,CAAatB,KAAA,CAAMG,OAAO;IAC1BH,KAAA,CAAMG,OAAO,GAAGoB,UAAA,CAAW;MACzBvB,KAAA,CAAME,MAAM,GAAG;IACjB,GAAGR,gDAAA;EACL;EAEA,OAAO;IACL8B,eAAA,EAAiB;MAGfC,gBAAA,EAAkB5B,gBAAA,CAAiBsB,eAAe,GAAGd,SAAA,GAAY;IACnE;EACF;AACF;AAEA,SAASG,sCAAgBC,GAAW;EAKlC,IAAIA,GAAA,CAAIO,MAAM,KAAK,KAAK,CAAC,UAAUU,IAAI,CAACjB,GAAA,GACtC,OAAOA,GAAA;EAGT,OAAO;AACT","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}