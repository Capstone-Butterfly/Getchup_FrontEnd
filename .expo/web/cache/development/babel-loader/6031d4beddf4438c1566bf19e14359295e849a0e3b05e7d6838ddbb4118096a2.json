{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nconst _excluded = [\"shouldFocusWrap\", \"onKeyDown\", \"onKeyUp\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { filterDOMProps as $ieN2F$filterDOMProps, mergeProps as $ieN2F$mergeProps } from \"@react-aria/utils\";\nimport { useSelectableList as $ieN2F$useSelectableList } from \"@react-aria/selection\";\nconst $d5336fe17ce95402$export$6f49b4016bfc8d56 = new WeakMap();\nfunction $d5336fe17ce95402$export$38eaa17faae8f579(props, state, ref) {\n  let {\n      shouldFocusWrap = true,\n      onKeyDown: onKeyDown,\n      onKeyUp: onKeyUp\n    } = props,\n    otherProps = _objectWithoutProperties(props, _excluded);\n  if (!props['aria-label'] && !props['aria-labelledby']) console.warn('An aria-label or aria-labelledby prop is required for accessibility.');\n  let domProps = (0, $ieN2F$filterDOMProps)(props, {\n    labelable: true\n  });\n  let {\n    listProps: listProps\n  } = (0, $ieN2F$useSelectableList)(_objectSpread(_objectSpread({}, otherProps), {}, {\n    ref: ref,\n    selectionManager: state.selectionManager,\n    collection: state.collection,\n    disabledKeys: state.disabledKeys,\n    shouldFocusWrap: shouldFocusWrap,\n    linkBehavior: 'override'\n  }));\n  $d5336fe17ce95402$export$6f49b4016bfc8d56.set(state, {\n    onClose: props.onClose,\n    onAction: props.onAction\n  });\n  return {\n    menuProps: (0, $ieN2F$mergeProps)(domProps, {\n      onKeyDown: onKeyDown,\n      onKeyUp: onKeyUp\n    }, _objectSpread(_objectSpread({\n      role: 'menu'\n    }, listProps), {}, {\n      onKeyDown: e => {\n        if (e.key !== 'Escape') listProps.onKeyDown(e);\n      }\n    }))\n  };\n}\nexport { $d5336fe17ce95402$export$6f49b4016bfc8d56 as menuData, $d5336fe17ce95402$export$38eaa17faae8f579 as useMenu };","map":{"version":3,"names":["$d5336fe17ce95402$export$6f49b4016bfc8d56","WeakMap","$d5336fe17ce95402$export$38eaa17faae8f579","props","state","ref","shouldFocusWrap","onKeyDown","onKeyUp","otherProps","_objectWithoutProperties","_excluded","console","warn","domProps","$ieN2F$filterDOMProps","labelable","listProps","$ieN2F$useSelectableList","_objectSpread","selectionManager","collection","disabledKeys","linkBehavior","set","onClose","onAction","menuProps","$ieN2F$mergeProps","role","e","key"],"sources":["/Users/farhang/Desktop/June 17 /Front/Getchup_FrontEnd/node_modules/@react-aria/menu/dist/packages/@react-aria/menu/src/useMenu.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaMenuProps} from '@react-types/menu';\nimport {DOMAttributes, Key, KeyboardDelegate, KeyboardEvents} from '@react-types/shared';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {RefObject} from 'react';\nimport {TreeState} from '@react-stately/tree';\nimport {useSelectableList} from '@react-aria/selection';\n\nexport interface MenuAria {\n  /** Props for the menu element. */\n  menuProps: DOMAttributes\n}\n\nexport interface AriaMenuOptions<T> extends Omit<AriaMenuProps<T>, 'children'>, KeyboardEvents {\n  /** Whether the menu uses virtual scrolling. */\n  isVirtualized?: boolean,\n\n  /**\n   * An optional keyboard delegate implementation for type to select,\n   * to override the default.\n   */\n  keyboardDelegate?: KeyboardDelegate\n}\n\ninterface MenuData {\n  onClose?: () => void,\n  onAction?: (key: Key) => void\n}\n\nexport const menuData = new WeakMap<TreeState<unknown>, MenuData>();\n\n/**\n * Provides the behavior and accessibility implementation for a menu component.\n * A menu displays a list of actions or options that a user can choose.\n * @param props - Props for the menu.\n * @param state - State for the menu, as returned by `useListState`.\n */\nexport function useMenu<T>(props: AriaMenuOptions<T>, state: TreeState<T>, ref: RefObject<HTMLElement>): MenuAria {\n  let {\n    shouldFocusWrap = true,\n    onKeyDown,\n    onKeyUp,\n    ...otherProps\n  } = props;\n\n  if (!props['aria-label'] && !props['aria-labelledby']) {\n    console.warn('An aria-label or aria-labelledby prop is required for accessibility.');\n  }\n\n  let domProps = filterDOMProps(props, {labelable: true});\n  let {listProps} = useSelectableList({\n    ...otherProps,\n    ref,\n    selectionManager: state.selectionManager,\n    collection: state.collection,\n    disabledKeys: state.disabledKeys,\n    shouldFocusWrap,\n    linkBehavior: 'override'\n  });\n\n  menuData.set(state, {\n    onClose: props.onClose,\n    onAction: props.onAction\n  });\n\n  return {\n    menuProps: mergeProps(domProps, {onKeyDown, onKeyUp}, {\n      role: 'menu',\n      ...listProps,\n      onKeyDown: (e) => {\n        // don't clear the menu selected keys if the user is presses escape since escape closes the menu\n        if (e.key !== 'Escape') {\n          listProps.onKeyDown(e);\n        }\n      }\n    })\n  };\n}\n"],"mappings":";;;;;;;AAwCO,MAAMA,yCAAA,GAAW,IAAIC,OAAA;AAQrB,SAASC,0CAAWC,KAAyB,EAAEC,KAAmB,EAAEC,GAA2B;EACpG,IAAI;MACFC,eAAA,GAAkB;MAAAC,SAAA,EAClBA,SAAS;MAAAC,OAAA,EACTA;IACG,CACJ,GAAGL,KAAA;IADCM,UAAA,GAAAC,wBAAA,CACDP,KAAA,EAAAQ,SAAA;EAEJ,IAAI,CAACR,KAAK,CAAC,aAAa,IAAI,CAACA,KAAK,CAAC,kBAAkB,EACnDS,OAAA,CAAQC,IAAI,CAAC;EAGf,IAAIC,QAAA,GAAW,IAAAC,qBAAa,EAAEZ,KAAA,EAAO;IAACa,SAAA,EAAW;EAAI;EACrD,IAAI;IAAAC,SAAA,EAACA;EAAS,CAAC,GAAG,IAAAC,wBAAgB,EAAAC,aAAA,CAAAA,aAAA,KAC7BV,UAAU;SACbJ,GAAA;IACAe,gBAAA,EAAkBhB,KAAA,CAAMgB,gBAAgB;IACxCC,UAAA,EAAYjB,KAAA,CAAMiB,UAAU;IAC5BC,YAAA,EAAclB,KAAA,CAAMkB,YAAY;qBAChChB,eAAA;IACAiB,YAAA,EAAc;EAAA,EAChB;EAEAvB,yCAAA,CAASwB,GAAG,CAACpB,KAAA,EAAO;IAClBqB,OAAA,EAAStB,KAAA,CAAMsB,OAAO;IACtBC,QAAA,EAAUvB,KAAA,CAAMuB;EAClB;EAEA,OAAO;IACLC,SAAA,EAAW,IAAAC,iBAAS,EAAEd,QAAA,EAAU;iBAACP,SAAA;eAAWC;IAAO,GAAAW,aAAA,CAAAA,aAAA;MACjDU,IAAA,EAAM;IAAA,GACHZ,SAAS;MACZV,SAAA,EAAYuB,CAAA;QAEV,IAAIA,CAAA,CAAEC,GAAG,KAAK,UACZd,SAAA,CAAUV,SAAS,CAACuB,CAAA;MAExB;IAAA,EACF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}