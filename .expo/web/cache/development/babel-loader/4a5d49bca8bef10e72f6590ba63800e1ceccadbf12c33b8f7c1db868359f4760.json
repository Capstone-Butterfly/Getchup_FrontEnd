{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { useCollator as $325a3faab7a68acd$export$a16aca283550c30d } from \"./useCollator.mjs\";\nimport { useCallback as $21ck9$useCallback, useMemo as $21ck9$useMemo } from \"react\";\nfunction $bb77f239b46e8c72$export$3274cf84b703fff(options) {\n  let collator = (0, $325a3faab7a68acd$export$a16aca283550c30d)(_objectSpread({\n    usage: 'search'\n  }, options));\n  let startsWith = (0, $21ck9$useCallback)((string, substring) => {\n    if (substring.length === 0) return true;\n    string = string.normalize('NFC');\n    substring = substring.normalize('NFC');\n    return collator.compare(string.slice(0, substring.length), substring) === 0;\n  }, [collator]);\n  let endsWith = (0, $21ck9$useCallback)((string, substring) => {\n    if (substring.length === 0) return true;\n    string = string.normalize('NFC');\n    substring = substring.normalize('NFC');\n    return collator.compare(string.slice(-substring.length), substring) === 0;\n  }, [collator]);\n  let contains = (0, $21ck9$useCallback)((string, substring) => {\n    if (substring.length === 0) return true;\n    string = string.normalize('NFC');\n    substring = substring.normalize('NFC');\n    let scan = 0;\n    let sliceLen = substring.length;\n    for (; scan + sliceLen <= string.length; scan++) {\n      let slice = string.slice(scan, scan + sliceLen);\n      if (collator.compare(substring, slice) === 0) return true;\n    }\n    return false;\n  }, [collator]);\n  return (0, $21ck9$useMemo)(() => ({\n    startsWith: startsWith,\n    endsWith: endsWith,\n    contains: contains\n  }), [startsWith, endsWith, contains]);\n}\nexport { $bb77f239b46e8c72$export$3274cf84b703fff as useFilter };","map":{"version":3,"names":["$bb77f239b46e8c72$export$3274cf84b703fff","options","collator","$325a3faab7a68acd$export$a16aca283550c30d","_objectSpread","usage","startsWith","$21ck9$useCallback","string","substring","length","normalize","compare","slice","endsWith","contains","scan","sliceLen","$21ck9$useMemo"],"sources":["/Users/farhang/Desktop/June 17 /Front/Getchup_FrontEnd/node_modules/@react-aria/i18n/dist/packages/@react-aria/i18n/src/useFilter.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {useCallback, useMemo} from 'react';\nimport {useCollator} from './useCollator';\n\nexport interface Filter {\n  /** Returns whether a string starts with a given substring. */\n  startsWith(string: string, substring: string): boolean,\n  /** Returns whether a string ends with a given substring. */\n  endsWith(string: string, substring: string): boolean,\n  /** Returns whether a string contains a given substring. */\n  contains(string: string, substring: string): boolean\n}\n\n/**\n * Provides localized string search functionality that is useful for filtering or matching items\n * in a list. Options can be provided to adjust the sensitivity to case, diacritics, and other parameters.\n */\nexport function useFilter(options?: Intl.CollatorOptions): Filter {\n  let collator = useCollator({\n    usage: 'search',\n    ...options\n  });\n\n  // TODO(later): these methods don't currently support the ignorePunctuation option.\n  let startsWith = useCallback((string, substring) => {\n    if (substring.length === 0) {\n      return true;\n    }\n\n    // Normalize both strings so we can slice safely\n    // TODO: take into account the ignorePunctuation option as well...\n    string = string.normalize('NFC');\n    substring = substring.normalize('NFC');\n    return collator.compare(string.slice(0, substring.length), substring) === 0;\n  }, [collator]);\n\n  let endsWith = useCallback((string, substring) => {\n    if (substring.length === 0) {\n      return true;\n    }\n\n    string = string.normalize('NFC');\n    substring = substring.normalize('NFC');\n    return collator.compare(string.slice(-substring.length), substring) === 0;\n  }, [collator]);\n\n  let contains = useCallback((string, substring) => {\n    if (substring.length === 0) {\n      return true;\n    }\n\n    string = string.normalize('NFC');\n    substring = substring.normalize('NFC');\n\n    let scan = 0;\n    let sliceLen = substring.length;\n    for (; scan + sliceLen <= string.length; scan++) {\n      let slice = string.slice(scan, scan + sliceLen);\n      if (collator.compare(substring, slice) === 0) {\n        return true;\n      }\n    }\n\n    return false;\n  }, [collator]);\n\n  return useMemo(() => ({\n    startsWith,\n    endsWith,\n    contains\n  }), [startsWith, endsWith, contains]);\n}\n"],"mappings":";;;;;AA4BO,SAASA,yCAAUC,OAA8B;EACtD,IAAIC,QAAA,GAAW,IAAAC,yCAAU,EAAAC,aAAA;IACvBC,KAAA,EAAO;EAAA,GACJJ,OAAO,CACZ;EAGA,IAAIK,UAAA,GAAa,IAAAC,kBAAU,EAAE,CAACC,MAAA,EAAQC,SAAA;IACpC,IAAIA,SAAA,CAAUC,MAAM,KAAK,GACvB,OAAO;IAKTF,MAAA,GAASA,MAAA,CAAOG,SAAS,CAAC;IAC1BF,SAAA,GAAYA,SAAA,CAAUE,SAAS,CAAC;IAChC,OAAOT,QAAA,CAASU,OAAO,CAACJ,MAAA,CAAOK,KAAK,CAAC,GAAGJ,SAAA,CAAUC,MAAM,GAAGD,SAAA,MAAe;EAC5E,GAAG,CAACP,QAAA,CAAS;EAEb,IAAIY,QAAA,GAAW,IAAAP,kBAAU,EAAE,CAACC,MAAA,EAAQC,SAAA;IAClC,IAAIA,SAAA,CAAUC,MAAM,KAAK,GACvB,OAAO;IAGTF,MAAA,GAASA,MAAA,CAAOG,SAAS,CAAC;IAC1BF,SAAA,GAAYA,SAAA,CAAUE,SAAS,CAAC;IAChC,OAAOT,QAAA,CAASU,OAAO,CAACJ,MAAA,CAAOK,KAAK,CAAC,CAACJ,SAAA,CAAUC,MAAM,GAAGD,SAAA,MAAe;EAC1E,GAAG,CAACP,QAAA,CAAS;EAEb,IAAIa,QAAA,GAAW,IAAAR,kBAAU,EAAE,CAACC,MAAA,EAAQC,SAAA;IAClC,IAAIA,SAAA,CAAUC,MAAM,KAAK,GACvB,OAAO;IAGTF,MAAA,GAASA,MAAA,CAAOG,SAAS,CAAC;IAC1BF,SAAA,GAAYA,SAAA,CAAUE,SAAS,CAAC;IAEhC,IAAIK,IAAA,GAAO;IACX,IAAIC,QAAA,GAAWR,SAAA,CAAUC,MAAM;IAC/B,OAAOM,IAAA,GAAOC,QAAA,IAAYT,MAAA,CAAOE,MAAM,EAAEM,IAAA,IAAQ;MAC/C,IAAIH,KAAA,GAAQL,MAAA,CAAOK,KAAK,CAACG,IAAA,EAAMA,IAAA,GAAOC,QAAA;MACtC,IAAIf,QAAA,CAASU,OAAO,CAACH,SAAA,EAAWI,KAAA,MAAW,GACzC,OAAO;IAEX;IAEA,OAAO;EACT,GAAG,CAACX,QAAA,CAAS;EAEb,OAAO,IAAAgB,cAAM,EAAE,OAAO;gBACpBZ,UAAA;cACAQ,QAAA;cACAC;EACF,IAAI,CAACT,UAAA,EAAYQ,QAAA,EAAUC,QAAA,CAAS;AACtC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}