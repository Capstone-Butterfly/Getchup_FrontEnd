{"ast":null,"code":"import $7GIZw$react from \"react\";\nfunction $70d70eb16ea48428$var$Row(props) {\n  return null;\n}\n$70d70eb16ea48428$var$Row.getCollectionNode = function* getCollectionNode(props, context) {\n  let {\n    children: children,\n    textValue: textValue,\n    UNSTABLE_childItems: UNSTABLE_childItems\n  } = props;\n  yield {\n    type: 'item',\n    props: props,\n    textValue: textValue,\n    'aria-label': props['aria-label'],\n    hasChildNodes: true,\n    *childNodes() {\n      if (context.showDragButtons) yield {\n        type: 'cell',\n        key: 'header-drag',\n        props: {\n          isDragButtonCell: true\n        }\n      };\n      if (context.showSelectionCheckboxes && context.selectionMode !== 'none') yield {\n        type: 'cell',\n        key: 'header',\n        props: {\n          isSelectionCell: true\n        }\n      };\n      if (typeof children === 'function') {\n        for (let column of context.columns) yield {\n          type: 'cell',\n          element: children(column.key),\n          key: column.key\n        };\n        if (UNSTABLE_childItems) for (let child of UNSTABLE_childItems) yield {\n          type: 'item',\n          value: child\n        };\n      } else {\n        let cells = [];\n        let childRows = [];\n        (0, $7GIZw$react).Children.forEach(children, node => {\n          if (node.type === $70d70eb16ea48428$var$Row) {\n            if (cells.length < context.columns.length) throw new Error('All of a Row\\'s child Cells must be positioned before any child Rows.');\n            childRows.push({\n              type: 'item',\n              element: node\n            });\n          } else cells.push({\n            type: 'cell',\n            element: node\n          });\n        });\n        if (cells.length !== context.columns.length) throw new Error(`Cell count must match column count. Found ${cells.length} cells and ${context.columns.length} columns.`);\n        yield* cells;\n        yield* childRows;\n      }\n    },\n    shouldInvalidate(newContext) {\n      return newContext.columns.length !== context.columns.length || newContext.columns.some((c, i) => c.key !== context.columns[i].key) || newContext.showSelectionCheckboxes !== context.showSelectionCheckboxes || newContext.showDragButtons !== context.showDragButtons || newContext.selectionMode !== context.selectionMode;\n    }\n  };\n};\nlet $70d70eb16ea48428$export$b59bdbef9ce70de2 = $70d70eb16ea48428$var$Row;\nexport { $70d70eb16ea48428$export$b59bdbef9ce70de2 as Row };","map":{"version":3,"names":["$70d70eb16ea48428$var$Row","props","getCollectionNode","context","children","textValue","UNSTABLE_childItems","type","hasChildNodes","childNodes","showDragButtons","key","isDragButtonCell","showSelectionCheckboxes","selectionMode","isSelectionCell","column","columns","element","child","value","cells","childRows","$7GIZw$react","Children","forEach","node","length","Error","push","shouldInvalidate","newContext","some","c","i","$70d70eb16ea48428$export$b59bdbef9ce70de2"],"sources":["/Users/farhang/Desktop/June 17 /Front/Getchup_FrontEnd/node_modules/@react-stately/table/dist/packages/@react-stately/table/src/Row.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CollectionBuilderContext} from './useTableState';\nimport {PartialNode} from '@react-stately/collections';\nimport React, {JSX, ReactElement} from 'react';\nimport {RowProps} from '@react-types/table';\n\nfunction Row<T>(props: RowProps<T>): ReactElement { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null;\n}\n\nRow.getCollectionNode = function* getCollectionNode<T>(props: RowProps<T>, context: CollectionBuilderContext<T>): Generator<PartialNode<T>> {\n  let {children, textValue, UNSTABLE_childItems} = props;\n\n  yield {\n    type: 'item',\n    props: props,\n    textValue,\n    'aria-label': props['aria-label'],\n    hasChildNodes: true,\n    *childNodes() {\n      // Process cells first\n      if (context.showDragButtons) {\n        yield {\n          type: 'cell',\n          key: 'header-drag', // this is combined with the row key by CollectionBuilder\n          props: {\n            isDragButtonCell: true\n          }\n        };\n      }\n\n      if (context.showSelectionCheckboxes && context.selectionMode !== 'none') {\n        yield {\n          type: 'cell',\n          key: 'header', // this is combined with the row key by CollectionBuilder\n          props: {\n            isSelectionCell: true\n          }\n        };\n      }\n\n      if (typeof children === 'function') {\n        for (let column of context.columns) {\n          yield {\n            type: 'cell',\n            element: children(column.key),\n            key: column.key // this is combined with the row key by CollectionBuilder\n          };\n        }\n\n        if (UNSTABLE_childItems) {\n          for (let child of UNSTABLE_childItems) {\n            // Note: in order to reuse the render function of TableBody for our child rows, we just need to yield a type and a value here. CollectionBuilder will then look up\n            // the parent renderer and use that to build the full node of this child row, using the value provided here to generate the cells\n            yield {\n              type: 'item',\n              value: child\n            };\n          }\n        }\n      } else {\n        let cells: PartialNode<T>[] = [];\n        let childRows: PartialNode<T>[] = [];\n        React.Children.forEach(children, node => {\n          if (node.type === Row) {\n            if (cells.length < context.columns.length) {\n              throw new Error('All of a Row\\'s child Cells must be positioned before any child Rows.');\n            }\n\n            childRows.push({\n              type: 'item',\n              element: node\n            });\n          } else {\n            cells.push({\n              type: 'cell',\n              element: node\n            });\n          }\n        });\n\n        if (cells.length !== context.columns.length) {\n          throw new Error(`Cell count must match column count. Found ${cells.length} cells and ${context.columns.length} columns.`);\n        }\n\n        yield* cells;\n        yield* childRows;\n      }\n    },\n    shouldInvalidate(newContext: CollectionBuilderContext<T>) {\n      // Invalidate all rows if the columns changed.\n      return newContext.columns.length !== context.columns.length ||\n        newContext.columns.some((c, i) => c.key !== context.columns[i].key) ||\n        newContext.showSelectionCheckboxes !== context.showSelectionCheckboxes ||\n        newContext.showDragButtons !== context.showDragButtons ||\n        newContext.selectionMode !== context.selectionMode;\n    }\n  };\n};\n\n/**\n * A Row represents a single item in a Table and contains Cell elements for each column.\n * Cells can be statically defined as children, or generated dynamically using a function\n * based on the columns defined in the TableHeader.\n */\n// We don't want getCollectionNode to show up in the type definition\nlet _Row = Row as <T>(props: RowProps<T>) => JSX.Element;\nexport {_Row as Row};\n"],"mappings":";AAiBA,SAASA,0BAAOC,KAAkB;EAChC,OAAO;AACT;AAEAD,yBAAA,CAAIE,iBAAiB,GAAG,UAAUA,kBAAqBD,KAAkB,EAAEE,OAAoC;EAC7G,IAAI;IAAAC,QAAA,EAACA,QAAQ;IAAAC,SAAA,EAAEA,SAAS;IAAAC,mBAAA,EAAEA;EAAmB,CAAC,GAAGL,KAAA;EAEjD,MAAM;IACJM,IAAA,EAAM;IACNN,KAAA,EAAOA,KAAA;eACPI,SAAA;IACA,cAAcJ,KAAK,CAAC,aAAa;IACjCO,aAAA,EAAe;IACf,CAACC,WAAA;MAEC,IAAIN,OAAA,CAAQO,eAAe,EACzB,MAAM;QACJH,IAAA,EAAM;QACNI,GAAA,EAAK;QACLV,KAAA,EAAO;UACLW,gBAAA,EAAkB;QACpB;MACF;MAGF,IAAIT,OAAA,CAAQU,uBAAuB,IAAIV,OAAA,CAAQW,aAAa,KAAK,QAC/D,MAAM;QACJP,IAAA,EAAM;QACNI,GAAA,EAAK;QACLV,KAAA,EAAO;UACLc,eAAA,EAAiB;QACnB;MACF;MAGF,IAAI,OAAOX,QAAA,KAAa,YAAY;QAClC,KAAK,IAAIY,MAAA,IAAUb,OAAA,CAAQc,OAAO,EAChC,MAAM;UACJV,IAAA,EAAM;UACNW,OAAA,EAASd,QAAA,CAASY,MAAA,CAAOL,GAAG;UAC5BA,GAAA,EAAKK,MAAA,CAAOL;QACd;QAGF,IAAIL,mBAAA,EACF,KAAK,IAAIa,KAAA,IAASb,mBAAA,EAGhB,MAAM;UACJC,IAAA,EAAM;UACNa,KAAA,EAAOD;QACT;MAGN,OAAO;QACL,IAAIE,KAAA,GAA0B,EAAE;QAChC,IAAIC,SAAA,GAA8B,EAAE;QACpC,IAAAC,YAAI,EAAEC,QAAQ,CAACC,OAAO,CAACrB,QAAA,EAAUsB,IAAA;UAC/B,IAAIA,IAAA,CAAKnB,IAAI,KAAKP,yBAAA,EAAK;YACrB,IAAIqB,KAAA,CAAMM,MAAM,GAAGxB,OAAA,CAAQc,OAAO,CAACU,MAAM,EACvC,MAAM,IAAIC,KAAA,CAAM;YAGlBN,SAAA,CAAUO,IAAI,CAAC;cACbtB,IAAA,EAAM;cACNW,OAAA,EAASQ;YACX;UACF,OACEL,KAAA,CAAMQ,IAAI,CAAC;YACTtB,IAAA,EAAM;YACNW,OAAA,EAASQ;UACX;QAEJ;QAEA,IAAIL,KAAA,CAAMM,MAAM,KAAKxB,OAAA,CAAQc,OAAO,CAACU,MAAM,EACzC,MAAM,IAAIC,KAAA,CAAM,6CAA6CP,KAAA,CAAMM,MAAM,cAAcxB,OAAA,CAAQc,OAAO,CAACU,MAAM,WAAW;QAG1H,OAAON,KAAA;QACP,OAAOC,SAAA;MACT;IACF;IACAQ,iBAAiBC,UAAuC;MAEtD,OAAOA,UAAA,CAAWd,OAAO,CAACU,MAAM,KAAKxB,OAAA,CAAQc,OAAO,CAACU,MAAM,IACzDI,UAAA,CAAWd,OAAO,CAACe,IAAI,CAAC,CAACC,CAAA,EAAGC,CAAA,KAAMD,CAAA,CAAEtB,GAAG,KAAKR,OAAA,CAAQc,OAAO,CAACiB,CAAA,CAAE,CAACvB,GAAG,KAClEoB,UAAA,CAAWlB,uBAAuB,KAAKV,OAAA,CAAQU,uBAAuB,IACtEkB,UAAA,CAAWrB,eAAe,KAAKP,OAAA,CAAQO,eAAe,IACtDqB,UAAA,CAAWjB,aAAa,KAAKX,OAAA,CAAQW,aAAa;IACtD;EACF;AACF;AAQA,IAAIqB,yCAAA,GAAOnC,yBAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}