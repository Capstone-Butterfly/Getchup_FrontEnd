{"ast":null,"code":"import getCss from 'dom-helpers/css';\nimport getOffset from 'dom-helpers/offset';\nimport getPosition from 'dom-helpers/position';\nimport getScrollLeft from 'dom-helpers/scrollLeft';\nimport getScrollTop from 'dom-helpers/scrollTop';\nimport ownerDocument from 'dom-helpers/ownerDocument';\nimport getComputedStyle from 'dom-helpers/getComputedStyle';\nconst AXIS = {\n  top: 'top',\n  bottom: 'top',\n  left: 'left',\n  right: 'left'\n};\nconst FLIPPED_DIRECTION = {\n  top: 'bottom',\n  bottom: 'top',\n  left: 'right',\n  right: 'left'\n};\nconst CROSS_AXIS = {\n  top: 'left',\n  left: 'top'\n};\nconst AXIS_SIZE = {\n  top: 'height',\n  left: 'width'\n};\nconst PARSED_PLACEMENT_CACHE = {};\nlet visualViewport = true && window.visualViewport;\nfunction getContainerDimensions(containerNode) {\n  let width = 0,\n    height = 0,\n    top = 0,\n    left = 0;\n  let scroll = {};\n  if (containerNode.tagName === 'BODY') {\n    width = (visualViewport === null || visualViewport === void 0 ? void 0 : visualViewport.width) ?? document.documentElement.clientWidth;\n    height = (visualViewport === null || visualViewport === void 0 ? void 0 : visualViewport.height) ?? document.documentElement.clientHeight;\n    scroll.top = getScrollTop(ownerDocument(containerNode).documentElement) || getScrollTop(containerNode);\n    scroll.left = getScrollLeft(ownerDocument(containerNode).documentElement) || getScrollLeft(containerNode);\n  } else {\n    ({\n      width,\n      height,\n      top,\n      left\n    } = getOffset(containerNode));\n    scroll.top = getScrollTop(containerNode);\n    scroll.left = getScrollLeft(containerNode);\n  }\n  return {\n    width,\n    height,\n    scroll,\n    top,\n    left\n  };\n}\nfunction getScroll(node) {\n  return {\n    top: node.scrollTop,\n    left: node.scrollLeft,\n    width: node.scrollWidth,\n    height: node.scrollHeight\n  };\n}\nfunction getDelta(axis, offset, size, containerDimensions, padding) {\n  let containerScroll = containerDimensions.scroll[axis];\n  let containerHeight = containerDimensions[AXIS_SIZE[axis]];\n  let startEdgeOffset = offset - padding - containerScroll;\n  let endEdgeOffset = offset + padding - containerScroll + size;\n  if (startEdgeOffset < 0) {\n    return -startEdgeOffset;\n  } else if (endEdgeOffset > containerHeight) {\n    return Math.max(containerHeight - endEdgeOffset, -startEdgeOffset);\n  } else {\n    return 0;\n  }\n}\nfunction getMargins(node) {\n  let style = window.getComputedStyle(node);\n  return {\n    top: parseInt(style.marginTop, 10) || 0,\n    bottom: parseInt(style.marginBottom, 10) || 0,\n    left: parseInt(style.marginLeft, 10) || 0,\n    right: parseInt(style.marginRight, 10) || 0\n  };\n}\nfunction parsePlacement(input) {\n  if (PARSED_PLACEMENT_CACHE[input]) {\n    return PARSED_PLACEMENT_CACHE[input];\n  }\n  let [placement, crossPlacement] = input.split(' ');\n  let axis = AXIS[placement] || 'right';\n  let crossAxis = CROSS_AXIS[axis];\n  if (!AXIS[crossPlacement]) {\n    crossPlacement = 'center';\n  }\n  let size = AXIS_SIZE[axis];\n  let crossSize = AXIS_SIZE[crossAxis];\n  PARSED_PLACEMENT_CACHE[input] = {\n    placement,\n    crossPlacement,\n    axis,\n    crossAxis,\n    size,\n    crossSize\n  };\n  return PARSED_PLACEMENT_CACHE[input];\n}\nfunction computePosition(childOffset, boundaryDimensions, overlaySize, placementInfo, offset, crossOffset, containerOffsetWithBoundary, isContainerPositioned) {\n  let {\n    placement,\n    crossPlacement,\n    axis,\n    crossAxis,\n    size,\n    crossSize\n  } = placementInfo;\n  let position = {};\n  position[crossAxis] = childOffset[crossAxis];\n  if (crossPlacement === 'center') {\n    position[crossAxis] += (childOffset[crossSize] - overlaySize[crossSize]) / 2;\n  } else if (crossPlacement !== crossAxis) {\n    position[crossAxis] += childOffset[crossSize] - overlaySize[crossSize];\n  }\n  position[crossAxis] += crossOffset;\n  if (placement === axis) {\n    const containerHeight = isContainerPositioned ? containerOffsetWithBoundary[size] : boundaryDimensions[size];\n    position[FLIPPED_DIRECTION[axis]] = Math.floor(containerHeight - childOffset[axis] + offset);\n  } else {\n    position[axis] = Math.floor(childOffset[axis] + childOffset[size] + offset);\n  }\n  return position;\n}\nfunction getMaxHeight(position, boundaryDimensions, containerOffsetWithBoundary, childOffset, margins, padding) {\n  return position.top != null ? Math.max(0, boundaryDimensions.height + boundaryDimensions.top + boundaryDimensions.scroll.top - (containerOffsetWithBoundary.top + position.top) - (margins.top + margins.bottom + padding)) : Math.max(0, childOffset.top + containerOffsetWithBoundary.top - (boundaryDimensions.top + boundaryDimensions.scroll.top) - (margins.top + margins.bottom + padding));\n}\nfunction getAvailableSpace(boundaryDimensions, containerOffsetWithBoundary, childOffset, margins, padding, placementInfo) {\n  let {\n    placement,\n    axis,\n    size\n  } = placementInfo;\n  if (placement === axis) {\n    return Math.max(0, childOffset[axis] - boundaryDimensions[axis] - boundaryDimensions.scroll[axis] + containerOffsetWithBoundary[axis] - margins[axis] - margins[FLIPPED_DIRECTION[axis]] - padding);\n  }\n  return Math.max(0, boundaryDimensions[size] + boundaryDimensions[axis] + boundaryDimensions.scroll[axis] - containerOffsetWithBoundary[axis] - childOffset[axis] - childOffset[size] - margins[axis] - margins[FLIPPED_DIRECTION[axis]] - padding);\n}\nexport function calculatePositionInternal(placementInput, childOffset, overlaySize, scrollSize, margins, padding, flip, boundaryDimensions, containerOffsetWithBoundary, offset, crossOffset, isContainerPositioned, shouldOverlapWithTrigger) {\n  let placementInfo = parsePlacement(placementInput);\n  let {\n    size,\n    crossAxis,\n    crossSize,\n    placement,\n    crossPlacement,\n    axis\n  } = placementInfo;\n  let position = computePosition(childOffset, boundaryDimensions, overlaySize, placementInfo, offset, crossOffset, containerOffsetWithBoundary, isContainerPositioned);\n  let normalizedOffset = offset;\n  let space = getAvailableSpace(boundaryDimensions, containerOffsetWithBoundary, childOffset, margins, padding + offset, placementInfo);\n  if (flip && scrollSize[size] > space) {\n    let flippedPlacementInfo = parsePlacement(`${FLIPPED_DIRECTION[placement]} ${crossPlacement}`);\n    let flippedPosition = computePosition(childOffset, boundaryDimensions, overlaySize, flippedPlacementInfo, offset, crossOffset, containerOffsetWithBoundary, isContainerPositioned);\n    let flippedSpace = getAvailableSpace(boundaryDimensions, containerOffsetWithBoundary, childOffset, margins, padding + offset, flippedPlacementInfo);\n    if (flippedSpace > space) {\n      placementInfo = flippedPlacementInfo;\n      position = flippedPosition;\n      normalizedOffset = offset;\n    }\n  }\n  let delta = getDelta(crossAxis, position[crossAxis], overlaySize[crossSize], boundaryDimensions, padding);\n  position[crossAxis] += delta;\n  let maxHeight = getMaxHeight(position, boundaryDimensions, containerOffsetWithBoundary, childOffset, margins, padding);\n  overlaySize.height = Math.min(overlaySize.height, maxHeight);\n  position = computePosition(childOffset, boundaryDimensions, overlaySize, placementInfo, normalizedOffset, crossOffset, containerOffsetWithBoundary, isContainerPositioned);\n  delta = getDelta(crossAxis, position[crossAxis], overlaySize[crossSize], boundaryDimensions, padding);\n  position[crossAxis] += delta;\n  let arrowPosition = {};\n  arrowPosition[crossAxis] = childOffset[crossAxis] - position[crossAxis] + childOffset[crossSize] / 2;\n  if (shouldOverlapWithTrigger) {\n    position[FLIPPED_DIRECTION[placementInfo.placement]] = position[FLIPPED_DIRECTION[placementInfo.placement]] - childOffset[size];\n  }\n  return {\n    position,\n    maxHeight: maxHeight,\n    arrowOffsetLeft: arrowPosition.left,\n    arrowOffsetTop: arrowPosition.top,\n    placement: placementInfo.placement\n  };\n}\nexport function calculatePosition(opts) {\n  let {\n    placement,\n    targetNode,\n    overlayNode,\n    scrollNode,\n    padding,\n    shouldFlip,\n    boundaryElement,\n    offset,\n    crossOffset,\n    shouldOverlapWithTrigger\n  } = opts;\n  let container = overlayNode.offsetParent || document.body;\n  let isBodyContainer = container.tagName === 'BODY';\n  const containerPositionStyle = window.getComputedStyle(container).position;\n  let isContainerPositioned = !!containerPositionStyle && containerPositionStyle !== 'static';\n  let childOffset = isBodyContainer ? getOffset(targetNode) : getPosition(targetNode, container);\n  if (!isBodyContainer) {\n    childOffset.top += parseInt(getCss(targetNode, 'marginTop'), 10) || 0;\n    childOffset.left += parseInt(getCss(targetNode, 'marginLeft'), 10) || 0;\n  }\n  let overlaySize = getOffset(overlayNode);\n  const matrix = getComputedStyle(overlayNode).getPropertyValue('transform');\n  const transform = matrix;\n  const regex = /matrix\\((-?\\d*\\.?\\d+),\\s*(-?\\d*\\.?\\d+),\\s*(-?\\d*\\.?\\d+),\\s*(-?\\d*\\.?\\d+),\\s*(-?\\d*\\.?\\d+),\\s*(-?\\d*\\.?\\d+)\\)/;\n  const matches = transform.match(regex);\n  let scaleX = 1;\n  let scaleY = 1;\n  if (matches) {\n    scaleX = parseFloat(matches[1]);\n    scaleY = parseFloat(matches[4]);\n    if (!scaleX || !Number.isFinite(scaleX)) {\n      scaleX = 1;\n    }\n    if (!scaleY || !Number.isFinite(scaleY)) {\n      scaleY = 1;\n    }\n  }\n  let margins = getMargins(overlayNode);\n  overlaySize.width += margins.left + margins.right;\n  overlaySize.height += margins.top + margins.bottom;\n  if (scaleX) {\n    overlaySize.width = overlaySize.width / scaleX;\n  }\n  if (scaleY) {\n    overlaySize.height = overlaySize.height / scaleY;\n  }\n  let scrollSize = getScroll(scrollNode);\n  let boundaryDimensions = getContainerDimensions(boundaryElement);\n  let containerOffsetWithBoundary = boundaryElement.tagName === 'BODY' ? getOffset(container) : getPosition(container, boundaryElement);\n  return calculatePositionInternal(placement, childOffset, overlaySize, scrollSize, margins, padding, shouldFlip, boundaryDimensions, containerOffsetWithBoundary, offset, crossOffset, isContainerPositioned, shouldOverlapWithTrigger);\n}","map":{"version":3,"names":["getCss","getOffset","getPosition","getScrollLeft","getScrollTop","ownerDocument","getComputedStyle","AXIS","top","bottom","left","right","FLIPPED_DIRECTION","CROSS_AXIS","AXIS_SIZE","PARSED_PLACEMENT_CACHE","visualViewport","window","getContainerDimensions","containerNode","width","height","scroll","tagName","document","documentElement","clientWidth","clientHeight","getScroll","node","scrollTop","scrollLeft","scrollWidth","scrollHeight","getDelta","axis","offset","size","containerDimensions","padding","containerScroll","containerHeight","startEdgeOffset","endEdgeOffset","Math","max","getMargins","style","parseInt","marginTop","marginBottom","marginLeft","marginRight","parsePlacement","input","placement","crossPlacement","split","crossAxis","crossSize","computePosition","childOffset","boundaryDimensions","overlaySize","placementInfo","crossOffset","containerOffsetWithBoundary","isContainerPositioned","position","floor","getMaxHeight","margins","getAvailableSpace","calculatePositionInternal","placementInput","scrollSize","flip","shouldOverlapWithTrigger","normalizedOffset","space","flippedPlacementInfo","flippedPosition","flippedSpace","delta","maxHeight","min","arrowPosition","arrowOffsetLeft","arrowOffsetTop","calculatePosition","opts","targetNode","overlayNode","scrollNode","shouldFlip","boundaryElement","container","offsetParent","body","isBodyContainer","containerPositionStyle","matrix","getPropertyValue","transform","regex","matches","match","scaleX","scaleY","parseFloat","Number","isFinite"],"sources":["/Users/farhang/Desktop/June 17 /Front/Getchup_FrontEnd/node_modules/@react-native-aria/overlays/src/web/overlays/src/calculatePosition.ts"],"sourcesContent":["// @ts-nocheck\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  Axis,\n  Placement,\n  PlacementAxis,\n  SizeAxis,\n} from '@react-types/overlays';\nimport getCss from 'dom-helpers/css';\nimport getOffset from 'dom-helpers/offset';\nimport getPosition from 'dom-helpers/position';\nimport getScrollLeft from 'dom-helpers/scrollLeft';\nimport getScrollTop from 'dom-helpers/scrollTop';\nimport ownerDocument from 'dom-helpers/ownerDocument';\nimport getComputedStyle from 'dom-helpers/getComputedStyle';\n\ninterface Position {\n  top?: number;\n  left?: number;\n  bottom?: number;\n  right?: number;\n}\n\ninterface Dimensions {\n  width: number;\n  height: number;\n  top: number;\n  left: number;\n  scroll: Position;\n}\n\ninterface ParsedPlacement {\n  placement: PlacementAxis;\n  crossPlacement: PlacementAxis;\n  axis: Axis;\n  crossAxis: Axis;\n  size: SizeAxis;\n  crossSize: SizeAxis;\n}\n\ninterface Offset {\n  top: number;\n  left: number;\n  width: number;\n  height: number;\n}\n\ninterface PositionOpts {\n  placement: Placement;\n  targetNode: HTMLElement;\n  overlayNode: HTMLElement;\n  scrollNode: HTMLElement;\n  padding: number;\n  shouldFlip: boolean;\n  boundaryElement: HTMLElement;\n  offset: number;\n  crossOffset: number;\n  shouldOverlapWithTrigger: boolean;\n}\n\nexport interface PositionResult {\n  position?: Position;\n  arrowOffsetLeft?: number;\n  arrowOffsetTop?: number;\n  maxHeight?: number;\n  placement: PlacementAxis;\n}\n\nconst AXIS = {\n  top: 'top',\n  bottom: 'top',\n  left: 'left',\n  right: 'left',\n};\n\nconst FLIPPED_DIRECTION = {\n  top: 'bottom',\n  bottom: 'top',\n  left: 'right',\n  right: 'left',\n};\n\nconst CROSS_AXIS = {\n  top: 'left',\n  left: 'top',\n};\n\nconst AXIS_SIZE = {\n  top: 'height',\n  left: 'width',\n};\n\nconst PARSED_PLACEMENT_CACHE = {};\n\n// @ts-ignore\nlet visualViewport = typeof window !== 'undefined' && window.visualViewport;\n\nfunction getContainerDimensions(containerNode: Element): Dimensions {\n  let width = 0,\n    height = 0,\n    top = 0,\n    left = 0;\n  let scroll: Position = {};\n\n  if (containerNode.tagName === 'BODY') {\n    width = visualViewport?.width ?? document.documentElement.clientWidth;\n    height = visualViewport?.height ?? document.documentElement.clientHeight;\n\n    scroll.top =\n      getScrollTop(ownerDocument(containerNode).documentElement) ||\n      getScrollTop(containerNode);\n    scroll.left =\n      getScrollLeft(ownerDocument(containerNode).documentElement) ||\n      getScrollLeft(containerNode);\n  } else {\n    ({ width, height, top, left } = getOffset(containerNode));\n    scroll.top = getScrollTop(containerNode);\n    scroll.left = getScrollLeft(containerNode);\n  }\n\n  return { width, height, scroll, top, left };\n}\n\nfunction getScroll(node: HTMLElement): Offset {\n  return {\n    top: node.scrollTop,\n    left: node.scrollLeft,\n    width: node.scrollWidth,\n    height: node.scrollHeight,\n  };\n}\n\nfunction getDelta(\n  axis: Axis,\n  offset: number,\n  size: number,\n  containerDimensions: Dimensions,\n  padding: number\n) {\n  let containerScroll = containerDimensions.scroll[axis];\n  let containerHeight = containerDimensions[AXIS_SIZE[axis]];\n\n  let startEdgeOffset = offset - padding - containerScroll;\n  let endEdgeOffset = offset + padding - containerScroll + size;\n\n  if (startEdgeOffset < 0) {\n    return -startEdgeOffset;\n  } else if (endEdgeOffset > containerHeight) {\n    return Math.max(containerHeight - endEdgeOffset, -startEdgeOffset);\n  } else {\n    return 0;\n  }\n}\n\nfunction getMargins(node: HTMLElement): Position {\n  let style = window.getComputedStyle(node);\n  return {\n    top: parseInt(style.marginTop, 10) || 0,\n    bottom: parseInt(style.marginBottom, 10) || 0,\n    left: parseInt(style.marginLeft, 10) || 0,\n    right: parseInt(style.marginRight, 10) || 0,\n  };\n}\n\nfunction parsePlacement(input: Placement): ParsedPlacement {\n  if (PARSED_PLACEMENT_CACHE[input]) {\n    return PARSED_PLACEMENT_CACHE[input];\n  }\n\n  let [placement, crossPlacement] = input.split(' ');\n  let axis: Axis = AXIS[placement] || 'right';\n  let crossAxis: Axis = CROSS_AXIS[axis];\n\n  if (!AXIS[crossPlacement]) {\n    crossPlacement = 'center';\n  }\n\n  let size = AXIS_SIZE[axis];\n  let crossSize = AXIS_SIZE[crossAxis];\n  PARSED_PLACEMENT_CACHE[input] = {\n    placement,\n    crossPlacement,\n    axis,\n    crossAxis,\n    size,\n    crossSize,\n  };\n  return PARSED_PLACEMENT_CACHE[input];\n}\n\nfunction computePosition(\n  childOffset: Offset,\n  boundaryDimensions: Dimensions,\n  overlaySize: Offset,\n  placementInfo: ParsedPlacement,\n  offset: number,\n  crossOffset: number,\n  containerOffsetWithBoundary: Offset,\n  isContainerPositioned: boolean\n) {\n  let {\n    placement,\n    crossPlacement,\n    axis,\n    crossAxis,\n    size,\n    crossSize,\n  } = placementInfo;\n  let position: Position = {};\n\n  // button position\n  position[crossAxis] = childOffset[crossAxis];\n\n  if (crossPlacement === 'center') {\n    //  + (button size / 2) - (overlay size / 2)\n    // at this point the overlay center should match the button center\n    position[crossAxis] +=\n      (childOffset[crossSize] - overlaySize[crossSize]) / 2;\n  } else if (crossPlacement !== crossAxis) {\n    //  + (button size) - (overlay size)\n    // at this point the overlay bottom should match the button bottom\n    position[crossAxis] += childOffset[crossSize] - overlaySize[crossSize];\n  } /* else {\n    the overlay top should match the button top\n  } */\n  // add the crossOffset from props\n  position[crossAxis] += crossOffset;\n\n  // // this is button center position - the overlay size + half of the button to align bottom of overlay with button center\n  // let minViablePosition =\n  //   childOffset[crossAxis] +\n  //   childOffset[crossSize] / 2 -\n  //   overlaySize[crossSize];\n  // // this is button position of center, aligns top of overlay with button center\n  // let maxViablePosition = childOffset[crossAxis] + childOffset[crossSize] / 2;\n\n  // // clamp it into the range of the min/max positions\n  // position[crossAxis] = Math.min(\n  //   Math.max(minViablePosition, position[crossAxis]),\n  //   maxViablePosition\n  // );\n\n  // Floor these so the position isn't placed on a partial pixel, only whole pixels. Shouldn't matter if it was floored or ceiled, so chose one.\n  if (placement === axis) {\n    // If the container is positioned (non-static), then we use the container's actual\n    // height, as `bottom` will be relative to this height.  But if the container is static,\n    // then it can only be the `document.body`, and `bottom` will be relative to _its_\n    // container, which should be as large as boundaryDimensions.\n    const containerHeight = isContainerPositioned\n      ? containerOffsetWithBoundary[size]\n      : boundaryDimensions[size];\n    position[FLIPPED_DIRECTION[axis]] = Math.floor(\n      containerHeight - childOffset[axis] + offset\n    );\n  } else {\n    position[axis] = Math.floor(childOffset[axis] + childOffset[size] + offset);\n  }\n\n  return position;\n}\n\nfunction getMaxHeight(\n  position: Position,\n  boundaryDimensions: Dimensions,\n  containerOffsetWithBoundary: Offset,\n  childOffset: Offset,\n  margins: Position,\n  padding: number\n) {\n  return position.top != null\n    ? // We want the distance between the top of the overlay to the bottom of the boundary\n    Math.max(\n      0,\n      boundaryDimensions.height +\n      boundaryDimensions.top +\n      boundaryDimensions.scroll.top - // this is the bottom of the boundary\n      (containerOffsetWithBoundary.top + position.top) - // this is the top of the overlay\n      (margins.top + margins.bottom + padding) // save additional space for margin and padding\n    )\n    : // We want the distance between the top of the trigger to the top of the boundary\n    Math.max(\n      0,\n      childOffset.top +\n      containerOffsetWithBoundary.top - // this is the top of the trigger\n      (boundaryDimensions.top + boundaryDimensions.scroll.top) - // this is the top of the boundary\n      (margins.top + margins.bottom + padding) // save additional space for margin and padding\n    );\n}\n\nfunction getAvailableSpace(\n  boundaryDimensions: Dimensions,\n  containerOffsetWithBoundary: Offset,\n  childOffset: Offset,\n  margins: Position,\n  padding: number,\n  placementInfo: ParsedPlacement\n) {\n  let { placement, axis, size } = placementInfo;\n  if (placement === axis) {\n    return Math.max(\n      0,\n      childOffset[axis] -\n      boundaryDimensions[axis] -\n      boundaryDimensions.scroll[axis] +\n      containerOffsetWithBoundary[axis] -\n      margins[axis] -\n      margins[FLIPPED_DIRECTION[axis]] -\n      padding\n    );\n  }\n\n  return Math.max(\n    0,\n    boundaryDimensions[size] +\n    boundaryDimensions[axis] +\n    boundaryDimensions.scroll[axis] -\n    containerOffsetWithBoundary[axis] -\n    childOffset[axis] -\n    childOffset[size] -\n    margins[axis] -\n    margins[FLIPPED_DIRECTION[axis]] -\n    padding\n  );\n}\n\nexport function calculatePositionInternal(\n  placementInput: Placement,\n  childOffset: Offset,\n  overlaySize: Offset,\n  scrollSize: Offset,\n  margins: Position,\n  padding: number,\n  flip: boolean,\n  boundaryDimensions: Dimensions,\n  containerOffsetWithBoundary: Offset,\n  offset: number,\n  crossOffset: number,\n  isContainerPositioned: boolean,\n  shouldOverlapWithTrigger: boolean\n): PositionResult {\n  let placementInfo = parsePlacement(placementInput);\n  let {\n    size,\n    crossAxis,\n    crossSize,\n    placement,\n    crossPlacement,\n    axis,\n  } = placementInfo;\n  let position = computePosition(\n    childOffset,\n    boundaryDimensions,\n    overlaySize,\n    placementInfo,\n    offset,\n    crossOffset,\n    containerOffsetWithBoundary,\n    isContainerPositioned\n  );\n\n  let normalizedOffset = offset;\n  let space = getAvailableSpace(\n    boundaryDimensions,\n    containerOffsetWithBoundary,\n    childOffset,\n    margins,\n    padding + offset,\n    placementInfo\n  );\n\n  // Check if the scroll size of the overlay is greater than the available space to determine if we need to flip\n  if (flip && scrollSize[size] > space) {\n    let flippedPlacementInfo = parsePlacement(\n      `${FLIPPED_DIRECTION[placement]} ${crossPlacement}` as Placement\n    );\n    let flippedPosition = computePosition(\n      childOffset,\n      boundaryDimensions,\n      overlaySize,\n      flippedPlacementInfo,\n      offset,\n      crossOffset,\n      containerOffsetWithBoundary,\n      isContainerPositioned\n    );\n    let flippedSpace = getAvailableSpace(\n      boundaryDimensions,\n      containerOffsetWithBoundary,\n      childOffset,\n      margins,\n      padding + offset,\n      flippedPlacementInfo\n    );\n\n    // If the available space for the flipped position is greater than the original available space, flip.\n    if (flippedSpace > space) {\n      placementInfo = flippedPlacementInfo;\n      position = flippedPosition;\n      normalizedOffset = offset;\n    }\n  }\n\n  let delta = getDelta(\n    crossAxis,\n    position[crossAxis],\n    overlaySize[crossSize],\n    boundaryDimensions,\n    padding\n  );\n  position[crossAxis] += delta;\n\n  let maxHeight = getMaxHeight(\n    position,\n    boundaryDimensions,\n    containerOffsetWithBoundary,\n    childOffset,\n    margins,\n    padding\n  );\n\n  overlaySize.height = Math.min(overlaySize.height, maxHeight);\n\n  position = computePosition(\n    childOffset,\n    boundaryDimensions,\n    overlaySize,\n    placementInfo,\n    normalizedOffset,\n    crossOffset,\n    containerOffsetWithBoundary,\n    isContainerPositioned\n  );\n  delta = getDelta(\n    crossAxis,\n    position[crossAxis],\n    overlaySize[crossSize],\n    boundaryDimensions,\n    padding\n  );\n  position[crossAxis] += delta;\n\n  let arrowPosition: Position = {};\n  arrowPosition[crossAxis] =\n    childOffset[crossAxis] - position[crossAxis] + childOffset[crossSize] / 2;\n\n  if (shouldOverlapWithTrigger) {\n    position[FLIPPED_DIRECTION[placementInfo.placement]] =\n      position[FLIPPED_DIRECTION[placementInfo.placement]] - childOffset[size];\n  }\n\n  return {\n    position,\n    maxHeight: maxHeight,\n    arrowOffsetLeft: arrowPosition.left,\n    arrowOffsetTop: arrowPosition.top,\n    placement: placementInfo.placement,\n  };\n}\n\n/**\n * Determines where to place the overlay with regards to the target and the position of an optional indicator.\n */\nexport function calculatePosition(opts: PositionOpts): PositionResult {\n  let {\n    placement,\n    targetNode,\n    overlayNode,\n    scrollNode,\n    padding,\n    shouldFlip,\n    boundaryElement,\n    offset,\n    crossOffset,\n    shouldOverlapWithTrigger,\n  } = opts;\n\n  let container = overlayNode.offsetParent || document.body;\n  let isBodyContainer = container.tagName === 'BODY';\n  const containerPositionStyle = window.getComputedStyle(container).position;\n  let isContainerPositioned =\n    !!containerPositionStyle && containerPositionStyle !== 'static';\n  let childOffset: Offset = isBodyContainer\n    ? getOffset(targetNode)\n    : getPosition(targetNode, container);\n\n  if (!isBodyContainer) {\n    childOffset.top += parseInt(getCss(targetNode, 'marginTop'), 10) || 0;\n    childOffset.left += parseInt(getCss(targetNode, 'marginLeft'), 10) || 0;\n  }\n\n  let overlaySize: Offset = getOffset(overlayNode);\n  const matrix = getComputedStyle(overlayNode).getPropertyValue('transform');\n  const transform = matrix;\n  const regex = /matrix\\((-?\\d*\\.?\\d+),\\s*(-?\\d*\\.?\\d+),\\s*(-?\\d*\\.?\\d+),\\s*(-?\\d*\\.?\\d+),\\s*(-?\\d*\\.?\\d+),\\s*(-?\\d*\\.?\\d+)\\)/;\n  const matches = transform.match(regex);\n  let scaleX = 1;\n  let scaleY = 1;\n\n  if (matches) {\n    scaleX = parseFloat(matches[1]);\n    scaleY = parseFloat(matches[4]);\n    if (!scaleX || !Number.isFinite(scaleX)) {\n      scaleX = 1;\n    }\n\n    if (!scaleY || !Number.isFinite(scaleY)) {\n      scaleY = 1;\n    }\n  }\n\n  let margins = getMargins(overlayNode);\n  overlaySize.width += margins.left + margins.right;\n  overlaySize.height += margins.top + margins.bottom;\n\n  if (scaleX) {\n    overlaySize.width = overlaySize.width / scaleX;\n  }\n  if (scaleY) {\n    overlaySize.height = overlaySize.height / scaleY;\n  }\n\n  let scrollSize = getScroll(scrollNode);\n  let boundaryDimensions = getContainerDimensions(boundaryElement);\n  let containerOffsetWithBoundary: Offset =\n    boundaryElement.tagName === 'BODY'\n      ? getOffset(container)\n      : getPosition(container, boundaryElement);\n\n  return calculatePositionInternal(\n    placement,\n    childOffset,\n    overlaySize,\n    scrollSize,\n    margins,\n    padding,\n    shouldFlip,\n    boundaryDimensions,\n    containerOffsetWithBoundary,\n    offset,\n    crossOffset,\n    isContainerPositioned,\n    shouldOverlapWithTrigger\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}