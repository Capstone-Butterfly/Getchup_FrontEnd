{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { useSlotId as $i6df2$useSlotId, filterDOMProps as $i6df2$filterDOMProps } from \"@react-aria/utils\";\nimport { focusSafely as $i6df2$focusSafely } from \"@react-aria/focus\";\nimport { useRef as $i6df2$useRef, useEffect as $i6df2$useEffect } from \"react\";\nimport { useOverlayFocusContain as $i6df2$useOverlayFocusContain } from \"@react-aria/overlays\";\nfunction $40df3f8667284809$export$d55e7ee900f34e93(props, ref) {\n  let {\n    role = 'dialog'\n  } = props;\n  let titleId = (0, $i6df2$useSlotId)();\n  titleId = props['aria-label'] ? undefined : titleId;\n  let isRefocusing = (0, $i6df2$useRef)(false);\n  (0, $i6df2$useEffect)(() => {\n    if (ref.current && !ref.current.contains(document.activeElement)) {\n      (0, $i6df2$focusSafely)(ref.current);\n      let timeout = setTimeout(() => {\n        if (document.activeElement === ref.current) {\n          isRefocusing.current = true;\n          if (ref.current) {\n            ref.current.blur();\n            (0, $i6df2$focusSafely)(ref.current);\n          }\n          isRefocusing.current = false;\n        }\n      }, 500);\n      return () => {\n        clearTimeout(timeout);\n      };\n    }\n  }, [ref]);\n  (0, $i6df2$useOverlayFocusContain)();\n  return {\n    dialogProps: _objectSpread(_objectSpread({}, (0, $i6df2$filterDOMProps)(props, {\n      labelable: true\n    })), {}, {\n      role: role,\n      tabIndex: -1,\n      'aria-labelledby': props['aria-labelledby'] || titleId,\n      onBlur: e => {\n        if (isRefocusing.current) e.stopPropagation();\n      }\n    }),\n    titleProps: {\n      id: titleId\n    }\n  };\n}\nexport { $40df3f8667284809$export$d55e7ee900f34e93 as useDialog };","map":{"version":3,"names":["$40df3f8667284809$export$d55e7ee900f34e93","props","ref","role","titleId","$i6df2$useSlotId","undefined","isRefocusing","$i6df2$useRef","$i6df2$useEffect","current","contains","document","activeElement","$i6df2$focusSafely","timeout","setTimeout","blur","clearTimeout","$i6df2$useOverlayFocusContain","dialogProps","_objectSpread","$i6df2$filterDOMProps","labelable","tabIndex","onBlur","e","stopPropagation","titleProps","id"],"sources":["/Users/farhang/Desktop/June 17 /Front/Getchup_FrontEnd/node_modules/@react-aria/dialog/dist/packages/@react-aria/dialog/src/useDialog.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaDialogProps} from '@react-types/dialog';\nimport {DOMAttributes, FocusableElement} from '@react-types/shared';\nimport {filterDOMProps, useSlotId} from '@react-aria/utils';\nimport {focusSafely} from '@react-aria/focus';\nimport {RefObject, useEffect, useRef} from 'react';\nimport {useOverlayFocusContain} from '@react-aria/overlays';\n\nexport interface DialogAria {\n  /** Props for the dialog container element. */\n  dialogProps: DOMAttributes,\n\n  /** Props for the dialog title element. */\n  titleProps: DOMAttributes\n}\n\n/**\n * Provides the behavior and accessibility implementation for a dialog component.\n * A dialog is an overlay shown above other content in an application.\n */\nexport function useDialog(props: AriaDialogProps, ref: RefObject<FocusableElement>): DialogAria {\n  let {role = 'dialog'} = props;\n  let titleId: string | undefined = useSlotId();\n  titleId = props['aria-label'] ? undefined : titleId;\n\n  let isRefocusing = useRef(false);\n\n  // Focus the dialog itself on mount, unless a child element is already focused.\n  useEffect(() => {\n    if (ref.current && !ref.current.contains(document.activeElement)) {\n      focusSafely(ref.current);\n\n      // Safari on iOS does not move the VoiceOver cursor to the dialog\n      // or announce that it has opened until it has rendered. A workaround\n      // is to wait for half a second, then blur and re-focus the dialog.\n      let timeout = setTimeout(() => {\n        if (document.activeElement === ref.current) {\n          isRefocusing.current = true;\n          if (ref.current) {\n            ref.current.blur();\n            focusSafely(ref.current);\n          }\n          isRefocusing.current = false;\n        }\n      }, 500);\n\n      return () => {\n        clearTimeout(timeout);\n      };\n    }\n  }, [ref]);\n\n  useOverlayFocusContain();\n\n  // We do not use aria-modal due to a Safari bug which forces the first focusable element to be focused\n  // on mount when inside an iframe, no matter which element we programmatically focus.\n  // See https://bugs.webkit.org/show_bug.cgi?id=211934.\n  // useModal sets aria-hidden on all elements outside the dialog, so the dialog will behave as a modal\n  // even without aria-modal on the dialog itself.\n  return {\n    dialogProps: {\n      ...filterDOMProps(props, {labelable: true}),\n      role,\n      tabIndex: -1,\n      'aria-labelledby': props['aria-labelledby'] || titleId,\n      // Prevent blur events from reaching useOverlay, which may cause\n      // popovers to close. Since focus is contained within the dialog,\n      // we don't want this to occur due to the above useEffect.\n      onBlur: e => {\n        if (isRefocusing.current) {\n          e.stopPropagation();\n        }\n      }\n    },\n    titleProps: {\n      id: titleId\n    }\n  };\n}\n"],"mappings":";;;;;;;AA+BO,SAASA,0CAAUC,KAAsB,EAAEC,GAAgC;EAChF,IAAI;IAACC,IAAA,GAAO;EAAA,CAAS,GAAGF,KAAA;EACxB,IAAIG,OAAA,GAA8B,IAAAC,gBAAQ;EAC1CD,OAAA,GAAUH,KAAK,CAAC,aAAa,GAAGK,SAAA,GAAYF,OAAA;EAE5C,IAAIG,YAAA,GAAe,IAAAC,aAAK,EAAE;EAG1B,IAAAC,gBAAQ,EAAE;IACR,IAAIP,GAAA,CAAIQ,OAAO,IAAI,CAACR,GAAA,CAAIQ,OAAO,CAACC,QAAQ,CAACC,QAAA,CAASC,aAAa,GAAG;MAChE,IAAAC,kBAAU,EAAEZ,GAAA,CAAIQ,OAAO;MAKvB,IAAIK,OAAA,GAAUC,UAAA,CAAW;QACvB,IAAIJ,QAAA,CAASC,aAAa,KAAKX,GAAA,CAAIQ,OAAO,EAAE;UAC1CH,YAAA,CAAaG,OAAO,GAAG;UACvB,IAAIR,GAAA,CAAIQ,OAAO,EAAE;YACfR,GAAA,CAAIQ,OAAO,CAACO,IAAI;YAChB,IAAAH,kBAAU,EAAEZ,GAAA,CAAIQ,OAAO;UACzB;UACAH,YAAA,CAAaG,OAAO,GAAG;QACzB;MACF,GAAG;MAEH,OAAO;QACLQ,YAAA,CAAaH,OAAA;MACf;IACF;EACF,GAAG,CAACb,GAAA,CAAI;EAER,IAAAiB,6BAAqB;EAOrB,OAAO;IACLC,WAAA,EAAAC,aAAA,CAAAA,aAAA,KACK,IAAAC,qBAAa,EAAErB,KAAA,EAAO;MAACsB,SAAA,EAAW;IAAI,EAAE;YAC3CpB,IAAA;MACAqB,QAAA,EAAU;MACV,mBAAmBvB,KAAK,CAAC,kBAAkB,IAAIG,OAAA;MAI/CqB,MAAA,EAAQC,CAAA;QACN,IAAInB,YAAA,CAAaG,OAAO,EACtBgB,CAAA,CAAEC,eAAe;MAErB;IAAA,EACF;IACAC,UAAA,EAAY;MACVC,EAAA,EAAIzB;IACN;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}