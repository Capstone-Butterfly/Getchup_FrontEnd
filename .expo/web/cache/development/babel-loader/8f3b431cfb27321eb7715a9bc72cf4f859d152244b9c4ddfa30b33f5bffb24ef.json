{"ast":null,"code":"class $05ca4cd7c4a5a999$export$863faf230ee2118a {\n  *[Symbol.iterator]() {\n    yield* this.iterable;\n  }\n  get size() {\n    return this.keyMap.size;\n  }\n  getKeys() {\n    return this.keyMap.keys();\n  }\n  getKeyBefore(key) {\n    let node = this.keyMap.get(key);\n    return node ? node.prevKey : null;\n  }\n  getKeyAfter(key) {\n    let node = this.keyMap.get(key);\n    return node ? node.nextKey : null;\n  }\n  getFirstKey() {\n    return this.firstKey;\n  }\n  getLastKey() {\n    return this.lastKey;\n  }\n  getItem(key) {\n    return this.keyMap.get(key);\n  }\n  at(idx) {\n    const keys = [...this.getKeys()];\n    return this.getItem(keys[idx]);\n  }\n  constructor(nodes, {\n    expandedKeys: expandedKeys\n  } = {}) {\n    this.keyMap = new Map();\n    this.iterable = nodes;\n    expandedKeys = expandedKeys || new Set();\n    let visit = node => {\n      this.keyMap.set(node.key, node);\n      if (node.childNodes && (node.type === 'section' || expandedKeys.has(node.key))) for (let child of node.childNodes) visit(child);\n    };\n    for (let node of nodes) visit(node);\n    let last;\n    let index = 0;\n    for (let [key, node] of this.keyMap) {\n      if (last) {\n        last.nextKey = key;\n        node.prevKey = last.key;\n      } else {\n        this.firstKey = key;\n        node.prevKey = undefined;\n      }\n      if (node.type === 'item') node.index = index++;\n      last = node;\n      last.nextKey = undefined;\n    }\n    this.lastKey = last === null || last === void 0 ? void 0 : last.key;\n  }\n}\nexport { $05ca4cd7c4a5a999$export$863faf230ee2118a as TreeCollection };","map":{"version":3,"names":["$05ca4cd7c4a5a999$export$863faf230ee2118a","Symbol","iterator","iterable","size","keyMap","getKeys","keys","getKeyBefore","key","node","get","prevKey","getKeyAfter","nextKey","getFirstKey","firstKey","getLastKey","lastKey","getItem","at","idx","constructor","nodes","expandedKeys","Map","Set","visit","set","childNodes","type","has","child","last","index","undefined"],"sources":["/Users/farhang/Desktop/June 17 /Front/Getchup_FrontEnd/node_modules/@react-stately/tree/dist/packages/@react-stately/tree/src/TreeCollection.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, Key, Node} from '@react-types/shared';\n\nexport class TreeCollection<T> implements Collection<Node<T>> {\n  private keyMap: Map<Key, Node<T>> = new Map();\n  private iterable: Iterable<Node<T>>;\n  private firstKey: Key;\n  private lastKey: Key;\n\n  constructor(nodes: Iterable<Node<T>>, {expandedKeys}: {expandedKeys?: Set<Key>} = {}) {\n    this.iterable = nodes;\n    expandedKeys = expandedKeys || new Set();\n\n    let visit = (node: Node<T>) => {\n      this.keyMap.set(node.key, node);\n\n      if (node.childNodes && (node.type === 'section' || expandedKeys.has(node.key))) {\n        for (let child of node.childNodes) {\n          visit(child);\n        }\n      }\n    };\n\n    for (let node of nodes) {\n      visit(node);\n    }\n\n    let last: Node<T>;\n    let index = 0;\n    for (let [key, node] of this.keyMap) {\n      if (last) {\n        last.nextKey = key;\n        node.prevKey = last.key;\n      } else {\n        this.firstKey = key;\n        node.prevKey = undefined;\n      }\n\n      if (node.type === 'item') {\n        node.index = index++;\n      }\n\n      last = node;\n\n      // Set nextKey as undefined since this might be the last node\n      // If it isn't the last node, last.nextKey will properly set at start of new loop\n      last.nextKey = undefined;\n    }\n\n    this.lastKey = last?.key;\n  }\n\n  *[Symbol.iterator]() {\n    yield* this.iterable;\n  }\n\n  get size() {\n    return this.keyMap.size;\n  }\n\n  getKeys() {\n    return this.keyMap.keys();\n  }\n\n  getKeyBefore(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.prevKey : null;\n  }\n\n  getKeyAfter(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.nextKey : null;\n  }\n\n  getFirstKey() {\n    return this.firstKey;\n  }\n\n  getLastKey() {\n    return this.lastKey;\n  }\n\n  getItem(key: Key) {\n    return this.keyMap.get(key);\n  }\n\n  at(idx: number) {\n    const keys = [...this.getKeys()];\n    return this.getItem(keys[idx]);\n  }\n}\n"],"mappings":"AAcO,MAAMA,yCAAA;EAiDX,EAAEC,MAAA,CAAOC,QAAQ,IAAI;IACnB,OAAO,IAAI,CAACC,QAAQ;EACtB;EAEA,IAAIC,KAAA,EAAO;IACT,OAAO,IAAI,CAACC,MAAM,CAACD,IAAI;EACzB;EAEAE,QAAA,EAAU;IACR,OAAO,IAAI,CAACD,MAAM,CAACE,IAAI;EACzB;EAEAC,aAAaC,GAAQ,EAAE;IACrB,IAAIC,IAAA,GAAO,IAAI,CAACL,MAAM,CAACM,GAAG,CAACF,GAAA;IAC3B,OAAOC,IAAA,GAAOA,IAAA,CAAKE,OAAO,GAAG;EAC/B;EAEAC,YAAYJ,GAAQ,EAAE;IACpB,IAAIC,IAAA,GAAO,IAAI,CAACL,MAAM,CAACM,GAAG,CAACF,GAAA;IAC3B,OAAOC,IAAA,GAAOA,IAAA,CAAKI,OAAO,GAAG;EAC/B;EAEAC,YAAA,EAAc;IACZ,OAAO,IAAI,CAACC,QAAQ;EACtB;EAEAC,WAAA,EAAa;IACX,OAAO,IAAI,CAACC,OAAO;EACrB;EAEAC,QAAQV,GAAQ,EAAE;IAChB,OAAO,IAAI,CAACJ,MAAM,CAACM,GAAG,CAACF,GAAA;EACzB;EAEAW,GAAGC,GAAW,EAAE;IACd,MAAMd,IAAA,GAAO,C,GAAI,IAAI,CAACD,OAAO,GAAG;IAChC,OAAO,IAAI,CAACa,OAAO,CAACZ,IAAI,CAACc,GAAA,CAAI;EAC/B;EAhFAC,YAAYC,KAAwB,EAAE;IAAAC,YAAA,EAACA;EAAY,CAA4B,GAAG,CAAC,CAAC,EAAE;SAL9EnB,MAAA,GAA4B,IAAIoB,GAAA;IAMtC,IAAI,CAACtB,QAAQ,GAAGoB,KAAA;IAChBC,YAAA,GAAeA,YAAA,IAAgB,IAAIE,GAAA;IAEnC,IAAIC,KAAA,GAASjB,IAAA;MACX,IAAI,CAACL,MAAM,CAACuB,GAAG,CAAClB,IAAA,CAAKD,GAAG,EAAEC,IAAA;MAE1B,IAAIA,IAAA,CAAKmB,UAAU,KAAKnB,IAAA,CAAKoB,IAAI,KAAK,aAAaN,YAAA,CAAaO,GAAG,CAACrB,IAAA,CAAKD,GAAG,IAC1E,KAAK,IAAIuB,KAAA,IAAStB,IAAA,CAAKmB,UAAU,EAC/BF,KAAA,CAAMK,KAAA;IAGZ;IAEA,KAAK,IAAItB,IAAA,IAAQa,KAAA,EACfI,KAAA,CAAMjB,IAAA;IAGR,IAAIuB,IAAA;IACJ,IAAIC,KAAA,GAAQ;IACZ,KAAK,IAAI,CAACzB,GAAA,EAAKC,IAAA,CAAK,IAAI,IAAI,CAACL,MAAM,EAAE;MACnC,IAAI4B,IAAA,EAAM;QACRA,IAAA,CAAKnB,OAAO,GAAGL,GAAA;QACfC,IAAA,CAAKE,OAAO,GAAGqB,IAAA,CAAKxB,GAAG;MACzB,OAAO;QACL,IAAI,CAACO,QAAQ,GAAGP,GAAA;QAChBC,IAAA,CAAKE,OAAO,GAAGuB,SAAA;MACjB;MAEA,IAAIzB,IAAA,CAAKoB,IAAI,KAAK,QAChBpB,IAAA,CAAKwB,KAAK,GAAGA,KAAA;MAGfD,IAAA,GAAOvB,IAAA;MAIPuB,IAAA,CAAKnB,OAAO,GAAGqB,SAAA;IACjB;IAEA,IAAI,CAACjB,OAAO,GAAGe,IAAA,aAAAA,IAAA,uBAAAA,IAAA,CAAMxB,GAAG;EAC1B;AAwCF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}