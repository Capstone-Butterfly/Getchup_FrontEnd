{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nconst _excluded = [\"styleInterpolator\", \"interpolationIndex\", \"current\", \"gesture\", \"next\", \"layout\", \"insets\", \"overlay\", \"overlayEnabled\", \"shadowEnabled\", \"gestureEnabled\", \"gestureDirection\", \"pageOverflowEnabled\", \"headerDarkContent\", \"children\", \"containerStyle\", \"contentStyle\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport Color from 'color';\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport InteractionManager from \"react-native-web/dist/exports/InteractionManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { forModalPresentationIOS } from '../../TransitionConfigs/CardStyleInterpolators';\nimport CardAnimationContext from '../../utils/CardAnimationContext';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport getInvertedMultiplier from '../../utils/getInvertedMultiplier';\nimport memoize from '../../utils/memoize';\nimport { GestureState, PanGestureHandler } from '../GestureHandler';\nimport ModalStatusBarManager from '../ModalStatusBarManager';\nimport CardSheet from './CardSheet';\nconst GESTURE_VELOCITY_IMPACT = 0.3;\nconst TRUE = 1;\nconst FALSE = 0;\nconst GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 50;\nconst GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;\nconst useNativeDriver = Platform.OS !== 'web';\nconst hasOpacityStyle = style => {\n  if (style) {\n    const flattenedStyle = StyleSheet.flatten(style);\n    return flattenedStyle.opacity != null;\n  }\n  return false;\n};\nexport default class Card extends React.Component {\n  static defaultProps = {\n    shadowEnabled: false,\n    gestureEnabled: true,\n    gestureVelocityImpact: GESTURE_VELOCITY_IMPACT,\n    overlay: _ref => {\n      let {\n        style\n      } = _ref;\n      return style ? React.createElement(Animated.View, {\n        pointerEvents: \"none\",\n        style: [styles.overlay, style]\n      }) : null;\n    }\n  };\n  componentDidMount() {\n    this.animate({\n      closing: this.props.closing\n    });\n    this.isCurrentlyMounted = true;\n  }\n  componentDidUpdate(prevProps) {\n    const {\n      layout,\n      gestureDirection,\n      closing\n    } = this.props;\n    const {\n      width,\n      height\n    } = layout;\n    if (width !== prevProps.layout.width) {\n      this.layout.width.setValue(width);\n    }\n    if (height !== prevProps.layout.height) {\n      this.layout.height.setValue(height);\n    }\n    if (gestureDirection !== prevProps.gestureDirection) {\n      this.inverted.setValue(getInvertedMultiplier(gestureDirection));\n    }\n    const toValue = this.getAnimateToValue(this.props);\n    if (this.getAnimateToValue(prevProps) !== toValue || this.lastToValue !== toValue) {\n      this.animate({\n        closing\n      });\n    }\n  }\n  componentWillUnmount() {\n    this.props.gesture.stopAnimation();\n    this.isCurrentlyMounted = false;\n    this.handleEndInteraction();\n  }\n  isCurrentlyMounted = false;\n  isClosing = new Animated.Value(FALSE);\n  inverted = new Animated.Value(getInvertedMultiplier(this.props.gestureDirection));\n  layout = {\n    width: new Animated.Value(this.props.layout.width),\n    height: new Animated.Value(this.props.layout.height)\n  };\n  isSwiping = new Animated.Value(FALSE);\n  animate = _ref2 => {\n    let {\n      closing,\n      velocity\n    } = _ref2;\n    const {\n      gesture,\n      transitionSpec,\n      onOpen,\n      onClose,\n      onTransition\n    } = this.props;\n    const toValue = this.getAnimateToValue(_objectSpread(_objectSpread({}, this.props), {}, {\n      closing\n    }));\n    this.lastToValue = toValue;\n    this.isClosing.setValue(closing ? TRUE : FALSE);\n    const spec = closing ? transitionSpec.close : transitionSpec.open;\n    const animation = spec.animation === 'spring' ? Animated.spring : Animated.timing;\n    this.setPointerEventsEnabled(!closing);\n    this.handleStartInteraction();\n    clearTimeout(this.pendingGestureCallback);\n    onTransition === null || onTransition === void 0 ? void 0 : onTransition({\n      closing,\n      gesture: velocity !== undefined\n    });\n    animation(gesture, _objectSpread(_objectSpread({}, spec.config), {}, {\n      velocity,\n      toValue,\n      useNativeDriver,\n      isInteraction: false\n    })).start(_ref3 => {\n      let {\n        finished\n      } = _ref3;\n      this.handleEndInteraction();\n      clearTimeout(this.pendingGestureCallback);\n      if (finished) {\n        if (closing) {\n          onClose();\n        } else {\n          onOpen();\n        }\n        if (this.isCurrentlyMounted) {\n          this.forceUpdate();\n        }\n      }\n    });\n  };\n  getAnimateToValue = _ref4 => {\n    let {\n      closing,\n      layout,\n      gestureDirection\n    } = _ref4;\n    if (!closing) {\n      return 0;\n    }\n    return getDistanceForDirection(layout, gestureDirection);\n  };\n  setPointerEventsEnabled = enabled => {\n    var _this$ref$current;\n    const pointerEvents = enabled ? 'box-none' : 'none';\n    (_this$ref$current = this.ref.current) === null || _this$ref$current === void 0 ? void 0 : _this$ref$current.setPointerEvents(pointerEvents);\n  };\n  handleStartInteraction = () => {\n    if (this.interactionHandle === undefined) {\n      this.interactionHandle = InteractionManager.createInteractionHandle();\n    }\n  };\n  handleEndInteraction = () => {\n    if (this.interactionHandle !== undefined) {\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\n      this.interactionHandle = undefined;\n    }\n  };\n  handleGestureStateChange = _ref5 => {\n    let {\n      nativeEvent\n    } = _ref5;\n    const {\n      layout,\n      onClose,\n      onGestureBegin,\n      onGestureCanceled,\n      onGestureEnd,\n      gestureDirection,\n      gestureVelocityImpact\n    } = this.props;\n    switch (nativeEvent.state) {\n      case GestureState.ACTIVE:\n        this.isSwiping.setValue(TRUE);\n        this.handleStartInteraction();\n        onGestureBegin === null || onGestureBegin === void 0 ? void 0 : onGestureBegin();\n        break;\n      case GestureState.CANCELLED:\n        {\n          this.isSwiping.setValue(FALSE);\n          this.handleEndInteraction();\n          const velocity = gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? nativeEvent.velocityY : nativeEvent.velocityX;\n          this.animate({\n            closing: this.props.closing,\n            velocity\n          });\n          onGestureCanceled === null || onGestureCanceled === void 0 ? void 0 : onGestureCanceled();\n          break;\n        }\n      case GestureState.END:\n        {\n          this.isSwiping.setValue(FALSE);\n          let distance;\n          let translation;\n          let velocity;\n          if (gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted') {\n            distance = layout.height;\n            translation = nativeEvent.translationY;\n            velocity = nativeEvent.velocityY;\n          } else {\n            distance = layout.width;\n            translation = nativeEvent.translationX;\n            velocity = nativeEvent.velocityX;\n          }\n          const closing = (translation + velocity * gestureVelocityImpact) * getInvertedMultiplier(gestureDirection) > distance / 2 ? velocity !== 0 || translation !== 0 : this.props.closing;\n          this.animate({\n            closing,\n            velocity\n          });\n          if (closing) {\n            this.pendingGestureCallback = setTimeout(() => {\n              onClose();\n              this.forceUpdate();\n            }, 32);\n          }\n          onGestureEnd === null || onGestureEnd === void 0 ? void 0 : onGestureEnd();\n          break;\n        }\n    }\n  };\n  getInterpolatedStyle = memoize((styleInterpolator, animation) => styleInterpolator(animation));\n  getCardAnimation = memoize((interpolationIndex, current, next, layout, insetTop, insetRight, insetBottom, insetLeft) => ({\n    index: interpolationIndex,\n    current: {\n      progress: current\n    },\n    next: next && {\n      progress: next\n    },\n    closing: this.isClosing,\n    swiping: this.isSwiping,\n    inverted: this.inverted,\n    layouts: {\n      screen: layout\n    },\n    insets: {\n      top: insetTop,\n      right: insetRight,\n      bottom: insetBottom,\n      left: insetLeft\n    }\n  }));\n  gestureActivationCriteria() {\n    const {\n      layout,\n      gestureDirection,\n      gestureResponseDistance\n    } = this.props;\n    const enableTrackpadTwoFingerGesture = true;\n    const distance = gestureResponseDistance !== undefined ? gestureResponseDistance : gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? GESTURE_RESPONSE_DISTANCE_VERTICAL : GESTURE_RESPONSE_DISTANCE_HORIZONTAL;\n    if (gestureDirection === 'vertical') {\n      return {\n        maxDeltaX: 15,\n        minOffsetY: 5,\n        hitSlop: {\n          bottom: -layout.height + distance\n        },\n        enableTrackpadTwoFingerGesture\n      };\n    } else if (gestureDirection === 'vertical-inverted') {\n      return {\n        maxDeltaX: 15,\n        minOffsetY: -5,\n        hitSlop: {\n          top: -layout.height + distance\n        },\n        enableTrackpadTwoFingerGesture\n      };\n    } else {\n      const hitSlop = -layout.width + distance;\n      const invertedMultiplier = getInvertedMultiplier(gestureDirection);\n      if (invertedMultiplier === 1) {\n        return {\n          minOffsetX: 5,\n          maxDeltaY: 20,\n          hitSlop: {\n            right: hitSlop\n          },\n          enableTrackpadTwoFingerGesture\n        };\n      } else {\n        return {\n          minOffsetX: -5,\n          maxDeltaY: 20,\n          hitSlop: {\n            left: hitSlop\n          },\n          enableTrackpadTwoFingerGesture\n        };\n      }\n    }\n  }\n  ref = React.createRef();\n  render() {\n    const _this$props = this.props,\n      {\n        styleInterpolator,\n        interpolationIndex,\n        current,\n        gesture,\n        next,\n        layout,\n        insets,\n        overlay,\n        overlayEnabled,\n        shadowEnabled,\n        gestureEnabled,\n        gestureDirection,\n        pageOverflowEnabled,\n        headerDarkContent,\n        children,\n        containerStyle: customContainerStyle,\n        contentStyle\n      } = _this$props,\n      rest = _objectWithoutProperties(_this$props, _excluded);\n    const interpolationProps = this.getCardAnimation(interpolationIndex, current, next, layout, insets.top, insets.right, insets.bottom, insets.left);\n    const interpolatedStyle = this.getInterpolatedStyle(styleInterpolator, interpolationProps);\n    const {\n      containerStyle,\n      cardStyle,\n      overlayStyle,\n      shadowStyle\n    } = interpolatedStyle;\n    const handleGestureEvent = gestureEnabled ? Animated.event([{\n      nativeEvent: gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? {\n        translationY: gesture\n      } : {\n        translationX: gesture\n      }\n    }], {\n      useNativeDriver\n    }) : undefined;\n    const {\n      backgroundColor\n    } = StyleSheet.flatten(contentStyle || {});\n    const isTransparent = typeof backgroundColor === 'string' ? Color(backgroundColor).alpha() === 0 : false;\n    return React.createElement(CardAnimationContext.Provider, {\n      value: interpolationProps\n    }, Platform.OS === 'ios' && overlayEnabled && next && getIsModalPresentation(styleInterpolator) ? React.createElement(ModalStatusBarManager, {\n      dark: headerDarkContent,\n      layout: layout,\n      insets: insets,\n      style: cardStyle\n    }) : null, React.createElement(Animated.View, {\n      style: {\n        opacity: current\n      },\n      collapsable: false\n    }), React.createElement(View, _extends({\n      pointerEvents: \"box-none\",\n      collapsable: false\n    }, rest), overlayEnabled ? React.createElement(View, {\n      pointerEvents: \"box-none\",\n      style: StyleSheet.absoluteFill\n    }, overlay({\n      style: overlayStyle\n    })) : null, React.createElement(Animated.View, {\n      style: [styles.container, containerStyle, customContainerStyle],\n      pointerEvents: \"box-none\"\n    }, React.createElement(PanGestureHandler, _extends({\n      enabled: layout.width !== 0 && gestureEnabled,\n      onGestureEvent: handleGestureEvent,\n      onHandlerStateChange: this.handleGestureStateChange\n    }, this.gestureActivationCriteria()), React.createElement(Animated.View, {\n      needsOffscreenAlphaCompositing: hasOpacityStyle(cardStyle),\n      style: [styles.container, cardStyle]\n    }, shadowEnabled && shadowStyle && !isTransparent ? React.createElement(Animated.View, {\n      style: [styles.shadow, gestureDirection === 'horizontal' ? [styles.shadowHorizontal, styles.shadowLeft] : gestureDirection === 'horizontal-inverted' ? [styles.shadowHorizontal, styles.shadowRight] : gestureDirection === 'vertical' ? [styles.shadowVertical, styles.shadowTop] : [styles.shadowVertical, styles.shadowBottom], {\n        backgroundColor\n      }, shadowStyle],\n      pointerEvents: \"none\"\n    }) : null, React.createElement(CardSheet, {\n      ref: this.ref,\n      enabled: pageOverflowEnabled,\n      layout: layout,\n      style: contentStyle\n    }, children))))));\n  }\n}\nexport const getIsModalPresentation = cardStyleInterpolator => {\n  return cardStyleInterpolator === forModalPresentationIOS || cardStyleInterpolator.name === 'forModalPresentationIOS';\n};\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  overlay: {\n    flex: 1,\n    backgroundColor: '#000'\n  },\n  shadow: {\n    position: 'absolute',\n    shadowRadius: 5,\n    shadowColor: '#000',\n    shadowOpacity: 0.3\n  },\n  shadowHorizontal: {\n    top: 0,\n    bottom: 0,\n    width: 3,\n    shadowOffset: {\n      width: -1,\n      height: 1\n    }\n  },\n  shadowLeft: {\n    left: 0\n  },\n  shadowRight: {\n    right: 0\n  },\n  shadowVertical: {\n    left: 0,\n    right: 0,\n    height: 3,\n    shadowOffset: {\n      width: 1,\n      height: -1\n    }\n  },\n  shadowTop: {\n    top: 0\n  },\n  shadowBottom: {\n    bottom: 0\n  }\n});","map":{"version":3,"names":["Color","React","Animated","InteractionManager","Platform","StyleSheet","View","forModalPresentationIOS","CardAnimationContext","getDistanceForDirection","getInvertedMultiplier","memoize","GestureState","PanGestureHandler","ModalStatusBarManager","CardSheet","GESTURE_VELOCITY_IMPACT","TRUE","FALSE","GESTURE_RESPONSE_DISTANCE_HORIZONTAL","GESTURE_RESPONSE_DISTANCE_VERTICAL","useNativeDriver","OS","hasOpacityStyle","style","flattenedStyle","flatten","opacity","Card","Component","defaultProps","shadowEnabled","gestureEnabled","gestureVelocityImpact","overlay","_ref","createElement","pointerEvents","styles","componentDidMount","animate","closing","props","isCurrentlyMounted","componentDidUpdate","prevProps","layout","gestureDirection","width","height","setValue","inverted","toValue","getAnimateToValue","lastToValue","componentWillUnmount","gesture","stopAnimation","handleEndInteraction","isClosing","Value","isSwiping","_ref2","velocity","transitionSpec","onOpen","onClose","onTransition","_objectSpread","spec","close","open","animation","spring","timing","setPointerEventsEnabled","handleStartInteraction","clearTimeout","pendingGestureCallback","undefined","config","isInteraction","start","_ref3","finished","forceUpdate","_ref4","enabled","_this$ref$current","ref","current","setPointerEvents","interactionHandle","createInteractionHandle","clearInteractionHandle","handleGestureStateChange","_ref5","nativeEvent","onGestureBegin","onGestureCanceled","onGestureEnd","state","ACTIVE","CANCELLED","velocityY","velocityX","END","distance","translation","translationY","translationX","setTimeout","getInterpolatedStyle","styleInterpolator","getCardAnimation","interpolationIndex","next","insetTop","insetRight","insetBottom","insetLeft","index","progress","swiping","layouts","screen","insets","top","right","bottom","left","gestureActivationCriteria","gestureResponseDistance","enableTrackpadTwoFingerGesture","maxDeltaX","minOffsetY","hitSlop","invertedMultiplier","minOffsetX","maxDeltaY","createRef","render","_this$props","overlayEnabled","pageOverflowEnabled","headerDarkContent","children","containerStyle","customContainerStyle","contentStyle","rest","_objectWithoutProperties","_excluded","interpolationProps","interpolatedStyle","cardStyle","overlayStyle","shadowStyle","handleGestureEvent","event","backgroundColor","isTransparent","alpha","Provider","value","getIsModalPresentation","dark","collapsable","_extends","absoluteFill","container","onGestureEvent","onHandlerStateChange","needsOffscreenAlphaCompositing","shadow","shadowHorizontal","shadowLeft","shadowRight","shadowVertical","shadowTop","shadowBottom","cardStyleInterpolator","name","create","flex","position","shadowRadius","shadowColor","shadowOpacity","shadowOffset"],"sources":["/Users/farhang/Desktop/June 17 /Front/Getchup_FrontEnd/node_modules/@react-navigation/stack/src/views/Stack/Card.tsx"],"sourcesContent":["import Color from 'color';\nimport * as React from 'react';\nimport {\n  Animated,\n  InteractionManager,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  View,\n  ViewProps,\n  ViewStyle,\n} from 'react-native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\n\nimport { forModalPresentationIOS } from '../../TransitionConfigs/CardStyleInterpolators';\nimport type {\n  GestureDirection,\n  Layout,\n  StackCardInterpolationProps,\n  StackCardStyleInterpolator,\n  TransitionSpec,\n} from '../../types';\nimport CardAnimationContext from '../../utils/CardAnimationContext';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport getInvertedMultiplier from '../../utils/getInvertedMultiplier';\nimport memoize from '../../utils/memoize';\nimport {\n  GestureState,\n  PanGestureHandler,\n  PanGestureHandlerGestureEvent,\n} from '../GestureHandler';\nimport ModalStatusBarManager from '../ModalStatusBarManager';\nimport CardSheet, { CardSheetRef } from './CardSheet';\n\ntype Props = ViewProps & {\n  interpolationIndex: number;\n  closing: boolean;\n  next?: Animated.AnimatedInterpolation<number>;\n  current: Animated.AnimatedInterpolation<number>;\n  gesture: Animated.Value;\n  layout: Layout;\n  insets: EdgeInsets;\n  headerDarkContent: boolean | undefined;\n  pageOverflowEnabled: boolean;\n  gestureDirection: GestureDirection;\n  onOpen: () => void;\n  onClose: () => void;\n  onTransition: (props: { closing: boolean; gesture: boolean }) => void;\n  onGestureBegin: () => void;\n  onGestureCanceled: () => void;\n  onGestureEnd: () => void;\n  children: React.ReactNode;\n  overlay: (props: {\n    style: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n  }) => React.ReactNode;\n  overlayEnabled: boolean;\n  shadowEnabled: boolean;\n  gestureEnabled: boolean;\n  gestureResponseDistance?: number;\n  gestureVelocityImpact: number;\n  transitionSpec: {\n    open: TransitionSpec;\n    close: TransitionSpec;\n  };\n  styleInterpolator: StackCardStyleInterpolator;\n  containerStyle?: StyleProp<ViewStyle>;\n  contentStyle?: StyleProp<ViewStyle>;\n};\n\nconst GESTURE_VELOCITY_IMPACT = 0.3;\n\nconst TRUE = 1;\nconst FALSE = 0;\n\n/**\n * The distance of touch start from the edge of the screen where the gesture will be recognized\n */\nconst GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 50;\nconst GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;\n\nconst useNativeDriver = Platform.OS !== 'web';\n\nconst hasOpacityStyle = (style: any) => {\n  if (style) {\n    const flattenedStyle = StyleSheet.flatten(style);\n    return flattenedStyle.opacity != null;\n  }\n\n  return false;\n};\n\nexport default class Card extends React.Component<Props> {\n  static defaultProps = {\n    shadowEnabled: false,\n    gestureEnabled: true,\n    gestureVelocityImpact: GESTURE_VELOCITY_IMPACT,\n    overlay: ({\n      style,\n    }: {\n      style: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n    }) =>\n      style ? (\n        <Animated.View pointerEvents=\"none\" style={[styles.overlay, style]} />\n      ) : null,\n  };\n\n  componentDidMount() {\n    this.animate({ closing: this.props.closing });\n    this.isCurrentlyMounted = true;\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { layout, gestureDirection, closing } = this.props;\n    const { width, height } = layout;\n\n    if (width !== prevProps.layout.width) {\n      this.layout.width.setValue(width);\n    }\n\n    if (height !== prevProps.layout.height) {\n      this.layout.height.setValue(height);\n    }\n\n    if (gestureDirection !== prevProps.gestureDirection) {\n      this.inverted.setValue(getInvertedMultiplier(gestureDirection));\n    }\n\n    const toValue = this.getAnimateToValue(this.props);\n\n    if (\n      this.getAnimateToValue(prevProps) !== toValue ||\n      this.lastToValue !== toValue\n    ) {\n      // We need to trigger the animation when route was closed\n      // Thr route might have been closed by a `POP` action or by a gesture\n      // When route was closed due to a gesture, the animation would've happened already\n      // It's still important to trigger the animation so that `onClose` is called\n      // If `onClose` is not called, cleanup step won't be performed for gestures\n      this.animate({ closing });\n    }\n  }\n\n  componentWillUnmount() {\n    this.props.gesture.stopAnimation();\n    this.isCurrentlyMounted = false;\n    this.handleEndInteraction();\n  }\n\n  private isCurrentlyMounted = false;\n\n  private isClosing = new Animated.Value(FALSE);\n\n  private inverted = new Animated.Value(\n    getInvertedMultiplier(this.props.gestureDirection)\n  );\n\n  private layout = {\n    width: new Animated.Value(this.props.layout.width),\n    height: new Animated.Value(this.props.layout.height),\n  };\n\n  private isSwiping = new Animated.Value(FALSE);\n\n  private interactionHandle: number | undefined;\n\n  private pendingGestureCallback: number | undefined;\n\n  private lastToValue: number | undefined;\n\n  private animate = ({\n    closing,\n    velocity,\n  }: {\n    closing: boolean;\n    velocity?: number;\n  }) => {\n    const { gesture, transitionSpec, onOpen, onClose, onTransition } =\n      this.props;\n\n    const toValue = this.getAnimateToValue({\n      ...this.props,\n      closing,\n    });\n\n    this.lastToValue = toValue;\n\n    this.isClosing.setValue(closing ? TRUE : FALSE);\n\n    const spec = closing ? transitionSpec.close : transitionSpec.open;\n\n    const animation =\n      spec.animation === 'spring' ? Animated.spring : Animated.timing;\n\n    this.setPointerEventsEnabled(!closing);\n    this.handleStartInteraction();\n\n    clearTimeout(this.pendingGestureCallback);\n\n    onTransition?.({ closing, gesture: velocity !== undefined });\n    animation(gesture, {\n      ...spec.config,\n      velocity,\n      toValue,\n      useNativeDriver,\n      isInteraction: false,\n    }).start(({ finished }) => {\n      this.handleEndInteraction();\n\n      clearTimeout(this.pendingGestureCallback);\n\n      if (finished) {\n        if (closing) {\n          onClose();\n        } else {\n          onOpen();\n        }\n\n        if (this.isCurrentlyMounted) {\n          // Make sure to re-open screen if it wasn't removed\n          this.forceUpdate();\n        }\n      }\n    });\n  };\n\n  private getAnimateToValue = ({\n    closing,\n    layout,\n    gestureDirection,\n  }: {\n    closing?: boolean;\n    layout: Layout;\n    gestureDirection: GestureDirection;\n  }) => {\n    if (!closing) {\n      return 0;\n    }\n\n    return getDistanceForDirection(layout, gestureDirection);\n  };\n\n  private setPointerEventsEnabled = (enabled: boolean) => {\n    const pointerEvents = enabled ? 'box-none' : 'none';\n\n    this.ref.current?.setPointerEvents(pointerEvents);\n  };\n\n  private handleStartInteraction = () => {\n    if (this.interactionHandle === undefined) {\n      this.interactionHandle = InteractionManager.createInteractionHandle();\n    }\n  };\n\n  private handleEndInteraction = () => {\n    if (this.interactionHandle !== undefined) {\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\n      this.interactionHandle = undefined;\n    }\n  };\n\n  private handleGestureStateChange = ({\n    nativeEvent,\n  }: PanGestureHandlerGestureEvent) => {\n    const {\n      layout,\n      onClose,\n      onGestureBegin,\n      onGestureCanceled,\n      onGestureEnd,\n      gestureDirection,\n      gestureVelocityImpact,\n    } = this.props;\n\n    switch (nativeEvent.state) {\n      case GestureState.ACTIVE:\n        this.isSwiping.setValue(TRUE);\n        this.handleStartInteraction();\n        onGestureBegin?.();\n        break;\n      case GestureState.CANCELLED: {\n        this.isSwiping.setValue(FALSE);\n        this.handleEndInteraction();\n\n        const velocity =\n          gestureDirection === 'vertical' ||\n          gestureDirection === 'vertical-inverted'\n            ? nativeEvent.velocityY\n            : nativeEvent.velocityX;\n\n        this.animate({ closing: this.props.closing, velocity });\n\n        onGestureCanceled?.();\n        break;\n      }\n      case GestureState.END: {\n        this.isSwiping.setValue(FALSE);\n\n        let distance;\n        let translation;\n        let velocity;\n\n        if (\n          gestureDirection === 'vertical' ||\n          gestureDirection === 'vertical-inverted'\n        ) {\n          distance = layout.height;\n          translation = nativeEvent.translationY;\n          velocity = nativeEvent.velocityY;\n        } else {\n          distance = layout.width;\n          translation = nativeEvent.translationX;\n          velocity = nativeEvent.velocityX;\n        }\n\n        const closing =\n          (translation + velocity * gestureVelocityImpact) *\n            getInvertedMultiplier(gestureDirection) >\n          distance / 2\n            ? velocity !== 0 || translation !== 0\n            : this.props.closing;\n\n        this.animate({ closing, velocity });\n\n        if (closing) {\n          // We call onClose with a delay to make sure that the animation has already started\n          // This will make sure that the state update caused by this doesn't affect start of animation\n          this.pendingGestureCallback = setTimeout(() => {\n            onClose();\n\n            // Trigger an update after we dispatch the action to remove the screen\n            // This will make sure that we check if the screen didn't get removed so we can cancel the animation\n            this.forceUpdate();\n          }, 32) as any as number;\n        }\n\n        onGestureEnd?.();\n        break;\n      }\n    }\n  };\n\n  // Memoize this to avoid extra work on re-render\n  private getInterpolatedStyle = memoize(\n    (\n      styleInterpolator: StackCardStyleInterpolator,\n      animation: StackCardInterpolationProps\n    ) => styleInterpolator(animation)\n  );\n\n  // Keep track of the animation context when deps changes.\n  private getCardAnimation = memoize(\n    (\n      interpolationIndex: number,\n      current: Animated.AnimatedInterpolation<number>,\n      next: Animated.AnimatedInterpolation<number> | undefined,\n      layout: Layout,\n      insetTop: number,\n      insetRight: number,\n      insetBottom: number,\n      insetLeft: number\n    ) => ({\n      index: interpolationIndex,\n      current: { progress: current },\n      next: next && { progress: next },\n      closing: this.isClosing,\n      swiping: this.isSwiping,\n      inverted: this.inverted,\n      layouts: {\n        screen: layout,\n      },\n      insets: {\n        top: insetTop,\n        right: insetRight,\n        bottom: insetBottom,\n        left: insetLeft,\n      },\n    })\n  );\n\n  private gestureActivationCriteria() {\n    const { layout, gestureDirection, gestureResponseDistance } = this.props;\n    const enableTrackpadTwoFingerGesture = true;\n\n    const distance =\n      gestureResponseDistance !== undefined\n        ? gestureResponseDistance\n        : gestureDirection === 'vertical' ||\n          gestureDirection === 'vertical-inverted'\n        ? GESTURE_RESPONSE_DISTANCE_VERTICAL\n        : GESTURE_RESPONSE_DISTANCE_HORIZONTAL;\n\n    if (gestureDirection === 'vertical') {\n      return {\n        maxDeltaX: 15,\n        minOffsetY: 5,\n        hitSlop: { bottom: -layout.height + distance },\n        enableTrackpadTwoFingerGesture,\n      };\n    } else if (gestureDirection === 'vertical-inverted') {\n      return {\n        maxDeltaX: 15,\n        minOffsetY: -5,\n        hitSlop: { top: -layout.height + distance },\n        enableTrackpadTwoFingerGesture,\n      };\n    } else {\n      const hitSlop = -layout.width + distance;\n      const invertedMultiplier = getInvertedMultiplier(gestureDirection);\n\n      if (invertedMultiplier === 1) {\n        return {\n          minOffsetX: 5,\n          maxDeltaY: 20,\n          hitSlop: { right: hitSlop },\n          enableTrackpadTwoFingerGesture,\n        };\n      } else {\n        return {\n          minOffsetX: -5,\n          maxDeltaY: 20,\n          hitSlop: { left: hitSlop },\n          enableTrackpadTwoFingerGesture,\n        };\n      }\n    }\n  }\n\n  private ref = React.createRef<CardSheetRef>();\n\n  render() {\n    const {\n      styleInterpolator,\n      interpolationIndex,\n      current,\n      gesture,\n      next,\n      layout,\n      insets,\n      overlay,\n      overlayEnabled,\n      shadowEnabled,\n      gestureEnabled,\n      gestureDirection,\n      pageOverflowEnabled,\n      headerDarkContent,\n      children,\n      containerStyle: customContainerStyle,\n      contentStyle,\n      ...rest\n    } = this.props;\n\n    const interpolationProps = this.getCardAnimation(\n      interpolationIndex,\n      current,\n      next,\n      layout,\n      insets.top,\n      insets.right,\n      insets.bottom,\n      insets.left\n    );\n\n    const interpolatedStyle = this.getInterpolatedStyle(\n      styleInterpolator,\n      interpolationProps\n    );\n\n    const { containerStyle, cardStyle, overlayStyle, shadowStyle } =\n      interpolatedStyle;\n\n    const handleGestureEvent = gestureEnabled\n      ? Animated.event(\n          [\n            {\n              nativeEvent:\n                gestureDirection === 'vertical' ||\n                gestureDirection === 'vertical-inverted'\n                  ? { translationY: gesture }\n                  : { translationX: gesture },\n            },\n          ],\n          { useNativeDriver }\n        )\n      : undefined;\n\n    const { backgroundColor } = StyleSheet.flatten(contentStyle || {});\n    const isTransparent =\n      typeof backgroundColor === 'string'\n        ? Color(backgroundColor).alpha() === 0\n        : false;\n\n    return (\n      <CardAnimationContext.Provider value={interpolationProps}>\n        {\n          // StatusBar messes with translucent status bar on Android\n          // So we should only enable it on iOS\n          Platform.OS === 'ios' &&\n          overlayEnabled &&\n          next &&\n          getIsModalPresentation(styleInterpolator) ? (\n            <ModalStatusBarManager\n              dark={headerDarkContent}\n              layout={layout}\n              insets={insets}\n              style={cardStyle}\n            />\n          ) : null\n        }\n        <Animated.View\n          style={{\n            // This is a dummy style that doesn't actually change anything visually.\n            // Animated needs the animated value to be used somewhere, otherwise things don't update properly.\n            // If we disable animations and hide header, it could end up making the value unused.\n            // So we have this dummy style that will always be used regardless of what else changed.\n            opacity: current,\n          }}\n          // Make sure that this view isn't removed. If this view is removed, our style with animated value won't apply\n          collapsable={false}\n        />\n        <View\n          pointerEvents=\"box-none\"\n          // Make sure this view is not removed on the new architecture, as it causes focus loss during navigation on Android.\n          // This can happen when the view flattening results in different trees - due to `overflow` style changing in a parent.\n          collapsable={false}\n          {...rest}\n        >\n          {overlayEnabled ? (\n            <View pointerEvents=\"box-none\" style={StyleSheet.absoluteFill}>\n              {overlay({ style: overlayStyle })}\n            </View>\n          ) : null}\n          <Animated.View\n            style={[styles.container, containerStyle, customContainerStyle]}\n            pointerEvents=\"box-none\"\n          >\n            <PanGestureHandler\n              enabled={layout.width !== 0 && gestureEnabled}\n              onGestureEvent={handleGestureEvent}\n              onHandlerStateChange={this.handleGestureStateChange}\n              {...this.gestureActivationCriteria()}\n            >\n              <Animated.View\n                needsOffscreenAlphaCompositing={hasOpacityStyle(cardStyle)}\n                style={[styles.container, cardStyle]}\n              >\n                {shadowEnabled && shadowStyle && !isTransparent ? (\n                  <Animated.View\n                    style={[\n                      styles.shadow,\n                      gestureDirection === 'horizontal'\n                        ? [styles.shadowHorizontal, styles.shadowLeft]\n                        : gestureDirection === 'horizontal-inverted'\n                        ? [styles.shadowHorizontal, styles.shadowRight]\n                        : gestureDirection === 'vertical'\n                        ? [styles.shadowVertical, styles.shadowTop]\n                        : [styles.shadowVertical, styles.shadowBottom],\n                      { backgroundColor },\n                      shadowStyle,\n                    ]}\n                    pointerEvents=\"none\"\n                  />\n                ) : null}\n                <CardSheet\n                  ref={this.ref}\n                  enabled={pageOverflowEnabled}\n                  layout={layout}\n                  style={contentStyle}\n                >\n                  {children}\n                </CardSheet>\n              </Animated.View>\n            </PanGestureHandler>\n          </Animated.View>\n        </View>\n      </CardAnimationContext.Provider>\n    );\n  }\n}\n\nexport const getIsModalPresentation = (\n  cardStyleInterpolator: StackCardStyleInterpolator\n) => {\n  return (\n    cardStyleInterpolator === forModalPresentationIOS ||\n    // Handle custom modal presentation interpolators as well\n    cardStyleInterpolator.name === 'forModalPresentationIOS'\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  overlay: {\n    flex: 1,\n    backgroundColor: '#000',\n  },\n  shadow: {\n    position: 'absolute',\n    shadowRadius: 5,\n    shadowColor: '#000',\n    shadowOpacity: 0.3,\n  },\n  shadowHorizontal: {\n    top: 0,\n    bottom: 0,\n    width: 3,\n    shadowOffset: { width: -1, height: 1 },\n  },\n  shadowLeft: {\n    left: 0,\n  },\n  shadowRight: {\n    right: 0,\n  },\n  shadowVertical: {\n    left: 0,\n    right: 0,\n    height: 3,\n    shadowOffset: { width: 1, height: -1 },\n  },\n  shadowTop: {\n    top: 0,\n  },\n  shadowBottom: {\n    bottom: 0,\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}