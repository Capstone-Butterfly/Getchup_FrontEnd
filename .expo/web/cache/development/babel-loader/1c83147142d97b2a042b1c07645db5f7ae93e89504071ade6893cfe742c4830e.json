{"ast":null,"code":"import { useLocale as $18f2051aff69b9bf$export$43bb16f9c6d9e3f7 } from \"./context.mjs\";\nimport { LocalizedStringDictionary as $6ksNp$LocalizedStringDictionary, LocalizedStringFormatter as $6ksNp$LocalizedStringFormatter } from \"@internationalized/string\";\nimport { useMemo as $6ksNp$useMemo } from \"react\";\nconst $fca6afa0e843324b$var$cache = new WeakMap();\nfunction $fca6afa0e843324b$var$getCachedDictionary(strings) {\n  let dictionary = $fca6afa0e843324b$var$cache.get(strings);\n  if (!dictionary) {\n    dictionary = new (0, $6ksNp$LocalizedStringDictionary)(strings);\n    $fca6afa0e843324b$var$cache.set(strings, dictionary);\n  }\n  return dictionary;\n}\nfunction $fca6afa0e843324b$export$87b761675e8eaa10(strings, packageName) {\n  return packageName && (0, $6ksNp$LocalizedStringDictionary).getGlobalDictionaryForPackage(packageName) || $fca6afa0e843324b$var$getCachedDictionary(strings);\n}\nfunction $fca6afa0e843324b$export$f12b703ca79dfbb1(strings, packageName) {\n  let {\n    locale: locale\n  } = (0, $18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();\n  let dictionary = $fca6afa0e843324b$export$87b761675e8eaa10(strings, packageName);\n  return (0, $6ksNp$useMemo)(() => new (0, $6ksNp$LocalizedStringFormatter)(locale, dictionary), [locale, dictionary]);\n}\nexport { $fca6afa0e843324b$export$87b761675e8eaa10 as useLocalizedStringDictionary, $fca6afa0e843324b$export$f12b703ca79dfbb1 as useLocalizedStringFormatter };","map":{"version":3,"names":["$fca6afa0e843324b$var$cache","WeakMap","$fca6afa0e843324b$var$getCachedDictionary","strings","dictionary","get","$6ksNp$LocalizedStringDictionary","set","$fca6afa0e843324b$export$87b761675e8eaa10","packageName","getGlobalDictionaryForPackage","$fca6afa0e843324b$export$f12b703ca79dfbb1","locale","$18f2051aff69b9bf$export$43bb16f9c6d9e3f7","$6ksNp$useMemo","$6ksNp$LocalizedStringFormatter"],"sources":["/Users/farhang/Desktop/June 17 /Front/Getchup_FrontEnd/node_modules/@react-aria/i18n/dist/packages/@react-aria/i18n/src/useLocalizedStringFormatter.ts"],"sourcesContent":["/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {LocalizedString, LocalizedStringDictionary, LocalizedStringFormatter, LocalizedStrings} from '@internationalized/string';\nimport {useLocale} from './context';\nimport {useMemo} from 'react';\n\nconst cache = new WeakMap();\nfunction getCachedDictionary<K extends string, T extends LocalizedString>(strings: LocalizedStrings<K, T>): LocalizedStringDictionary<K, T> {\n  let dictionary = cache.get(strings);\n  if (!dictionary) {\n    dictionary = new LocalizedStringDictionary(strings);\n    cache.set(strings, dictionary);\n  }\n\n  return dictionary;\n}\n\n/**\n * Returns a cached LocalizedStringDictionary for the given strings.\n */\nexport function useLocalizedStringDictionary<K extends string = string, T extends LocalizedString = string>(strings: LocalizedStrings<K, T>, packageName?: string): LocalizedStringDictionary<K, T> {\n  return (packageName && LocalizedStringDictionary.getGlobalDictionaryForPackage(packageName)) || getCachedDictionary(strings);\n}\n\n/**\n * Provides localized string formatting for the current locale. Supports interpolating variables,\n * selecting the correct pluralization, and formatting numbers. Automatically updates when the locale changes.\n * @param strings - A mapping of languages to localized strings by key.\n */\nexport function useLocalizedStringFormatter<K extends string = string, T extends LocalizedString = string>(strings: LocalizedStrings<K, T>, packageName?: string): LocalizedStringFormatter<K, T> {\n  let {locale} = useLocale();\n  let dictionary = useLocalizedStringDictionary(strings, packageName);\n  return useMemo(() => new LocalizedStringFormatter(locale, dictionary), [locale, dictionary]);\n}\n"],"mappings":";;;AAgBA,MAAMA,2BAAA,GAAQ,IAAIC,OAAA;AAClB,SAASC,0CAAiEC,OAA+B;EACvG,IAAIC,UAAA,GAAaJ,2BAAA,CAAMK,GAAG,CAACF,OAAA;EAC3B,IAAI,CAACC,UAAA,EAAY;IACfA,UAAA,GAAa,KAAI,GAAAE,gCAAwB,EAAEH,OAAA;IAC3CH,2BAAA,CAAMO,GAAG,CAACJ,OAAA,EAASC,UAAA;EACrB;EAEA,OAAOA,UAAA;AACT;AAKO,SAASI,0CAA4FL,OAA+B,EAAEM,WAAoB;EAC/J,OAAOA,WAAC,IAAe,IAAAH,gCAAwB,EAAEI,6BAA6B,CAACD,WAAA,KAAiBP,yCAAA,CAAoBC,OAAA;AACtH;AAOO,SAASQ,0CAA2FR,OAA+B,EAAEM,WAAoB;EAC9J,IAAI;IAAAG,MAAA,EAACA;EAAM,CAAC,GAAG,IAAAC,yCAAQ;EACvB,IAAIT,UAAA,GAAaI,yCAAA,CAA6BL,OAAA,EAASM,WAAA;EACvD,OAAO,IAAAK,cAAM,EAAE,MAAM,KAAI,GAAAC,+BAAuB,EAAEH,MAAA,EAAQR,UAAA,GAAa,CAACQ,MAAA,EAAQR,UAAA,CAAW;AAC7F","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}