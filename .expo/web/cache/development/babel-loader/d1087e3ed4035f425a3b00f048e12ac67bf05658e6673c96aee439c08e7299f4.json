{"ast":null,"code":"import { useCallback as $hnMvi$useCallback } from \"react\";\nimport { useControlledState as $hnMvi$useControlledState } from \"@react-stately/utils\";\nfunction $fc909762b330b746$export$61c6a8c84e605fb6(props) {\n  let [isOpen, setOpen] = (0, $hnMvi$useControlledState)(props.isOpen, props.defaultOpen || false, props.onOpenChange);\n  const open = (0, $hnMvi$useCallback)(() => {\n    setOpen(true);\n  }, [setOpen]);\n  const close = (0, $hnMvi$useCallback)(() => {\n    setOpen(false);\n  }, [setOpen]);\n  const toggle = (0, $hnMvi$useCallback)(() => {\n    setOpen(!isOpen);\n  }, [setOpen, isOpen]);\n  return {\n    isOpen: isOpen,\n    setOpen: setOpen,\n    open: open,\n    close: close,\n    toggle: toggle\n  };\n}\nexport { $fc909762b330b746$export$61c6a8c84e605fb6 as useOverlayTriggerState };","map":{"version":3,"names":["$fc909762b330b746$export$61c6a8c84e605fb6","props","isOpen","setOpen","$hnMvi$useControlledState","defaultOpen","onOpenChange","open","$hnMvi$useCallback","close","toggle"],"sources":["/Users/farhang/Desktop/June 17 /Front/Getchup_FrontEnd/node_modules/@react-stately/overlays/dist/packages/@react-stately/overlays/src/useOverlayTriggerState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {OverlayTriggerProps} from '@react-types/overlays';\nimport {useCallback} from 'react';\nimport {useControlledState} from '@react-stately/utils';\n\nexport interface OverlayTriggerState {\n  /** Whether the overlay is currently open. */\n  readonly isOpen: boolean,\n  /** Sets whether the overlay is open. */\n  setOpen(isOpen: boolean): void,\n  /** Opens the overlay. */\n  open(): void,\n  /** Closes the overlay. */\n  close(): void,\n  /** Toggles the overlay's visibility. */\n  toggle(): void\n}\n\n/**\n * Manages state for an overlay trigger. Tracks whether the overlay is open, and provides\n * methods to toggle this state.\n */\nexport function useOverlayTriggerState(props: OverlayTriggerProps): OverlayTriggerState  {\n  let [isOpen, setOpen] = useControlledState(props.isOpen, props.defaultOpen || false, props.onOpenChange);\n\n  const open = useCallback(() => {\n    setOpen(true);\n  }, [setOpen]);\n\n  const close = useCallback(() => {\n    setOpen(false);\n  }, [setOpen]);\n\n  const toggle = useCallback(() => {\n    setOpen(!isOpen);\n  }, [setOpen, isOpen]);\n\n  return {\n    isOpen,\n    setOpen,\n    open,\n    close,\n    toggle\n  };\n}\n"],"mappings":";;AAiCO,SAASA,0CAAuBC,KAA0B;EAC/D,IAAI,CAACC,MAAA,EAAQC,OAAA,CAAQ,GAAG,IAAAC,yBAAiB,EAAEH,KAAA,CAAMC,MAAM,EAAED,KAAA,CAAMI,WAAW,IAAI,OAAOJ,KAAA,CAAMK,YAAY;EAEvG,MAAMC,IAAA,GAAO,IAAAC,kBAAU,EAAE;IACvBL,OAAA,CAAQ;EACV,GAAG,CAACA,OAAA,CAAQ;EAEZ,MAAMM,KAAA,GAAQ,IAAAD,kBAAU,EAAE;IACxBL,OAAA,CAAQ;EACV,GAAG,CAACA,OAAA,CAAQ;EAEZ,MAAMO,MAAA,GAAS,IAAAF,kBAAU,EAAE;IACzBL,OAAA,CAAQ,CAACD,MAAA;EACX,GAAG,CAACC,OAAA,EAASD,MAAA,CAAO;EAEpB,OAAO;YACLA,MAAA;aACAC,OAAA;UACAI,IAAA;WACAE,KAAA;YACAC;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}