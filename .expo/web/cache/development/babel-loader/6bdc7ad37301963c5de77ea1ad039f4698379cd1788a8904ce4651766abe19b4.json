{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { mergeProps as $bvdLj$mergeProps, filterDOMProps as $bvdLj$filterDOMProps, useFormReset as $bvdLj$useFormReset } from \"@react-aria/utils\";\nimport { useFocusable as $bvdLj$useFocusable } from \"@react-aria/focus\";\nimport { usePress as $bvdLj$usePress } from \"@react-aria/interactions\";\nfunction $d2c8e2b0480f3f34$export$cbe85ee05b554577(props, state, ref) {\n  let {\n    isDisabled = false,\n    isReadOnly = false,\n    value: value,\n    name: name,\n    children: children,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby,\n    validationState = 'valid',\n    isInvalid: isInvalid\n  } = props;\n  let onChange = e => {\n    e.stopPropagation();\n    state.setSelected(e.target.checked);\n  };\n  let hasChildren = children != null;\n  let hasAriaLabel = ariaLabel != null || ariaLabelledby != null;\n  if (!hasChildren && !hasAriaLabel) console.warn('If you do not provide children, you must specify an aria-label for accessibility');\n  let {\n    pressProps: pressProps,\n    isPressed: isPressed\n  } = (0, $bvdLj$usePress)({\n    isDisabled: isDisabled\n  });\n  let {\n    pressProps: labelProps,\n    isPressed: isLabelPressed\n  } = (0, $bvdLj$usePress)({\n    isDisabled: isDisabled || isReadOnly,\n    onPress() {\n      state.toggle();\n    }\n  });\n  let {\n    focusableProps: focusableProps\n  } = (0, $bvdLj$useFocusable)(props, ref);\n  let interactions = (0, $bvdLj$mergeProps)(pressProps, focusableProps);\n  let domProps = (0, $bvdLj$filterDOMProps)(props, {\n    labelable: true\n  });\n  (0, $bvdLj$useFormReset)(ref, state.isSelected, state.setSelected);\n  return {\n    labelProps: (0, $bvdLj$mergeProps)(labelProps, {\n      onClick: e => e.preventDefault()\n    }),\n    inputProps: (0, $bvdLj$mergeProps)(domProps, _objectSpread(_objectSpread({\n      'aria-invalid': isInvalid || validationState === 'invalid' || undefined,\n      'aria-errormessage': props['aria-errormessage'],\n      'aria-controls': props['aria-controls'],\n      'aria-readonly': isReadOnly || undefined,\n      onChange: onChange,\n      disabled: isDisabled\n    }, value == null ? {} : {\n      value: value\n    }), {}, {\n      name: name,\n      type: 'checkbox'\n    }, interactions)),\n    isSelected: state.isSelected,\n    isPressed: isPressed || isLabelPressed,\n    isDisabled: isDisabled,\n    isReadOnly: isReadOnly,\n    isInvalid: isInvalid || validationState === 'invalid'\n  };\n}\nexport { $d2c8e2b0480f3f34$export$cbe85ee05b554577 as useToggle };","map":{"version":3,"names":["$d2c8e2b0480f3f34$export$cbe85ee05b554577","props","state","ref","isDisabled","isReadOnly","value","name","children","ariaLabel","ariaLabelledby","validationState","isInvalid","onChange","e","stopPropagation","setSelected","target","checked","hasChildren","hasAriaLabel","console","warn","pressProps","isPressed","$bvdLj$usePress","labelProps","isLabelPressed","onPress","toggle","focusableProps","$bvdLj$useFocusable","interactions","$bvdLj$mergeProps","domProps","$bvdLj$filterDOMProps","labelable","$bvdLj$useFormReset","isSelected","onClick","preventDefault","inputProps","_objectSpread","undefined","disabled","type"],"sources":["/Users/farhang/Desktop/June 17 /Front/Getchup_FrontEnd/node_modules/@react-aria/toggle/dist/packages/@react-aria/toggle/src/useToggle.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaToggleProps} from '@react-types/checkbox';\nimport {filterDOMProps, mergeProps, useFormReset} from '@react-aria/utils';\nimport {InputHTMLAttributes, LabelHTMLAttributes, RefObject} from 'react';\nimport {ToggleState} from '@react-stately/toggle';\nimport {useFocusable} from '@react-aria/focus';\nimport {usePress} from '@react-aria/interactions';\n\nexport interface ToggleAria {\n  /** Props to be spread on the label element. */\n  labelProps: LabelHTMLAttributes<HTMLLabelElement>,\n  /** Props to be spread on the input element. */\n  inputProps: InputHTMLAttributes<HTMLInputElement>,\n  /** Whether the toggle is selected. */\n  isSelected: boolean,\n  /** Whether the toggle is in a pressed state. */\n  isPressed: boolean,\n  /** Whether the toggle is disabled. */\n  isDisabled: boolean,\n  /** Whether the toggle is read only. */\n  isReadOnly: boolean,\n  /** Whether the toggle is invalid. */\n  isInvalid: boolean\n}\n\n/**\n * Handles interactions for toggle elements, e.g. Checkboxes and Switches.\n */\nexport function useToggle(props: AriaToggleProps, state: ToggleState, ref: RefObject<HTMLInputElement>): ToggleAria {\n  let {\n    isDisabled = false,\n    isReadOnly = false,\n    value,\n    name,\n    children,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby,\n    validationState = 'valid',\n    isInvalid\n  } = props;\n\n  let onChange = (e) => {\n    // since we spread props on label, onChange will end up there as well as in here.\n    // so we have to stop propagation at the lowest level that we care about\n    e.stopPropagation();\n    state.setSelected(e.target.checked);\n  };\n\n  let hasChildren = children != null;\n  let hasAriaLabel = ariaLabel != null || ariaLabelledby != null;\n  if (!hasChildren && !hasAriaLabel) {\n    console.warn('If you do not provide children, you must specify an aria-label for accessibility');\n  }\n\n  // This handles focusing the input on pointer down, which Safari does not do by default.\n  let {pressProps, isPressed} = usePress({\n    isDisabled\n  });\n\n  // iOS does not toggle checkboxes if you drag off and back onto the label, so handle it ourselves.\n  let {pressProps: labelProps, isPressed: isLabelPressed} = usePress({\n    isDisabled: isDisabled || isReadOnly,\n    onPress() {\n      state.toggle();\n    }\n  });\n\n  let {focusableProps} = useFocusable(props, ref);\n  let interactions = mergeProps(pressProps, focusableProps);\n  let domProps = filterDOMProps(props, {labelable: true});\n\n  useFormReset(ref, state.isSelected, state.setSelected);\n\n  return {\n    labelProps: mergeProps(labelProps, {onClick: e => e.preventDefault()}),\n    inputProps: mergeProps(domProps, {\n      'aria-invalid': isInvalid || validationState === 'invalid' || undefined,\n      'aria-errormessage': props['aria-errormessage'],\n      'aria-controls': props['aria-controls'],\n      'aria-readonly': isReadOnly || undefined,\n      onChange,\n      disabled: isDisabled,\n      ...(value == null ? {} : {value}),\n      name,\n      type: 'checkbox',\n      ...interactions\n    }),\n    isSelected: state.isSelected,\n    isPressed: isPressed || isLabelPressed,\n    isDisabled,\n    isReadOnly,\n    isInvalid: isInvalid || validationState === 'invalid'\n  };\n}\n"],"mappings":";;;;;;AAuCO,SAASA,0CAAUC,KAAsB,EAAEC,KAAkB,EAAEC,GAAgC;EACpG,IAAI;IACFC,UAAA,GAAa;IACbC,UAAA,GAAa;IAAAC,KAAA,EACbA,KAAK;IAAAC,IAAA,EACLA,IAAI;IAAAC,QAAA,EACJA,QAAQ;IACR,cAAcC,SAAS;IACvB,mBAAmBC,cAAc;IACjCC,eAAA,GAAkB;IAAAC,SAAA,EAClBA;EAAS,CACV,GAAGX,KAAA;EAEJ,IAAIY,QAAA,GAAYC,CAAA;IAGdA,CAAA,CAAEC,eAAe;IACjBb,KAAA,CAAMc,WAAW,CAACF,CAAA,CAAEG,MAAM,CAACC,OAAO;EACpC;EAEA,IAAIC,WAAA,GAAcX,QAAA,IAAY;EAC9B,IAAIY,YAAA,GAAeX,SAAA,IAAa,QAAQC,cAAA,IAAkB;EAC1D,IAAI,CAACS,WAAA,IAAe,CAACC,YAAA,EACnBC,OAAA,CAAQC,IAAI,CAAC;EAIf,IAAI;IAAAC,UAAA,EAACA,UAAU;IAAAC,SAAA,EAAEA;EAAS,CAAC,GAAG,IAAAC,eAAO,EAAE;gBACrCrB;EACF;EAGA,IAAI;IAACmB,UAAA,EAAYG,UAAU;IAAEF,SAAA,EAAWG;EAAc,CAAC,GAAG,IAAAF,eAAO,EAAE;IACjErB,UAAA,EAAYA,UAAA,IAAcC,UAAA;IAC1BuB,QAAA;MACE1B,KAAA,CAAM2B,MAAM;IACd;EACF;EAEA,IAAI;IAAAC,cAAA,EAACA;EAAc,CAAC,GAAG,IAAAC,mBAAW,EAAE9B,KAAA,EAAOE,GAAA;EAC3C,IAAI6B,YAAA,GAAe,IAAAC,iBAAS,EAAEV,UAAA,EAAYO,cAAA;EAC1C,IAAII,QAAA,GAAW,IAAAC,qBAAa,EAAElC,KAAA,EAAO;IAACmC,SAAA,EAAW;EAAI;EAErD,IAAAC,mBAAW,EAAElC,GAAA,EAAKD,KAAA,CAAMoC,UAAU,EAAEpC,KAAA,CAAMc,WAAW;EAErD,OAAO;IACLU,UAAA,EAAY,IAAAO,iBAAS,EAAEP,UAAA,EAAY;MAACa,OAAA,EAASzB,CAAA,IAAKA,CAAA,CAAE0B,cAAc;IAAE;IACpEC,UAAA,EAAY,IAAAR,iBAAS,EAAEC,QAAA,EAAAQ,aAAA,CAAAA,aAAA;MACrB,gBAAgB9B,SAAA,IAAaD,eAAA,KAAoB,aAAagC,SAAA;MAC9D,qBAAqB1C,KAAK,CAAC,oBAAoB;MAC/C,iBAAiBA,KAAK,CAAC,gBAAgB;MACvC,iBAAiBI,UAAA,IAAcsC,SAAA;gBAC/B9B,QAAA;MACA+B,QAAA,EAAUxC;IAAA,GACNE,KAAA,IAAS,OAAO,CAAC,IAAI;aAACA;IAAK,CAAC;YAChCC,IAAA;MACAsC,IAAA,EAAM;IAAA,GACHb,YAAY,CACjB;IACAM,UAAA,EAAYpC,KAAA,CAAMoC,UAAU;IAC5Bd,SAAA,EAAWA,SAAA,IAAaG,cAAA;gBACxBvB,UAAA;gBACAC,UAAA;IACAO,SAAA,EAAWA,SAAA,IAAaD,eAAA,KAAoB;EAC9C;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}