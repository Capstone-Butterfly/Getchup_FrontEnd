{"ast":null,"code":"import { useEffect } from 'react';\nexport const onCloseMap = new WeakMap();\nexport function useCloseOnScroll(opts) {\n  let {\n    triggerRef,\n    isOpen,\n    onClose\n  } = opts;\n  useEffect(() => {\n    if (!isOpen) {\n      return;\n    }\n    let onScroll = e => {\n      let target = e.target;\n      if (!triggerRef.current || !target.contains(triggerRef.current)) {\n        return;\n      }\n      let onCloseHandler = onClose || onCloseMap.get(triggerRef.current);\n      if (onCloseHandler) {\n        onCloseHandler();\n      }\n    };\n    window.addEventListener('scroll', onScroll, true);\n    return () => {\n      window.removeEventListener('scroll', onScroll, true);\n    };\n  }, [isOpen, onClose, triggerRef]);\n}","map":{"version":3,"names":["useEffect","onCloseMap","WeakMap","useCloseOnScroll","opts","triggerRef","isOpen","onClose","onScroll","e","target","current","contains","onCloseHandler","get","window","addEventListener","removeEventListener"],"sources":["/Users/farhang/Desktop/June 17 /Front/Getchup_FrontEnd/node_modules/@react-native-aria/overlays/src/web/overlays/src/useCloseOnScroll.ts"],"sourcesContent":["//@ts-nocheck\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport { RefObject, useEffect } from 'react';\n\n// This behavior moved from useOverlayTrigger to useOverlayPosition.\n// For backward compatibility, where useOverlayTrigger handled hiding the popover on close,\n// it sets a close function here mapped from the trigger element. This way we can avoid\n// forcing users to pass an onClose function to useOverlayPosition which could be considered\n// a breaking change.\nexport const onCloseMap: WeakMap<HTMLElement, () => void> = new WeakMap();\n\ninterface CloseOnScrollOptions {\n  triggerRef: RefObject<HTMLElement>;\n  isOpen?: boolean;\n  onClose?: () => void;\n}\n\n/** @private */\nexport function useCloseOnScroll(opts: CloseOnScrollOptions) {\n  let { triggerRef, isOpen, onClose } = opts;\n\n  useEffect(() => {\n    if (!isOpen) {\n      return;\n    }\n\n    let onScroll = (e: MouseEvent) => {\n      // Ignore if scrolling an scrollable region outside the trigger's tree.\n      let target = e.target as HTMLElement;\n      if (!triggerRef.current || !target.contains(triggerRef.current)) {\n        return;\n      }\n\n      let onCloseHandler = onClose || onCloseMap.get(triggerRef.current);\n      if (onCloseHandler) {\n        onCloseHandler();\n      }\n    };\n\n    window.addEventListener('scroll', onScroll, true);\n    return () => {\n      window.removeEventListener('scroll', onScroll, true);\n    };\n  }, [isOpen, onClose, triggerRef]);\n}\n"],"mappings":"AAaA,SAAoBA,SAAS,QAAQ,OAAO;AAO5C,OAAO,MAAMC,UAA4C,GAAG,IAAIC,OAAO,CAAC,CAAC;AASzE,OAAO,SAASC,gBAAgBA,CAACC,IAA0B,EAAE;EAC3D,IAAI;IAAEC,UAAU;IAAEC,MAAM;IAAEC;EAAQ,CAAC,GAAGH,IAAI;EAE1CJ,SAAS,CAAC,MAAM;IACd,IAAI,CAACM,MAAM,EAAE;MACX;IACF;IAEA,IAAIE,QAAQ,GAAIC,CAAa,IAAK;MAEhC,IAAIC,MAAM,GAAGD,CAAC,CAACC,MAAqB;MACpC,IAAI,CAACL,UAAU,CAACM,OAAO,IAAI,CAACD,MAAM,CAACE,QAAQ,CAACP,UAAU,CAACM,OAAO,CAAC,EAAE;QAC/D;MACF;MAEA,IAAIE,cAAc,GAAGN,OAAO,IAAIN,UAAU,CAACa,GAAG,CAACT,UAAU,CAACM,OAAO,CAAC;MAClE,IAAIE,cAAc,EAAE;QAClBA,cAAc,CAAC,CAAC;MAClB;IACF,CAAC;IAEDE,MAAM,CAACC,gBAAgB,CAAC,QAAQ,EAAER,QAAQ,EAAE,IAAI,CAAC;IACjD,OAAO,MAAM;MACXO,MAAM,CAACE,mBAAmB,CAAC,QAAQ,EAAET,QAAQ,EAAE,IAAI,CAAC;IACtD,CAAC;EACH,CAAC,EAAE,CAACF,MAAM,EAAEC,OAAO,EAAEF,UAAU,CAAC,CAAC;AACnC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}